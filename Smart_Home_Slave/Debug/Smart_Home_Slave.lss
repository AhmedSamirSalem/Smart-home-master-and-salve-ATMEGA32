
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000387e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000162  00800060  0000387e  00003912  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008001c2  008001c2  00003a74  2**0
                  ALLOC
  3 .stab         00003810  00000000  00000000  00003a74  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000194d  00000000  00000000  00007284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00008bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00008d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00008f63  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000b36e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000c6f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000d8cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000da8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000dd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e6f0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b3 16 	jmp	0x2d66	; 0x2d66 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 80 16 	jmp	0x2d00	; 0x2d00 <__vector_10>
      2c:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 ea 19 	jmp	0x33d4	; 0x33d4 <__vector_13>
      38:	0c 94 1d 1a 	jmp	0x343a	; 0x343a <__vector_14>
      3c:	0c 94 50 1a 	jmp	0x34a0	; 0x34a0 <__vector_15>
      40:	0c 94 ff 0b 	jmp	0x17fe	; 0x17fe <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e7       	ldi	r30, 0x7E	; 126
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3c       	cpi	r26, 0xC2	; 194
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a2 ec       	ldi	r26, 0xC2	; 194
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3d       	cpi	r26, 0xD9	; 217
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 8d 1a 	call	0x351a	; 0x351a <main>
      8a:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e9       	ldi	r26, 0x90	; 144
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 06 1c 	jmp	0x380c	; 0x380c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e9       	ldi	r24, 0x90	; 144
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 22 1c 	jmp	0x3844	; 0x3844 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e9       	ldi	r22, 0x90	; 144
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 12 1c 	jmp	0x3824	; 0x3824 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 2e 1c 	jmp	0x385c	; 0x385c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 16 1c 	jmp	0x382c	; 0x382c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 32 1c 	jmp	0x3864	; 0x3864 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 2a 1c 	jmp	0x3854	; 0x3854 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 56       	subi	r30, 0x68	; 104
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <HKPD_charGetKey>:
#include "HKPD_private.h"
#include "HKPD_config.h"
#include "HKPD_interface.h"

char HKPD_charGetKey(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	65 97       	sbiw	r28, 0x15	; 21
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Row,L_u8Col,L_u8Debounce=0;
     e42:	19 8a       	std	Y+17, r1	; 0x11
	MDIO_StderrSetPortDirection(HKPD_PORT,0xF0);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	60 ef       	ldi	r22, 0xF0	; 240
     e48:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(HKPD_PORT,0x0F);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	6f e0       	ldi	r22, 0x0F	; 15
     e50:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <MDIO_StderrSetPortValue>
	do
	{
		MDIO_StderrGetPortValue(&L_u8Row,HKPD_PORT);
     e54:	ce 01       	movw	r24, r28
     e56:	0f 96       	adiw	r24, 0x0f	; 15
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <MDIO_StderrGetPortValue>
		L_u8Row=(~L_u8Row)&0X0F;
     e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e60:	80 95       	com	r24
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	8f 87       	std	Y+15, r24	; 0x0f
	}while(L_u8Row==0X00);
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	88 23       	and	r24, r24
     e6a:	a1 f3       	breq	.-24     	; 0xe54 <HKPD_charGetKey+0x26>
	MDIO_StderrSetPortDirection(HKPD_PORT,0x0F);
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	6f e0       	ldi	r22, 0x0F	; 15
     e70:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(HKPD_PORT,0xF0);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	60 ef       	ldi	r22, 0xF0	; 240
     e78:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <MDIO_StderrSetPortValue>
	MDIO_StderrGetPortValue(&L_u8Col,HKPD_PORT);
     e7c:	ce 01       	movw	r24, r28
     e7e:	40 96       	adiw	r24, 0x10	; 16
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <MDIO_StderrGetPortValue>
	L_u8Col=(((~L_u8Col)&0XF0)>>4);
     e86:	88 89       	ldd	r24, Y+16	; 0x10
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	80 7f       	andi	r24, 0xF0	; 240
     e92:	90 70       	andi	r25, 0x00	; 0
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	88 8b       	std	Y+16, r24	; 0x10
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <HKPD_charGetKey+0x84>
	while(L_u8Debounce!=0xF0)
	{
		MDIO_StderrGetPortValue(&L_u8Debounce,HKPD_PORT);
     ea8:	ce 01       	movw	r24, r28
     eaa:	41 96       	adiw	r24, 0x11	; 17
     eac:	62 e0       	ldi	r22, 0x02	; 2
     eae:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <MDIO_StderrGetPortValue>
	}while(L_u8Row==0X00);
	MDIO_StderrSetPortDirection(HKPD_PORT,0x0F);
	MDIO_StderrSetPortValue(HKPD_PORT,0xF0);
	MDIO_StderrGetPortValue(&L_u8Col,HKPD_PORT);
	L_u8Col=(((~L_u8Col)&0XF0)>>4);
	while(L_u8Debounce!=0xF0)
     eb2:	89 89       	ldd	r24, Y+17	; 0x11
     eb4:	80 3f       	cpi	r24, 0xF0	; 240
     eb6:	c1 f7       	brne	.-16     	; 0xea8 <HKPD_charGetKey+0x7a>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e2       	ldi	r26, 0x20	; 32
     ebe:	b1 e4       	ldi	r27, 0x41	; 65
     ec0:	8b 87       	std	Y+11, r24	; 0x0b
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	ad 87       	std	Y+13, r26	; 0x0d
     ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a ef       	ldi	r20, 0xFA	; 250
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	a9 87       	std	Y+9, r26	; 0x09
     ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <HKPD_charGetKey+0xdc>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <HKPD_charGetKey+0x15a>
	else if (__tmp > 65535)
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <HKPD_charGetKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	6b 85       	ldd	r22, Y+11	; 0x0b
     f24:	7c 85       	ldd	r23, Y+12	; 0x0c
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <HKPD_charGetKey+0x13c>
     f4c:	88 ec       	ldi	r24, 0xC8	; 200
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <HKPD_charGetKey+0x12a>
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <HKPD_charGetKey+0x11e>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <HKPD_charGetKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6f 81       	ldd	r22, Y+7	; 0x07
     f76:	78 85       	ldd	r23, Y+8	; 0x08
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <HKPD_charGetKey+0x166>
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	{
		MDIO_StderrGetPortValue(&L_u8Debounce,HKPD_PORT);
		//HLCD_voidSendNumber(L_u8Debounce);
	}
	_delay_ms(10);
	switch(L_u8Row)
     f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 8b       	std	Y+21, r19	; 0x15
     fa4:	2c 8b       	std	Y+20, r18	; 0x14
     fa6:	8c 89       	ldd	r24, Y+20	; 0x14
     fa8:	9d 89       	ldd	r25, Y+21	; 0x15
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	c1 f0       	breq	.+48     	; 0xfe0 <HKPD_charGetKey+0x1b2>
     fb0:	2c 89       	ldd	r18, Y+20	; 0x14
     fb2:	3d 89       	ldd	r19, Y+21	; 0x15
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	31 05       	cpc	r19, r1
     fb8:	34 f4       	brge	.+12     	; 0xfc6 <HKPD_charGetKey+0x198>
     fba:	8c 89       	ldd	r24, Y+20	; 0x14
     fbc:	9d 89       	ldd	r25, Y+21	; 0x15
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	61 f0       	breq	.+24     	; 0xfdc <HKPD_charGetKey+0x1ae>
     fc4:	15 c0       	rjmp	.+42     	; 0xff0 <HKPD_charGetKey+0x1c2>
     fc6:	2c 89       	ldd	r18, Y+20	; 0x14
     fc8:	3d 89       	ldd	r19, Y+21	; 0x15
     fca:	24 30       	cpi	r18, 0x04	; 4
     fcc:	31 05       	cpc	r19, r1
     fce:	59 f0       	breq	.+22     	; 0xfe6 <HKPD_charGetKey+0x1b8>
     fd0:	8c 89       	ldd	r24, Y+20	; 0x14
     fd2:	9d 89       	ldd	r25, Y+21	; 0x15
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	91 05       	cpc	r25, r1
     fd8:	49 f0       	breq	.+18     	; 0xfec <HKPD_charGetKey+0x1be>
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <HKPD_charGetKey+0x1c2>
	{
		case 1:L_u8Row=0;break;
     fdc:	1f 86       	std	Y+15, r1	; 0x0f
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 2:L_u8Row=1;break;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8f 87       	std	Y+15, r24	; 0x0f
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 4:L_u8Row=2;break;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	8f 87       	std	Y+15, r24	; 0x0f
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 8:L_u8Row=3;break;
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	8f 87       	std	Y+15, r24	; 0x0f
		default:break;//do nothing
	}
	switch(L_u8Col)
     ff0:	88 89       	ldd	r24, Y+16	; 0x10
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3b 8b       	std	Y+19, r19	; 0x13
     ff8:	2a 8b       	std	Y+18, r18	; 0x12
     ffa:	8a 89       	ldd	r24, Y+18	; 0x12
     ffc:	9b 89       	ldd	r25, Y+19	; 0x13
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	91 05       	cpc	r25, r1
    1002:	c1 f0       	breq	.+48     	; 0x1034 <HKPD_charGetKey+0x206>
    1004:	2a 89       	ldd	r18, Y+18	; 0x12
    1006:	3b 89       	ldd	r19, Y+19	; 0x13
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	34 f4       	brge	.+12     	; 0x101a <HKPD_charGetKey+0x1ec>
    100e:	8a 89       	ldd	r24, Y+18	; 0x12
    1010:	9b 89       	ldd	r25, Y+19	; 0x13
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	61 f0       	breq	.+24     	; 0x1030 <HKPD_charGetKey+0x202>
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <HKPD_charGetKey+0x216>
    101a:	2a 89       	ldd	r18, Y+18	; 0x12
    101c:	3b 89       	ldd	r19, Y+19	; 0x13
    101e:	24 30       	cpi	r18, 0x04	; 4
    1020:	31 05       	cpc	r19, r1
    1022:	59 f0       	breq	.+22     	; 0x103a <HKPD_charGetKey+0x20c>
    1024:	8a 89       	ldd	r24, Y+18	; 0x12
    1026:	9b 89       	ldd	r25, Y+19	; 0x13
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	91 05       	cpc	r25, r1
    102c:	49 f0       	breq	.+18     	; 0x1040 <HKPD_charGetKey+0x212>
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <HKPD_charGetKey+0x216>
	{
		case 1:L_u8Col=0;break;
    1030:	18 8a       	std	Y+16, r1	; 0x10
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <HKPD_charGetKey+0x216>
		case 2:L_u8Col=1;break;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	88 8b       	std	Y+16, r24	; 0x10
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <HKPD_charGetKey+0x216>
		case 4:L_u8Col=2;break;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	88 8b       	std	Y+16, r24	; 0x10
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <HKPD_charGetKey+0x216>
		case 8:L_u8Col=3;break;
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	88 8b       	std	Y+16, r24	; 0x10
		default:break;//do nothing
	}
	return HKPD_charKeypad[L_u8Row][L_u8Col];
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	48 2f       	mov	r20, r24
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	88 89       	ldd	r24, Y+16	; 0x10
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	ca 01       	movw	r24, r20
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	fc 01       	movw	r30, r24
    1060:	e8 56       	subi	r30, 0x68	; 104
    1062:	fe 4f       	sbci	r31, 0xFE	; 254
    1064:	80 81       	ld	r24, Z


}
    1066:	65 96       	adiw	r28, 0x15	; 21
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <HLCD_voidinit>:
#include "HLCD_config.h"
#include "HLCD_interface.h"


void HLCD_voidinit(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62

#if HLCD_MODE==HLCD_8BIT_MODE
	MDIO_StderrSetPortDirection(HLCD_DATA_PORT,0xFF);
    1080:	83 e0       	ldi	r24, 0x03	; 3
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_OUTPUT);
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	61 e0       	ldi	r22, 0x01	; 1
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <MDIO_StderrSetPinDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_OUTPUT);
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <MDIO_StderrSetPinDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_OUTPUT);
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <MDIO_StderrSetPinDirection>
	HLCD_voidSendCommand(HLCD_FUNCTION_SET);
    10a6:	8c e3       	ldi	r24, 0x3C	; 60
    10a8:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MTIM_voidBusyWaitDlay>
	HLCD_voidSendCommand(HLCD_DISPLAY_ON_OFF);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(1);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MTIM_voidBusyWaitDlay>
	HLCD_voidSendCommand(HLCD_CLEAR);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(2);
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MTIM_voidBusyWaitDlay>
	_delay_us(50);
	HLCD_voidSendCommand(HLCD_CLEAR);
	_delay_ms(2);

#endif
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <HLCD_voidSendChar>:
void HLCD_voidSendChar(u8 ARG_u8Data)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
#if HLCD_MODE==HLCD_8BIT_MODE
	/* control*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_HIGH);
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_LOW);
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPortValue(HLCD_DATA_PORT,ARG_u8Data);
    10f6:	83 e0       	ldi	r24, 0x03	; 3
    10f8:	69 81       	ldd	r22, Y+1	; 0x01
    10fa:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <MDIO_StderrSetPortValue>
	/* enable cycle*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	63 e0       	ldi	r22, 0x03	; 3
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MTIM_voidBusyWaitDlay(2);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MTIM_voidBusyWaitDlay>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	63 e0       	ldi	r22, 0x03	; 3
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
	_delay_ms(2);
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
#endif

}
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 ARG_u8Cmd)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
#if HLCD_MODE==HLCD_8BIT_MODE
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_LOW);
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	61 e0       	ldi	r22, 0x01	; 1
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_LOW);
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPortValue(HLCD_DATA_PORT,ARG_u8Cmd);
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <MDIO_StderrSetPortValue>
	/* enable cycle*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	63 e0       	ldi	r22, 0x03	; 3
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	63 e0       	ldi	r22, 0x03	; 3
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	MTIM_voidBusyWaitDlay(2);
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <MTIM_voidBusyWaitDlay>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	_delay_ms(2);
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);


#endif
}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <HLCD_voidSendString>:
void HLCD_voidSendString(const char * ARG_charpString)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <HLCD_voidSendString+0x6>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1192:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_charpString!=NULL)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	09 f1       	breq	.+66     	; 0x11de <HLCD_voidSendString+0x5c>
    119c:	15 c0       	rjmp	.+42     	; 0x11c8 <HLCD_voidSendString+0x46>
	{
		while(ARG_charpString[Local_u8Counter]!='\0')
		{
			HLCD_voidSendChar(ARG_charpString[Local_u8Counter]);
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
			Local_u8Counter++;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8Counter==16)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 31       	cpi	r24, 0x10	; 16
    11be:	21 f4       	brne	.+8      	; 0x11c8 <HLCD_voidSendString+0x46>
			{
				HLCD_voidGoToXY(1,0);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
void HLCD_voidSendString(const char * ARG_charpString)
{
	u8 Local_u8Counter=0;
	if(ARG_charpString!=NULL)
	{
		while(ARG_charpString[Local_u8Counter]!='\0')
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	80 81       	ld	r24, Z
    11da:	88 23       	and	r24, r24
    11dc:	01 f7       	brne	.-64     	; 0x119e <HLCD_voidSendString+0x1c>
	}
	else
	{
		// do nothing
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(s32 ARG_s32Number)
{
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	2f 97       	sbiw	r28, 0x0f	; 15
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	6c 87       	std	Y+12, r22	; 0x0c
    1204:	7d 87       	std	Y+13, r23	; 0x0d
    1206:	8e 87       	std	Y+14, r24	; 0x0e
    1208:	9f 87       	std	Y+15, r25	; 0x0f
	u8 Local_u8Arr[10],Local_u8Counter=0;
    120a:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_s32Number<0)
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1210:	ae 85       	ldd	r26, Y+14	; 0x0e
    1212:	bf 85       	ldd	r27, Y+15	; 0x0f
    1214:	bb 23       	and	r27, r27
    1216:	9c f4       	brge	.+38     	; 0x123e <HLCD_voidSendNumber+0x54>
	{
		HLCD_voidSendChar('-');
    1218:	8d e2       	ldi	r24, 0x2D	; 45
    121a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
		ARG_s32Number*=-1;
    121e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1220:	9d 85       	ldd	r25, Y+13	; 0x0d
    1222:	ae 85       	ldd	r26, Y+14	; 0x0e
    1224:	bf 85       	ldd	r27, Y+15	; 0x0f
    1226:	b0 95       	com	r27
    1228:	a0 95       	com	r26
    122a:	90 95       	com	r25
    122c:	81 95       	neg	r24
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	af 4f       	sbci	r26, 0xFF	; 255
    1232:	bf 4f       	sbci	r27, 0xFF	; 255
    1234:	8c 87       	std	Y+12, r24	; 0x0c
    1236:	9d 87       	std	Y+13, r25	; 0x0d
    1238:	ae 87       	std	Y+14, r26	; 0x0e
    123a:	bf 87       	std	Y+15, r27	; 0x0f
    123c:	39 c0       	rjmp	.+114    	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	}
	else if(0==ARG_s32Number)
    123e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1240:	9d 85       	ldd	r25, Y+13	; 0x0d
    1242:	ae 85       	ldd	r26, Y+14	; 0x0e
    1244:	bf 85       	ldd	r27, Y+15	; 0x0f
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	a1 05       	cpc	r26, r1
    124a:	b1 05       	cpc	r27, r1
    124c:	89 f5       	brne	.+98     	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	{
		HLCD_voidSendChar('0');
    124e:	80 e3       	ldi	r24, 0x30	; 48
    1250:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
    1254:	2d c0       	rjmp	.+90     	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	{
		// do nothing
	}
	while(ARG_s32Number)
	{
		Local_u8Arr[Local_u8Counter]=ARG_s32Number%10;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	08 2f       	mov	r16, r24
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	8c 85       	ldd	r24, Y+12	; 0x0c
    125e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1260:	ae 85       	ldd	r26, Y+14	; 0x0e
    1262:	bf 85       	ldd	r27, Y+15	; 0x0f
    1264:	2a e0       	ldi	r18, 0x0A	; 10
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__divmodsi4>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	28 2f       	mov	r18, r24
    127a:	ce 01       	movw	r24, r28
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	fc 01       	movw	r30, r24
    1280:	e0 0f       	add	r30, r16
    1282:	f1 1f       	adc	r31, r17
    1284:	20 83       	st	Z, r18
		ARG_s32Number/=10;
    1286:	8c 85       	ldd	r24, Y+12	; 0x0c
    1288:	9d 85       	ldd	r25, Y+13	; 0x0d
    128a:	ae 85       	ldd	r26, Y+14	; 0x0e
    128c:	bf 85       	ldd	r27, Y+15	; 0x0f
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__divmodsi4>
    129e:	da 01       	movw	r26, r20
    12a0:	c9 01       	movw	r24, r18
    12a2:	8c 87       	std	Y+12, r24	; 0x0c
    12a4:	9d 87       	std	Y+13, r25	; 0x0d
    12a6:	ae 87       	std	Y+14, r26	; 0x0e
    12a8:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8Counter++;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// do nothing
	}
	while(ARG_s32Number)
    12b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b4:	ae 85       	ldd	r26, Y+14	; 0x0e
    12b6:	bf 85       	ldd	r27, Y+15	; 0x0f
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	a1 05       	cpc	r26, r1
    12bc:	b1 05       	cpc	r27, r1
    12be:	59 f6       	brne	.-106    	; 0x1256 <HLCD_voidSendNumber+0x6c>
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <HLCD_voidSendNumber+0xf6>
		ARG_s32Number/=10;
		Local_u8Counter++;
	}
	while(Local_u8Counter>0)
	{
		Local_u8Counter--;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendChar('0'+Local_u8Arr[Local_u8Counter]);
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	ce 01       	movw	r24, r28
    12d0:	02 96       	adiw	r24, 0x02	; 2
    12d2:	fc 01       	movw	r30, r24
    12d4:	e2 0f       	add	r30, r18
    12d6:	f3 1f       	adc	r31, r19
    12d8:	80 81       	ld	r24, Z
    12da:	80 5d       	subi	r24, 0xD0	; 208
    12dc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
	{
		Local_u8Arr[Local_u8Counter]=ARG_s32Number%10;
		ARG_s32Number/=10;
		Local_u8Counter++;
	}
	while(Local_u8Counter>0)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	71 f7       	brne	.-36     	; 0x12c2 <HLCD_voidSendNumber+0xd8>
	{
		Local_u8Counter--;
		HLCD_voidSendChar('0'+Local_u8Arr[Local_u8Counter]);
	}
}
    12e6:	2f 96       	adiw	r28, 0x0f	; 15
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	08 95       	ret

000012fc <HLCD_voidGoToXY>:
void HLCD_voidGoToXY(u8 ARG_u8X,u8 ARG_u8Y)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <HLCD_voidGoToXY+0x6>
    1302:	0f 92       	push	r0
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Addres;
	if(0==ARG_u8X)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 23       	and	r24, r24
    1310:	19 f4       	brne	.+6      	; 0x1318 <HLCD_voidGoToXY+0x1c>
	{
		Local_u8Addres=ARG_u8Y;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <HLCD_voidGoToXY+0x28>
	}
	else if(1==ARG_u8X)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	19 f4       	brne	.+6      	; 0x1324 <HLCD_voidGoToXY+0x28>
	{
		Local_u8Addres=ARG_u8Y+DDRAM_ROW_OFFSET; // offset of the ddram addres
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	80 5c       	subi	r24, 0xC0	; 192
    1322:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// Report an error
	}
	HLCD_voidSendCommand(Local_u8Addres+DDRAM_ADDRESS_OFFSET);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 58       	subi	r24, 0x80	; 128
    1328:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>

}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <HLCD_voidCustomChar>:
void HLCD_voidCustomChar(u8 * ARG_u8pCustomChar,u8 ARG_u8CustomCharNum)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <HLCD_voidCustomChar+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <HLCD_voidCustomChar+0x8>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Counter;
	// seeting the address of the cgram to save the custom character
	u8 Local_u8CGRAMAddres=ARG_u8CustomCharNum*8;
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(Local_u8CGRAMAddres+64);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	80 5c       	subi	r24, 0xC0	; 192
    1364:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <HLCD_voidCustomChar+0x50>
	{
		HLCD_voidSendChar(ARG_u8pCustomChar[Local_u8Counter]);
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	fc 01       	movw	r30, r24
    1378:	e2 0f       	add	r30, r18
    137a:	f3 1f       	adc	r31, r19
    137c:	80 81       	ld	r24, Z
    137e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
{
	u8 Local_u8Counter;
	// seeting the address of the cgram to save the custom character
	u8 Local_u8CGRAMAddres=ARG_u8CustomCharNum*8;
	HLCD_voidSendCommand(Local_u8CGRAMAddres+64);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	88 30       	cpi	r24, 0x08	; 8
    138c:	78 f3       	brcs	.-34     	; 0x136c <HLCD_voidCustomChar+0x34>
	{
		HLCD_voidSendChar(ARG_u8pCustomChar[Local_u8Counter]);
	}
	// get back to ddram
	HLCD_voidSendCommand(DDRAM_ADDRESS_OFFSET);
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>



}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 ARG_u8Row,u8 ARG_u8Col)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <HLCD_voidSetCursor+0x6>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	6a 83       	std	Y+2, r22	; 0x02
	HLCD_voidSendCommand((((4*ARG_u8Row)<<4)+0x80+ARG_u8Col));
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	98 2f       	mov	r25, r24
    13c2:	92 95       	swap	r25
    13c4:	90 7f       	andi	r25, 0xF0	; 240
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	89 0f       	add	r24, r25
    13ca:	80 58       	subi	r24, 0x80	; 128
    13cc:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_config.h"
#include "util/delay.h"

u8 KEYPAD_u8GetPressedKey(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	cd b7       	in	r28, 0x3d	; 61
    13e0:	de b7       	in	r29, 0x3e	; 62
    13e2:	62 97       	sbiw	r28, 0x12	; 18
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=KEYPAD_NoPressedKey;
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	89 8b       	std	Y+17, r24	; 0x11
	static u8 Local_u8colArr[Keypad_colno]={KEYPAD_Col0Pin,KEYPAD_Col1Pin,KEYPAD_Col2Pin,KEYPAD_Col3Pin};
	static u8 Local_u8rowArr[Keypad_rowno]={KEYPAD_Row0Pin,KEYPAD_Row1Pin,KEYPAD_Row2Pin,KEYPAD_Row3Pin};

	static u8 Local_u8KEYPADArr[Keypad_rowno][Keypad_colno]=KEYPAD_Arr;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
    13f2:	18 8a       	std	Y+16, r1	; 0x10
    13f4:	c6 c0       	rjmp	.+396    	; 0x1582 <KEYPAD_u8GetPressedKey+0x1a8>
	{
		/*actve current colum*/
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_LOW);
    13f6:	88 89       	ldd	r24, Y+16	; 0x10
    13f8:	88 2f       	mov	r24, r24
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	fc 01       	movw	r30, r24
    13fe:	e4 54       	subi	r30, 0x44	; 68
    1400:	fe 4f       	sbci	r31, 0xFE	; 254
    1402:	90 81       	ld	r25, Z
    1404:	82 e0       	ldi	r24, 0x02	; 2
    1406:	69 2f       	mov	r22, r25
    1408:	40 e0       	ldi	r20, 0x00	; 0
    140a:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
		for(Local_u8rowIndex=0;Local_u8rowIndex<Keypad_rowno;Local_u8rowIndex++)
    140e:	1f 86       	std	Y+15, r1	; 0x0f
    1410:	a5 c0       	rjmp	.+330    	; 0x155c <KEYPAD_u8GetPressedKey+0x182>
		{
			if(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0)
    1412:	8f 85       	ldd	r24, Y+15	; 0x0f
    1414:	88 2f       	mov	r24, r24
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	fc 01       	movw	r30, r24
    141a:	e8 54       	subi	r30, 0x48	; 72
    141c:	fe 4f       	sbci	r31, 0xFE	; 254
    141e:	90 81       	ld	r25, Z
    1420:	82 e0       	ldi	r24, 0x02	; 2
    1422:	69 2f       	mov	r22, r25
    1424:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_u8GetPinValue>
    1428:	88 23       	and	r24, r24
    142a:	09 f0       	breq	.+2      	; 0x142e <KEYPAD_u8GetPressedKey+0x54>
    142c:	94 c0       	rjmp	.+296    	; 0x1556 <KEYPAD_u8GetPressedKey+0x17c>
			{
				Local_u8PressedKey=Local_u8KEYPADArr[Local_u8rowIndex][Local_u8ColumnIndex];
    142e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1430:	48 2f       	mov	r20, r24
    1432:	50 e0       	ldi	r21, 0x00	; 0
    1434:	88 89       	ldd	r24, Y+16	; 0x10
    1436:	28 2f       	mov	r18, r24
    1438:	30 e0       	ldi	r19, 0x00	; 0
    143a:	ca 01       	movw	r24, r20
    143c:	88 0f       	add	r24, r24
    143e:	99 1f       	adc	r25, r25
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	82 0f       	add	r24, r18
    1446:	93 1f       	adc	r25, r19
    1448:	fc 01       	movw	r30, r24
    144a:	e8 55       	subi	r30, 0x58	; 88
    144c:	fe 4f       	sbci	r31, 0xFE	; 254
    144e:	80 81       	ld	r24, Z
    1450:	89 8b       	std	Y+17, r24	; 0x11
				while(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0){}
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	88 2f       	mov	r24, r24
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	fc 01       	movw	r30, r24
    145a:	e8 54       	subi	r30, 0x48	; 72
    145c:	fe 4f       	sbci	r31, 0xFE	; 254
    145e:	90 81       	ld	r25, Z
    1460:	82 e0       	ldi	r24, 0x02	; 2
    1462:	69 2f       	mov	r22, r25
    1464:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <DIO_u8GetPinValue>
    1468:	88 23       	and	r24, r24
    146a:	99 f3       	breq	.-26     	; 0x1452 <KEYPAD_u8GetPressedKey+0x78>
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	a0 ea       	ldi	r26, 0xA0	; 160
    1472:	b0 e4       	ldi	r27, 0x40	; 64
    1474:	8b 87       	std	Y+11, r24	; 0x0b
    1476:	9c 87       	std	Y+12, r25	; 0x0c
    1478:	ad 87       	std	Y+13, r26	; 0x0d
    147a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    147c:	6b 85       	ldd	r22, Y+11	; 0x0b
    147e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1480:	8d 85       	ldd	r24, Y+13	; 0x0d
    1482:	9e 85       	ldd	r25, Y+14	; 0x0e
    1484:	20 e0       	ldi	r18, 0x00	; 0
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	4a ef       	ldi	r20, 0xFA	; 250
    148a:	54 e4       	ldi	r21, 0x44	; 68
    148c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1490:	dc 01       	movw	r26, r24
    1492:	cb 01       	movw	r24, r22
    1494:	8f 83       	std	Y+7, r24	; 0x07
    1496:	98 87       	std	Y+8, r25	; 0x08
    1498:	a9 87       	std	Y+9, r26	; 0x09
    149a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	40 e8       	ldi	r20, 0x80	; 128
    14aa:	5f e3       	ldi	r21, 0x3F	; 63
    14ac:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	2c f4       	brge	.+10     	; 0x14be <KEYPAD_u8GetPressedKey+0xe4>
		__ticks = 1;
    14b4:	81 e0       	ldi	r24, 0x01	; 1
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	9e 83       	std	Y+6, r25	; 0x06
    14ba:	8d 83       	std	Y+5, r24	; 0x05
    14bc:	3f c0       	rjmp	.+126    	; 0x153c <KEYPAD_u8GetPressedKey+0x162>
	else if (__tmp > 65535)
    14be:	6f 81       	ldd	r22, Y+7	; 0x07
    14c0:	78 85       	ldd	r23, Y+8	; 0x08
    14c2:	89 85       	ldd	r24, Y+9	; 0x09
    14c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	3f ef       	ldi	r19, 0xFF	; 255
    14ca:	4f e7       	ldi	r20, 0x7F	; 127
    14cc:	57 e4       	ldi	r21, 0x47	; 71
    14ce:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14d2:	18 16       	cp	r1, r24
    14d4:	4c f5       	brge	.+82     	; 0x1528 <KEYPAD_u8GetPressedKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14da:	8d 85       	ldd	r24, Y+13	; 0x0d
    14dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14de:	20 e0       	ldi	r18, 0x00	; 0
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	40 e2       	ldi	r20, 0x20	; 32
    14e4:	51 e4       	ldi	r21, 0x41	; 65
    14e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ea:	dc 01       	movw	r26, r24
    14ec:	cb 01       	movw	r24, r22
    14ee:	bc 01       	movw	r22, r24
    14f0:	cd 01       	movw	r24, r26
    14f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14f6:	dc 01       	movw	r26, r24
    14f8:	cb 01       	movw	r24, r22
    14fa:	9e 83       	std	Y+6, r25	; 0x06
    14fc:	8d 83       	std	Y+5, r24	; 0x05
    14fe:	0f c0       	rjmp	.+30     	; 0x151e <KEYPAD_u8GetPressedKey+0x144>
    1500:	88 ec       	ldi	r24, 0xC8	; 200
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9c 83       	std	Y+4, r25	; 0x04
    1506:	8b 83       	std	Y+3, r24	; 0x03
    1508:	8b 81       	ldd	r24, Y+3	; 0x03
    150a:	9c 81       	ldd	r25, Y+4	; 0x04
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <KEYPAD_u8GetPressedKey+0x132>
    1510:	9c 83       	std	Y+4, r25	; 0x04
    1512:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1514:	8d 81       	ldd	r24, Y+5	; 0x05
    1516:	9e 81       	ldd	r25, Y+6	; 0x06
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9e 83       	std	Y+6, r25	; 0x06
    151c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    151e:	8d 81       	ldd	r24, Y+5	; 0x05
    1520:	9e 81       	ldd	r25, Y+6	; 0x06
    1522:	00 97       	sbiw	r24, 0x00	; 0
    1524:	69 f7       	brne	.-38     	; 0x1500 <KEYPAD_u8GetPressedKey+0x126>
    1526:	14 c0       	rjmp	.+40     	; 0x1550 <KEYPAD_u8GetPressedKey+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1528:	6f 81       	ldd	r22, Y+7	; 0x07
    152a:	78 85       	ldd	r23, Y+8	; 0x08
    152c:	89 85       	ldd	r24, Y+9	; 0x09
    152e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1530:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1534:	dc 01       	movw	r26, r24
    1536:	cb 01       	movw	r24, r22
    1538:	9e 83       	std	Y+6, r25	; 0x06
    153a:	8d 83       	std	Y+5, r24	; 0x05
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	89 81       	ldd	r24, Y+1	; 0x01
    1546:	9a 81       	ldd	r25, Y+2	; 0x02
    1548:	01 97       	sbiw	r24, 0x01	; 1
    154a:	f1 f7       	brne	.-4      	; 0x1548 <KEYPAD_u8GetPressedKey+0x16e>
    154c:	9a 83       	std	Y+2, r25	; 0x02
    154e:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5);
				return Local_u8PressedKey;
    1550:	89 89       	ldd	r24, Y+17	; 0x11
    1552:	8a 8b       	std	Y+18, r24	; 0x12
    1554:	1c c0       	rjmp	.+56     	; 0x158e <KEYPAD_u8GetPressedKey+0x1b4>

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
	{
		/*actve current colum*/
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_LOW);
		for(Local_u8rowIndex=0;Local_u8rowIndex<Keypad_rowno;Local_u8rowIndex++)
    1556:	8f 85       	ldd	r24, Y+15	; 0x0f
    1558:	8f 5f       	subi	r24, 0xFF	; 255
    155a:	8f 87       	std	Y+15, r24	; 0x0f
    155c:	8f 85       	ldd	r24, Y+15	; 0x0f
    155e:	84 30       	cpi	r24, 0x04	; 4
    1560:	08 f4       	brcc	.+2      	; 0x1564 <KEYPAD_u8GetPressedKey+0x18a>
    1562:	57 cf       	rjmp	.-338    	; 0x1412 <KEYPAD_u8GetPressedKey+0x38>
				while(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0){}
				_delay_ms(5);
				return Local_u8PressedKey;
			}
		}
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_HIGH);
    1564:	88 89       	ldd	r24, Y+16	; 0x10
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	fc 01       	movw	r30, r24
    156c:	e4 54       	subi	r30, 0x44	; 68
    156e:	fe 4f       	sbci	r31, 0xFE	; 254
    1570:	90 81       	ld	r25, Z
    1572:	82 e0       	ldi	r24, 0x02	; 2
    1574:	69 2f       	mov	r22, r25
    1576:	41 e0       	ldi	r20, 0x01	; 1
    1578:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
	static u8 Local_u8colArr[Keypad_colno]={KEYPAD_Col0Pin,KEYPAD_Col1Pin,KEYPAD_Col2Pin,KEYPAD_Col3Pin};
	static u8 Local_u8rowArr[Keypad_rowno]={KEYPAD_Row0Pin,KEYPAD_Row1Pin,KEYPAD_Row2Pin,KEYPAD_Row3Pin};

	static u8 Local_u8KEYPADArr[Keypad_rowno][Keypad_colno]=KEYPAD_Arr;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
    157c:	88 89       	ldd	r24, Y+16	; 0x10
    157e:	8f 5f       	subi	r24, 0xFF	; 255
    1580:	88 8b       	std	Y+16, r24	; 0x10
    1582:	88 89       	ldd	r24, Y+16	; 0x10
    1584:	84 30       	cpi	r24, 0x04	; 4
    1586:	08 f4       	brcc	.+2      	; 0x158a <KEYPAD_u8GetPressedKey+0x1b0>
    1588:	36 cf       	rjmp	.-404    	; 0x13f6 <KEYPAD_u8GetPressedKey+0x1c>
		}
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_HIGH);
	}


	return Local_u8PressedKey;
    158a:	89 89       	ldd	r24, Y+17	; 0x11
    158c:	8a 8b       	std	Y+18, r24	; 0x12
    158e:	8a 89       	ldd	r24, Y+18	; 0x12

}
    1590:	62 96       	adiw	r28, 0x12	; 18
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <MADC_stderrInit>:
#include"MADC_interface.h"

static u8 MADC_State=MADC_NOTBUSY;
static void (*MADC_pvoidfIntFunc)(void)=NULL;
STD_error_t MADC_stderrInit(u8 ARG_u8VrefSelect,u8 ARG_uPreScalerSelect)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <MADC_stderrInit+0x6>
    15a8:	0f 92       	push	r0
    15aa:	cd b7       	in	r28, 0x3d	; 61
    15ac:	de b7       	in	r29, 0x3e	; 62
    15ae:	8a 83       	std	Y+2, r24	; 0x02
    15b0:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrErrorState=E_OK;
    15b2:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_uPreScalerSelect<=MADC_PRESCALER_128 &&(ARG_u8VrefSelect<=MADC_VREF_AVCC || MADC_VREF_2_56V==ARG_u8VrefSelect))
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	88 30       	cpi	r24, 0x08	; 8
    15b8:	68 f5       	brcc	.+90     	; 0x1614 <MADC_stderrInit+0x72>
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	82 30       	cpi	r24, 0x02	; 2
    15be:	18 f0       	brcs	.+6      	; 0x15c6 <MADC_stderrInit+0x24>
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	83 30       	cpi	r24, 0x03	; 3
    15c4:	39 f5       	brne	.+78     	; 0x1614 <MADC_stderrInit+0x72>
	{
		ADMUX=((ADMUX&ADMUX_VREF_MASK)|(ARG_u8VrefSelect<<REFS0));
    15c6:	a7 e2       	ldi	r26, 0x27	; 39
    15c8:	b0 e0       	ldi	r27, 0x00	; 0
    15ca:	e7 e2       	ldi	r30, 0x27	; 39
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	28 2f       	mov	r18, r24
    15d2:	2f 73       	andi	r18, 0x3F	; 63
    15d4:	8a 81       	ldd	r24, Y+2	; 0x02
    15d6:	88 2f       	mov	r24, r24
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	00 24       	eor	r0, r0
    15dc:	96 95       	lsr	r25
    15de:	87 95       	ror	r24
    15e0:	07 94       	ror	r0
    15e2:	96 95       	lsr	r25
    15e4:	87 95       	ror	r24
    15e6:	07 94       	ror	r0
    15e8:	98 2f       	mov	r25, r24
    15ea:	80 2d       	mov	r24, r0
    15ec:	82 2b       	or	r24, r18
    15ee:	8c 93       	st	X, r24
	#if LEFT_ADJUST_ENABLE==1
		SET_BIT(ADMUX,ADLAR);
    15f0:	a7 e2       	ldi	r26, 0x27	; 39
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e7 e2       	ldi	r30, 0x27	; 39
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	80 62       	ori	r24, 0x20	; 32
    15fc:	8c 93       	st	X, r24
	#elif LEFT_ADJUST_ENABLE==2
		CLEAR_BIT(ADMUX,ADLAR);
	#else
		#error"Wrong ADLAR choice"
	#endif
		ADCSRA=((ADCSRA&ADCSRA_PRESCALER_MASK)|ARG_uPreScalerSelect);
    15fe:	a6 e2       	ldi	r26, 0x26	; 38
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e6 e2       	ldi	r30, 0x26	; 38
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	98 2f       	mov	r25, r24
    160a:	98 7f       	andi	r25, 0xF8	; 248
    160c:	8b 81       	ldd	r24, Y+3	; 0x03
    160e:	89 2b       	or	r24, r25
    1610:	8c 93       	st	X, r24
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <MADC_stderrInit+0x76>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;	
    1618:	89 81       	ldd	r24, Y+1	; 0x01
}
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	0f 90       	pop	r0
    1620:	cf 91       	pop	r28
    1622:	df 91       	pop	r29
    1624:	08 95       	ret

00001626 <MADC_stderrStartConversion>:

STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{
    1626:	df 93       	push	r29
    1628:	cf 93       	push	r28
    162a:	00 d0       	rcall	.+0      	; 0x162c <MADC_stderrStartConversion+0x6>
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    1632:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Channel<=MADC_CHANNEL_ADC7)
    1634:	8a 81       	ldd	r24, Y+2	; 0x02
    1636:	88 30       	cpi	r24, 0x08	; 8
    1638:	90 f4       	brcc	.+36     	; 0x165e <MADC_stderrStartConversion+0x38>
	{
		ADMUX=((ADMUX&ADMUX_CHANNEL_MASK)|ARG_u8Channel);
    163a:	a7 e2       	ldi	r26, 0x27	; 39
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	e7 e2       	ldi	r30, 0x27	; 39
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	80 81       	ld	r24, Z
    1644:	98 2f       	mov	r25, r24
    1646:	90 7e       	andi	r25, 0xE0	; 224
    1648:	8a 81       	ldd	r24, Y+2	; 0x02
    164a:	89 2b       	or	r24, r25
    164c:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADSC);
    164e:	a6 e2       	ldi	r26, 0x26	; 38
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e6 e2       	ldi	r30, 0x26	; 38
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	80 64       	ori	r24, 0x40	; 64
    165a:	8c 93       	st	X, r24
    165c:	02 c0       	rjmp	.+4      	; 0x1662 <MADC_stderrStartConversion+0x3c>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    1662:	89 81       	ldd	r24, Y+1	; 0x01
}
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <MADC_voidAdcEnable>:
void MADC_voidAdcEnable(void)
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    1676:	a6 e2       	ldi	r26, 0x26	; 38
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e6 e2       	ldi	r30, 0x26	; 38
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	80 68       	ori	r24, 0x80	; 128
    1682:	8c 93       	st	X, r24
}
    1684:	cf 91       	pop	r28
    1686:	df 91       	pop	r29
    1688:	08 95       	ret

0000168a <MADC_voidAdcDisable>:
void MADC_voidAdcDisable(void)
{
    168a:	df 93       	push	r29
    168c:	cf 93       	push	r28
    168e:	cd b7       	in	r28, 0x3d	; 61
    1690:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
    1692:	a6 e2       	ldi	r26, 0x26	; 38
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	e6 e2       	ldi	r30, 0x26	; 38
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	8f 77       	andi	r24, 0x7F	; 127
    169e:	8c 93       	st	X, r24
}
    16a0:	cf 91       	pop	r28
    16a2:	df 91       	pop	r29
    16a4:	08 95       	ret

000016a6 <MADC_voidWaitFlag>:
void MADC_voidWaitFlag(void)
{
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF));
    16ae:	e6 e2       	ldi	r30, 0x26	; 38
    16b0:	f0 e0       	ldi	r31, 0x00	; 0
    16b2:	80 81       	ld	r24, Z
    16b4:	82 95       	swap	r24
    16b6:	8f 70       	andi	r24, 0x0F	; 15
    16b8:	88 2f       	mov	r24, r24
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	81 70       	andi	r24, 0x01	; 1
    16be:	90 70       	andi	r25, 0x00	; 0
    16c0:	00 97       	sbiw	r24, 0x00	; 0
    16c2:	a9 f3       	breq	.-22     	; 0x16ae <MADC_voidWaitFlag+0x8>
}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <MADC_voidClearFlag>:
void MADC_voidClearFlag(void)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF);
    16d2:	a6 e2       	ldi	r26, 0x26	; 38
    16d4:	b0 e0       	ldi	r27, 0x00	; 0
    16d6:	e6 e2       	ldi	r30, 0x26	; 38
    16d8:	f0 e0       	ldi	r31, 0x00	; 0
    16da:	80 81       	ld	r24, Z
    16dc:	80 61       	ori	r24, 0x10	; 16
    16de:	8c 93       	st	X, r24
}
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	08 95       	ret

000016e6 <MADC_voidAdcEnableInt>:

void MADC_voidAdcEnableInt(void)
{
    16e6:	df 93       	push	r29
    16e8:	cf 93       	push	r28
    16ea:	cd b7       	in	r28, 0x3d	; 61
    16ec:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    16ee:	a6 e2       	ldi	r26, 0x26	; 38
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	e6 e2       	ldi	r30, 0x26	; 38
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	88 60       	ori	r24, 0x08	; 8
    16fa:	8c 93       	st	X, r24
}
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	08 95       	ret

00001702 <MADC_voidAdcDisableInt>:
void MADC_voidAdcDisableInt(void)
{
    1702:	df 93       	push	r29
    1704:	cf 93       	push	r28
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADIE);
    170a:	a6 e2       	ldi	r26, 0x26	; 38
    170c:	b0 e0       	ldi	r27, 0x00	; 0
    170e:	e6 e2       	ldi	r30, 0x26	; 38
    1710:	f0 e0       	ldi	r31, 0x00	; 0
    1712:	80 81       	ld	r24, Z
    1714:	87 7f       	andi	r24, 0xF7	; 247
    1716:	8c 93       	st	X, r24
}
    1718:	cf 91       	pop	r28
    171a:	df 91       	pop	r29
    171c:	08 95       	ret

0000171e <MADC_stderrRead>:
STD_error_t MADC_stderrRead(u16 * ARG_u16pReading,u8 ARG_u8Channel)
{
    171e:	df 93       	push	r29
    1720:	cf 93       	push	r28
    1722:	00 d0       	rcall	.+0      	; 0x1724 <MADC_stderrRead+0x6>
    1724:	00 d0       	rcall	.+0      	; 0x1726 <MADC_stderrRead+0x8>
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	9b 83       	std	Y+3, r25	; 0x03
    172c:	8a 83       	std	Y+2, r24	; 0x02
    172e:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrErrorState=E_OK;
    1730:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u16pReading!=NULL)
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	9b 81       	ldd	r25, Y+3	; 0x03
    1736:	00 97       	sbiw	r24, 0x00	; 0
    1738:	91 f0       	breq	.+36     	; 0x175e <MADC_stderrRead+0x40>
	{
		L_stderrErrorState=MADC_stderrStartConversion(ARG_u8Channel);
    173a:	8c 81       	ldd	r24, Y+4	; 0x04
    173c:	0e 94 13 0b 	call	0x1626	; 0x1626 <MADC_stderrStartConversion>
    1740:	89 83       	std	Y+1, r24	; 0x01
		MADC_voidWaitFlag();
    1742:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <MADC_voidWaitFlag>
		MADC_voidClearFlag();
    1746:	0e 94 65 0b 	call	0x16ca	; 0x16ca <MADC_voidClearFlag>
		#if LEFT_ADJUST_ENABLE==1
		*ARG_u16pReading=ADCH;
    174a:	e5 e2       	ldi	r30, 0x25	; 37
    174c:	f0 e0       	ldi	r31, 0x00	; 0
    174e:	80 81       	ld	r24, Z
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	ea 81       	ldd	r30, Y+2	; 0x02
    1756:	fb 81       	ldd	r31, Y+3	; 0x03
    1758:	91 83       	std	Z+1, r25	; 0x01
    175a:	80 83       	st	Z, r24
    175c:	02 c0       	rjmp	.+4      	; 0x1762 <MADC_stderrRead+0x44>
		*ARG_u16pReading=(u16)ADCL;
		#endif
	}
	else
	{
		L_stderrErrorState=E_NULL_POINTER;
    175e:	82 e0       	ldi	r24, 0x02	; 2
    1760:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    1762:	89 81       	ldd	r24, Y+1	; 0x01
}
    1764:	0f 90       	pop	r0
    1766:	0f 90       	pop	r0
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	08 95       	ret

00001772 <MADC_stderrReadAsynch>:


STD_error_t MADC_stderrReadAsynch(u8 ARG_u8Channel)
{
    1772:	df 93       	push	r29
    1774:	cf 93       	push	r28
    1776:	00 d0       	rcall	.+0      	; 0x1778 <MADC_stderrReadAsynch+0x6>
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    177e:	19 82       	std	Y+1, r1	; 0x01
	if(MADC_State==MADC_NOTBUSY)
    1780:	80 91 c0 01 	lds	r24, 0x01C0
    1784:	82 30       	cpi	r24, 0x02	; 2
    1786:	51 f4       	brne	.+20     	; 0x179c <MADC_stderrReadAsynch+0x2a>
	{
		MADC_State=MADC_BUSY;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	80 93 c0 01 	sts	0x01C0, r24
		MADC_voidAdcEnableInt();
    178e:	0e 94 73 0b 	call	0x16e6	; 0x16e6 <MADC_voidAdcEnableInt>
		L_stderrErrorState=MADC_stderrStartConversion(ARG_u8Channel);
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	0e 94 13 0b 	call	0x1626	; 0x1626 <MADC_stderrStartConversion>
    1798:	89 83       	std	Y+1, r24	; 0x01
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <MADC_stderrReadAsynch+0x2e>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    179c:	81 e0       	ldi	r24, 0x01	; 1
    179e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
    17a6:	cf 91       	pop	r28
    17a8:	df 91       	pop	r29
    17aa:	08 95       	ret

000017ac <MADC_u16Reading>:
u16 MADC_u16Reading(void)
{
    17ac:	df 93       	push	r29
    17ae:	cf 93       	push	r28
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
	#if LEFT_ADJUST_ENABLE==1
	return ADCH;
    17b4:	e5 e2       	ldi	r30, 0x25	; 37
    17b6:	f0 e0       	ldi	r31, 0x00	; 0
    17b8:	80 81       	ld	r24, Z
    17ba:	88 2f       	mov	r24, r24
    17bc:	90 e0       	ldi	r25, 0x00	; 0
	#elif LEFT_ADJUST_ENABLE==2
	return (ADCL);
	#endif
}
    17be:	cf 91       	pop	r28
    17c0:	df 91       	pop	r29
    17c2:	08 95       	ret

000017c4 <MADC_stderrSetCallBack>:

STD_error_t MADC_stderrSetCallBack(void (*ARG_pvoidfIsrFunc)(void))
{
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <MADC_stderrSetCallBack+0x6>
    17ca:	0f 92       	push	r0
    17cc:	cd b7       	in	r28, 0x3d	; 61
    17ce:	de b7       	in	r29, 0x3e	; 62
    17d0:	9b 83       	std	Y+3, r25	; 0x03
    17d2:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    17d4:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfIsrFunc!=NULL)
    17d6:	8a 81       	ldd	r24, Y+2	; 0x02
    17d8:	9b 81       	ldd	r25, Y+3	; 0x03
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	39 f0       	breq	.+14     	; 0x17ec <MADC_stderrSetCallBack+0x28>
	{
		MADC_pvoidfIntFunc=ARG_pvoidfIsrFunc;
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	9b 81       	ldd	r25, Y+3	; 0x03
    17e2:	90 93 c3 01 	sts	0x01C3, r25
    17e6:	80 93 c2 01 	sts	0x01C2, r24
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <MADC_stderrSetCallBack+0x2c>
	}
	else
	{
		L_stderrErrorState=E_NULL_POINTER;
    17ec:	82 e0       	ldi	r24, 0x02	; 2
    17ee:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    17f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17f2:	0f 90       	pop	r0
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <__vector_16>:
void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    17fe:	1f 92       	push	r1
    1800:	0f 92       	push	r0
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	0f 92       	push	r0
    1806:	11 24       	eor	r1, r1
    1808:	2f 93       	push	r18
    180a:	3f 93       	push	r19
    180c:	4f 93       	push	r20
    180e:	5f 93       	push	r21
    1810:	6f 93       	push	r22
    1812:	7f 93       	push	r23
    1814:	8f 93       	push	r24
    1816:	9f 93       	push	r25
    1818:	af 93       	push	r26
    181a:	bf 93       	push	r27
    181c:	ef 93       	push	r30
    181e:	ff 93       	push	r31
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	if(MADC_pvoidfIntFunc!=NULL)
    1828:	80 91 c2 01 	lds	r24, 0x01C2
    182c:	90 91 c3 01 	lds	r25, 0x01C3
    1830:	00 97       	sbiw	r24, 0x00	; 0
    1832:	41 f0       	breq	.+16     	; 0x1844 <__vector_16+0x46>
	{
		MADC_State=MADC_NOTBUSY;
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	80 93 c0 01 	sts	0x01C0, r24
		MADC_pvoidfIntFunc();
    183a:	e0 91 c2 01 	lds	r30, 0x01C2
    183e:	f0 91 c3 01 	lds	r31, 0x01C3
    1842:	09 95       	icall
	}
}
    1844:	cf 91       	pop	r28
    1846:	df 91       	pop	r29
    1848:	ff 91       	pop	r31
    184a:	ef 91       	pop	r30
    184c:	bf 91       	pop	r27
    184e:	af 91       	pop	r26
    1850:	9f 91       	pop	r25
    1852:	8f 91       	pop	r24
    1854:	7f 91       	pop	r23
    1856:	6f 91       	pop	r22
    1858:	5f 91       	pop	r21
    185a:	4f 91       	pop	r20
    185c:	3f 91       	pop	r19
    185e:	2f 91       	pop	r18
    1860:	0f 90       	pop	r0
    1862:	0f be       	out	0x3f, r0	; 63
    1864:	0f 90       	pop	r0
    1866:	1f 90       	pop	r1
    1868:	18 95       	reti

0000186a <MADC_voidInit>:
// my functions 
void MADC_voidInit(void)
{
    186a:	df 93       	push	r29
    186c:	cf 93       	push	r28
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
	// Vref
	#if MADC_VREF_AREF==MADC_VREF_CHOICE
		CLEAR_BIT(ADMUX,REFS0);
		CLEAR_BIT(ADMUX,REFS1);	
	#elif MADC_VREF_AVCC==MADC_VREF_CHOICE
		SET_BIT(ADMUX,REFS0);
    1872:	a7 e2       	ldi	r26, 0x27	; 39
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	e7 e2       	ldi	r30, 0x27	; 39
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 64       	ori	r24, 0x40	; 64
    187e:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
    1880:	a7 e2       	ldi	r26, 0x27	; 39
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	e7 e2       	ldi	r30, 0x27	; 39
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	80 81       	ld	r24, Z
    188a:	8f 77       	andi	r24, 0x7F	; 127
    188c:	8c 93       	st	X, r24
	#else 
		#error"Wrong Vref choice"
	#endif
	//Pre scaler
	#if MADC_PRESCALER_2==MADC_PRESCALER_CHOICE
		SET_BIT(ADCSRA,ADPS0);
    188e:	a6 e2       	ldi	r26, 0x26	; 38
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e6 e2       	ldi	r30, 0x26	; 38
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	81 60       	ori	r24, 0x01	; 1
    189a:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    189c:	a6 e2       	ldi	r26, 0x26	; 38
    189e:	b0 e0       	ldi	r27, 0x00	; 0
    18a0:	e6 e2       	ldi	r30, 0x26	; 38
    18a2:	f0 e0       	ldi	r31, 0x00	; 0
    18a4:	80 81       	ld	r24, Z
    18a6:	8d 7f       	andi	r24, 0xFD	; 253
    18a8:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS2);		
    18aa:	a6 e2       	ldi	r26, 0x26	; 38
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e6 e2       	ldi	r30, 0x26	; 38
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	8b 7f       	andi	r24, 0xFB	; 251
    18b6:	8c 93       	st	X, r24
	#else 
		#error"Wrong pre scaler choice"
	#endif
	
	#if LEFT_ADJUST_ENABLE==1
		SET_BIT(ADMUX,ADLAR);
    18b8:	a7 e2       	ldi	r26, 0x27	; 39
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e7 e2       	ldi	r30, 0x27	; 39
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	80 81       	ld	r24, Z
    18c2:	80 62       	ori	r24, 0x20	; 32
    18c4:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,ADLAR);
	#else 
		#error"Wrong ADLAR choice"
	#endif
	
}
    18c6:	cf 91       	pop	r28
    18c8:	df 91       	pop	r29
    18ca:	08 95       	ret

000018cc <MADC_u8StartConversionSynch>:
u8 MADC_u8StartConversionSynch(u8 ARG_u8Channel)
{
    18cc:	df 93       	push	r29
    18ce:	cf 93       	push	r28
    18d0:	0f 92       	push	r0
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
    18d6:	89 83       	std	Y+1, r24	; 0x01
	// enable ADC 
	SET_BIT(ADCSRA,ADEN);
    18d8:	a6 e2       	ldi	r26, 0x26	; 38
    18da:	b0 e0       	ldi	r27, 0x00	; 0
    18dc:	e6 e2       	ldi	r30, 0x26	; 38
    18de:	f0 e0       	ldi	r31, 0x00	; 0
    18e0:	80 81       	ld	r24, Z
    18e2:	80 68       	ori	r24, 0x80	; 128
    18e4:	8c 93       	st	X, r24
	// set channel;
	ADMUX&=ADMUX_CHANNEL_MASK;
    18e6:	a7 e2       	ldi	r26, 0x27	; 39
    18e8:	b0 e0       	ldi	r27, 0x00	; 0
    18ea:	e7 e2       	ldi	r30, 0x27	; 39
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 7e       	andi	r24, 0xE0	; 224
    18f2:	8c 93       	st	X, r24
	ADMUX|=ARG_u8Channel;
    18f4:	a7 e2       	ldi	r26, 0x27	; 39
    18f6:	b0 e0       	ldi	r27, 0x00	; 0
    18f8:	e7 e2       	ldi	r30, 0x27	; 39
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	90 81       	ld	r25, Z
    18fe:	89 81       	ldd	r24, Y+1	; 0x01
    1900:	89 2b       	or	r24, r25
    1902:	8c 93       	st	X, r24
	// Start conversion
	SET_BIT(ADCSRA,ADSC);
    1904:	a6 e2       	ldi	r26, 0x26	; 38
    1906:	b0 e0       	ldi	r27, 0x00	; 0
    1908:	e6 e2       	ldi	r30, 0x26	; 38
    190a:	f0 e0       	ldi	r31, 0x00	; 0
    190c:	80 81       	ld	r24, Z
    190e:	80 64       	ori	r24, 0x40	; 64
    1910:	8c 93       	st	X, r24
	// wait for the flag to be set
	while(!GET_BIT(ADCSRA,ADIF));
    1912:	e6 e2       	ldi	r30, 0x26	; 38
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	82 95       	swap	r24
    191a:	8f 70       	andi	r24, 0x0F	; 15
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	00 97       	sbiw	r24, 0x00	; 0
    1926:	a9 f3       	breq	.-22     	; 0x1912 <MADC_u8StartConversionSynch+0x46>
	// clear the flag
	SET_BIT(ADCSRA,ADIF);
    1928:	a6 e2       	ldi	r26, 0x26	; 38
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	e6 e2       	ldi	r30, 0x26	; 38
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	80 61       	ori	r24, 0x10	; 16
    1934:	8c 93       	st	X, r24
	// return the result
	return ADCH;
    1936:	e5 e2       	ldi	r30, 0x25	; 37
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
	
}
    193c:	0f 90       	pop	r0
    193e:	cf 91       	pop	r28
    1940:	df 91       	pop	r29
    1942:	08 95       	ret

00001944 <MDIO_StderrSetPortDirection>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	00 d0       	rcall	.+0      	; 0x194a <MDIO_StderrSetPortDirection+0x6>
    194a:	00 d0       	rcall	.+0      	; 0x194c <MDIO_StderrSetPortDirection+0x8>
    194c:	0f 92       	push	r0
    194e:	cd b7       	in	r28, 0x3d	; 61
    1950:	de b7       	in	r29, 0x3e	; 62
    1952:	8a 83       	std	Y+2, r24	; 0x02
    1954:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    1956:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	3d 83       	std	Y+5, r19	; 0x05
    1960:	2c 83       	std	Y+4, r18	; 0x04
    1962:	8c 81       	ldd	r24, Y+4	; 0x04
    1964:	9d 81       	ldd	r25, Y+5	; 0x05
    1966:	82 30       	cpi	r24, 0x02	; 2
    1968:	91 05       	cpc	r25, r1
    196a:	d9 f0       	breq	.+54     	; 0x19a2 <MDIO_StderrSetPortDirection+0x5e>
    196c:	2c 81       	ldd	r18, Y+4	; 0x04
    196e:	3d 81       	ldd	r19, Y+5	; 0x05
    1970:	23 30       	cpi	r18, 0x03	; 3
    1972:	31 05       	cpc	r19, r1
    1974:	34 f4       	brge	.+12     	; 0x1982 <MDIO_StderrSetPortDirection+0x3e>
    1976:	8c 81       	ldd	r24, Y+4	; 0x04
    1978:	9d 81       	ldd	r25, Y+5	; 0x05
    197a:	81 30       	cpi	r24, 0x01	; 1
    197c:	91 05       	cpc	r25, r1
    197e:	61 f0       	breq	.+24     	; 0x1998 <MDIO_StderrSetPortDirection+0x54>
    1980:	1f c0       	rjmp	.+62     	; 0x19c0 <MDIO_StderrSetPortDirection+0x7c>
    1982:	2c 81       	ldd	r18, Y+4	; 0x04
    1984:	3d 81       	ldd	r19, Y+5	; 0x05
    1986:	23 30       	cpi	r18, 0x03	; 3
    1988:	31 05       	cpc	r19, r1
    198a:	81 f0       	breq	.+32     	; 0x19ac <MDIO_StderrSetPortDirection+0x68>
    198c:	8c 81       	ldd	r24, Y+4	; 0x04
    198e:	9d 81       	ldd	r25, Y+5	; 0x05
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	91 05       	cpc	r25, r1
    1994:	81 f0       	breq	.+32     	; 0x19b6 <MDIO_StderrSetPortDirection+0x72>
    1996:	14 c0       	rjmp	.+40     	; 0x19c0 <MDIO_StderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA:GPIOA -> DDR=ARG_u8Direction;break;
    1998:	e9 e3       	ldi	r30, 0x39	; 57
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8b 81       	ldd	r24, Y+3	; 0x03
    199e:	81 83       	std	Z+1, r24	; 0x01
    19a0:	11 c0       	rjmp	.+34     	; 0x19c4 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTB:GPIOB -> DDR=ARG_u8Direction;break;
    19a2:	e6 e3       	ldi	r30, 0x36	; 54
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	81 83       	std	Z+1, r24	; 0x01
    19aa:	0c c0       	rjmp	.+24     	; 0x19c4 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTC:GPIOC -> DDR=ARG_u8Direction;break;
    19ac:	e3 e3       	ldi	r30, 0x33	; 51
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	8b 81       	ldd	r24, Y+3	; 0x03
    19b2:	81 83       	std	Z+1, r24	; 0x01
    19b4:	07 c0       	rjmp	.+14     	; 0x19c4 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTD:GPIOD -> DDR=ARG_u8Direction;break;
    19b6:	e0 e3       	ldi	r30, 0x30	; 48
    19b8:	f0 e0       	ldi	r31, 0x00	; 0
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	81 83       	std	Z+1, r24	; 0x01
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <MDIO_StderrSetPortDirection+0x80>
		default:L_StderrError=E_NOK;break;/*Report an Error */
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	0f 90       	pop	r0
    19d0:	cf 91       	pop	r28
    19d2:	df 91       	pop	r29
    19d4:	08 95       	ret

000019d6 <MDIO_StderrSetPortValue>:
*[out]: N/A
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    19d6:	df 93       	push	r29
    19d8:	cf 93       	push	r28
    19da:	00 d0       	rcall	.+0      	; 0x19dc <MDIO_StderrSetPortValue+0x6>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <MDIO_StderrSetPortValue+0x8>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	8a 83       	std	Y+2, r24	; 0x02
    19e6:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    19e8:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3d 83       	std	Y+5, r19	; 0x05
    19f2:	2c 83       	std	Y+4, r18	; 0x04
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	d9 f0       	breq	.+54     	; 0x1a34 <MDIO_StderrSetPortValue+0x5e>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	23 30       	cpi	r18, 0x03	; 3
    1a04:	31 05       	cpc	r19, r1
    1a06:	34 f4       	brge	.+12     	; 0x1a14 <MDIO_StderrSetPortValue+0x3e>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <MDIO_StderrSetPortValue+0x54>
    1a12:	1f c0       	rjmp	.+62     	; 0x1a52 <MDIO_StderrSetPortValue+0x7c>
    1a14:	2c 81       	ldd	r18, Y+4	; 0x04
    1a16:	3d 81       	ldd	r19, Y+5	; 0x05
    1a18:	23 30       	cpi	r18, 0x03	; 3
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	81 f0       	breq	.+32     	; 0x1a3e <MDIO_StderrSetPortValue+0x68>
    1a1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a20:	9d 81       	ldd	r25, Y+5	; 0x05
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	91 05       	cpc	r25, r1
    1a26:	81 f0       	breq	.+32     	; 0x1a48 <MDIO_StderrSetPortValue+0x72>
    1a28:	14 c0       	rjmp	.+40     	; 0x1a52 <MDIO_StderrSetPortValue+0x7c>
	{
		case MDIO_PORTA:GPIOA -> PORT=ARG_u8Value;break;
    1a2a:	e9 e3       	ldi	r30, 0x39	; 57
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	82 83       	std	Z+2, r24	; 0x02
    1a32:	11 c0       	rjmp	.+34     	; 0x1a56 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTB:GPIOB -> PORT=ARG_u8Value;break;
    1a34:	e6 e3       	ldi	r30, 0x36	; 54
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	82 83       	std	Z+2, r24	; 0x02
    1a3c:	0c c0       	rjmp	.+24     	; 0x1a56 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTC:GPIOC -> PORT=ARG_u8Value;break;
    1a3e:	e3 e3       	ldi	r30, 0x33	; 51
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	82 83       	std	Z+2, r24	; 0x02
    1a46:	07 c0       	rjmp	.+14     	; 0x1a56 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTD:GPIOD -> PORT=ARG_u8Value;break;
    1a48:	e0 e3       	ldi	r30, 0x30	; 48
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	82 83       	std	Z+2, r24	; 0x02
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <MDIO_StderrSetPortValue+0x80>
		default:L_StderrError=E_NOK;break;/*Report an Error */
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    1a56:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a58:	0f 90       	pop	r0
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	cf 91       	pop	r28
    1a64:	df 91       	pop	r29
    1a66:	08 95       	ret

00001a68 <MDIO_StderrGetPortValue>:
*[out]:	u8 * ARG_u8pValue :     This Argument used to return value in pin register
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrGetPortValue(u8 * ARG_u8pValue,u8 ARG_u8Port)
{
    1a68:	df 93       	push	r29
    1a6a:	cf 93       	push	r28
    1a6c:	00 d0       	rcall	.+0      	; 0x1a6e <MDIO_StderrGetPortValue+0x6>
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <MDIO_StderrGetPortValue+0x8>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <MDIO_StderrGetPortValue+0xa>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	9b 83       	std	Y+3, r25	; 0x03
    1a78:	8a 83       	std	Y+2, r24	; 0x02
    1a7a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_StderrError=E_OK;
    1a7c:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==ARG_u8pValue)
    1a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a80:	9b 81       	ldd	r25, Y+3	; 0x03
    1a82:	00 97       	sbiw	r24, 0x00	; 0
    1a84:	19 f4       	brne	.+6      	; 0x1a8c <MDIO_StderrGetPortValue+0x24>
	{
		L_StderrError=E_NULL_POINTER;
    1a86:	82 e0       	ldi	r24, 0x02	; 2
    1a88:	89 83       	std	Y+1, r24	; 0x01
    1a8a:	3e c0       	rjmp	.+124    	; 0x1b08 <MDIO_StderrGetPortValue+0xa0>
	}
	else
	{
		switch(ARG_u8Port)
    1a8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	3e 83       	std	Y+6, r19	; 0x06
    1a94:	2d 83       	std	Y+5, r18	; 0x05
    1a96:	8d 81       	ldd	r24, Y+5	; 0x05
    1a98:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9a:	82 30       	cpi	r24, 0x02	; 2
    1a9c:	91 05       	cpc	r25, r1
    1a9e:	e9 f0       	breq	.+58     	; 0x1ada <MDIO_StderrGetPortValue+0x72>
    1aa0:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa2:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa4:	23 30       	cpi	r18, 0x03	; 3
    1aa6:	31 05       	cpc	r19, r1
    1aa8:	34 f4       	brge	.+12     	; 0x1ab6 <MDIO_StderrGetPortValue+0x4e>
    1aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    1aac:	9e 81       	ldd	r25, Y+6	; 0x06
    1aae:	81 30       	cpi	r24, 0x01	; 1
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	61 f0       	breq	.+24     	; 0x1acc <MDIO_StderrGetPortValue+0x64>
    1ab4:	27 c0       	rjmp	.+78     	; 0x1b04 <MDIO_StderrGetPortValue+0x9c>
    1ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aba:	23 30       	cpi	r18, 0x03	; 3
    1abc:	31 05       	cpc	r19, r1
    1abe:	a1 f0       	breq	.+40     	; 0x1ae8 <MDIO_StderrGetPortValue+0x80>
    1ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac4:	84 30       	cpi	r24, 0x04	; 4
    1ac6:	91 05       	cpc	r25, r1
    1ac8:	b1 f0       	breq	.+44     	; 0x1af6 <MDIO_StderrGetPortValue+0x8e>
    1aca:	1c c0       	rjmp	.+56     	; 0x1b04 <MDIO_StderrGetPortValue+0x9c>
		{
			case MDIO_PORTA:*ARG_u8pValue=GPIOA -> PIN;break;
    1acc:	e9 e3       	ldi	r30, 0x39	; 57
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad6:	80 83       	st	Z, r24
    1ad8:	17 c0       	rjmp	.+46     	; 0x1b08 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTB:*ARG_u8pValue=GPIOB ->  PIN;break;
    1ada:	e6 e3       	ldi	r30, 0x36	; 54
    1adc:	f0 e0       	ldi	r31, 0x00	; 0
    1ade:	80 81       	ld	r24, Z
    1ae0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae4:	80 83       	st	Z, r24
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTC:*ARG_u8pValue=GPIOC ->PIN ;break;
    1ae8:	e3 e3       	ldi	r30, 0x33	; 51
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	ea 81       	ldd	r30, Y+2	; 0x02
    1af0:	fb 81       	ldd	r31, Y+3	; 0x03
    1af2:	80 83       	st	Z, r24
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTD:*ARG_u8pValue=GPIOD ->PIN ;break;
    1af6:	e0 e3       	ldi	r30, 0x30	; 48
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	ea 81       	ldd	r30, Y+2	; 0x02
    1afe:	fb 81       	ldd	r31, Y+3	; 0x03
    1b00:	80 83       	st	Z, r24
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <MDIO_StderrGetPortValue+0xa0>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    1b04:	81 e0       	ldi	r24, 0x01	; 1
    1b06:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return L_StderrError;
    1b08:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b0a:	26 96       	adiw	r28, 0x06	; 6
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	cf 91       	pop	r28
    1b18:	df 91       	pop	r29
    1b1a:	08 95       	ret

00001b1c <MDIO_StderrSetPinDirection>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrSetPinDirection(u8 ARG_u8Port,u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	2a 97       	sbiw	r28, 0x0a	; 10
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	8a 83       	std	Y+2, r24	; 0x02
    1b32:	6b 83       	std	Y+3, r22	; 0x03
    1b34:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_StderrError=E_OK;
    1b36:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    1b38:	8b 81       	ldd	r24, Y+3	; 0x03
    1b3a:	88 30       	cpi	r24, 0x08	; 8
    1b3c:	08 f0       	brcs	.+2      	; 0x1b40 <MDIO_StderrSetPinDirection+0x24>
    1b3e:	d9 c1       	rjmp	.+946    	; 0x1ef2 <MDIO_StderrSetPinDirection+0x3d6>
	{
		if(MDIO_PIN_OUTPUT==ARG_u8Direction)
    1b40:	8c 81       	ldd	r24, Y+4	; 0x04
    1b42:	81 30       	cpi	r24, 0x01	; 1
    1b44:	09 f0       	breq	.+2      	; 0x1b48 <MDIO_StderrSetPinDirection+0x2c>
    1b46:	7c c0       	rjmp	.+248    	; 0x1c40 <MDIO_StderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    1b48:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	3a 87       	std	Y+10, r19	; 0x0a
    1b50:	29 87       	std	Y+9, r18	; 0x09
    1b52:	89 85       	ldd	r24, Y+9	; 0x09
    1b54:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b56:	82 30       	cpi	r24, 0x02	; 2
    1b58:	91 05       	cpc	r25, r1
    1b5a:	69 f1       	breq	.+90     	; 0x1bb6 <MDIO_StderrSetPinDirection+0x9a>
    1b5c:	29 85       	ldd	r18, Y+9	; 0x09
    1b5e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b60:	23 30       	cpi	r18, 0x03	; 3
    1b62:	31 05       	cpc	r19, r1
    1b64:	34 f4       	brge	.+12     	; 0x1b72 <MDIO_StderrSetPinDirection+0x56>
    1b66:	89 85       	ldd	r24, Y+9	; 0x09
    1b68:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b6a:	81 30       	cpi	r24, 0x01	; 1
    1b6c:	91 05       	cpc	r25, r1
    1b6e:	69 f0       	breq	.+26     	; 0x1b8a <MDIO_StderrSetPinDirection+0x6e>
    1b70:	64 c0       	rjmp	.+200    	; 0x1c3a <MDIO_StderrSetPinDirection+0x11e>
    1b72:	29 85       	ldd	r18, Y+9	; 0x09
    1b74:	3a 85       	ldd	r19, Y+10	; 0x0a
    1b76:	23 30       	cpi	r18, 0x03	; 3
    1b78:	31 05       	cpc	r19, r1
    1b7a:	99 f1       	breq	.+102    	; 0x1be2 <MDIO_StderrSetPinDirection+0xc6>
    1b7c:	89 85       	ldd	r24, Y+9	; 0x09
    1b7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b80:	84 30       	cpi	r24, 0x04	; 4
    1b82:	91 05       	cpc	r25, r1
    1b84:	09 f4       	brne	.+2      	; 0x1b88 <MDIO_StderrSetPinDirection+0x6c>
    1b86:	43 c0       	rjmp	.+134    	; 0x1c0e <MDIO_StderrSetPinDirection+0xf2>
    1b88:	58 c0       	rjmp	.+176    	; 0x1c3a <MDIO_StderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA -> DDR,ARG_u8Pin);break;
    1b8a:	a9 e3       	ldi	r26, 0x39	; 57
    1b8c:	b0 e0       	ldi	r27, 0x00	; 0
    1b8e:	e9 e3       	ldi	r30, 0x39	; 57
    1b90:	f0 e0       	ldi	r31, 0x00	; 0
    1b92:	81 81       	ldd	r24, Z+1	; 0x01
    1b94:	48 2f       	mov	r20, r24
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	28 2f       	mov	r18, r24
    1b9a:	30 e0       	ldi	r19, 0x00	; 0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	02 2e       	mov	r0, r18
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <MDIO_StderrSetPinDirection+0x8c>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	0a 94       	dec	r0
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <MDIO_StderrSetPinDirection+0x88>
    1bac:	84 2b       	or	r24, r20
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	8c 93       	st	X, r24
    1bb2:	11 97       	sbiw	r26, 0x01	; 1
    1bb4:	a0 c1       	rjmp	.+832    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:SET_BIT(GPIOB -> DDR,ARG_u8Pin);break;
    1bb6:	a6 e3       	ldi	r26, 0x36	; 54
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e6 e3       	ldi	r30, 0x36	; 54
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	81 81       	ldd	r24, Z+1	; 0x01
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <MDIO_StderrSetPinDirection+0xb8>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <MDIO_StderrSetPinDirection+0xb4>
    1bd8:	84 2b       	or	r24, r20
    1bda:	11 96       	adiw	r26, 0x01	; 1
    1bdc:	8c 93       	st	X, r24
    1bde:	11 97       	sbiw	r26, 0x01	; 1
    1be0:	8a c1       	rjmp	.+788    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:SET_BIT(GPIOC -> DDR,ARG_u8Pin);break;
    1be2:	a3 e3       	ldi	r26, 0x33	; 51
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e3 e3       	ldi	r30, 0x33	; 51
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	81 81       	ldd	r24, Z+1	; 0x01
    1bec:	48 2f       	mov	r20, r24
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	81 e0       	ldi	r24, 0x01	; 1
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
    1bf8:	02 2e       	mov	r0, r18
    1bfa:	02 c0       	rjmp	.+4      	; 0x1c00 <MDIO_StderrSetPinDirection+0xe4>
    1bfc:	88 0f       	add	r24, r24
    1bfe:	99 1f       	adc	r25, r25
    1c00:	0a 94       	dec	r0
    1c02:	e2 f7       	brpl	.-8      	; 0x1bfc <MDIO_StderrSetPinDirection+0xe0>
    1c04:	84 2b       	or	r24, r20
    1c06:	11 96       	adiw	r26, 0x01	; 1
    1c08:	8c 93       	st	X, r24
    1c0a:	11 97       	sbiw	r26, 0x01	; 1
    1c0c:	74 c1       	rjmp	.+744    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:SET_BIT(GPIOD -> DDR,ARG_u8Pin);break;
    1c0e:	a0 e3       	ldi	r26, 0x30	; 48
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e0 e3       	ldi	r30, 0x30	; 48
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	81 81       	ldd	r24, Z+1	; 0x01
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <MDIO_StderrSetPinDirection+0x110>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <MDIO_StderrSetPinDirection+0x10c>
    1c30:	84 2b       	or	r24, r20
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	8c 93       	st	X, r24
    1c36:	11 97       	sbiw	r26, 0x01	; 1
    1c38:	5e c1       	rjmp	.+700    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	5b c1       	rjmp	.+694    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_PIN_INPUT==ARG_u8Direction)
    1c40:	8c 81       	ldd	r24, Y+4	; 0x04
    1c42:	82 30       	cpi	r24, 0x02	; 2
    1c44:	09 f0       	breq	.+2      	; 0x1c48 <MDIO_StderrSetPinDirection+0x12c>
    1c46:	80 c0       	rjmp	.+256    	; 0x1d48 <MDIO_StderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    1c48:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	38 87       	std	Y+8, r19	; 0x08
    1c50:	2f 83       	std	Y+7, r18	; 0x07
    1c52:	8f 81       	ldd	r24, Y+7	; 0x07
    1c54:	98 85       	ldd	r25, Y+8	; 0x08
    1c56:	82 30       	cpi	r24, 0x02	; 2
    1c58:	91 05       	cpc	r25, r1
    1c5a:	71 f1       	breq	.+92     	; 0x1cb8 <MDIO_StderrSetPinDirection+0x19c>
    1c5c:	2f 81       	ldd	r18, Y+7	; 0x07
    1c5e:	38 85       	ldd	r19, Y+8	; 0x08
    1c60:	23 30       	cpi	r18, 0x03	; 3
    1c62:	31 05       	cpc	r19, r1
    1c64:	34 f4       	brge	.+12     	; 0x1c72 <MDIO_StderrSetPinDirection+0x156>
    1c66:	8f 81       	ldd	r24, Y+7	; 0x07
    1c68:	98 85       	ldd	r25, Y+8	; 0x08
    1c6a:	81 30       	cpi	r24, 0x01	; 1
    1c6c:	91 05       	cpc	r25, r1
    1c6e:	69 f0       	breq	.+26     	; 0x1c8a <MDIO_StderrSetPinDirection+0x16e>
    1c70:	68 c0       	rjmp	.+208    	; 0x1d42 <MDIO_StderrSetPinDirection+0x226>
    1c72:	2f 81       	ldd	r18, Y+7	; 0x07
    1c74:	38 85       	ldd	r19, Y+8	; 0x08
    1c76:	23 30       	cpi	r18, 0x03	; 3
    1c78:	31 05       	cpc	r19, r1
    1c7a:	a9 f1       	breq	.+106    	; 0x1ce6 <MDIO_StderrSetPinDirection+0x1ca>
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	98 85       	ldd	r25, Y+8	; 0x08
    1c80:	84 30       	cpi	r24, 0x04	; 4
    1c82:	91 05       	cpc	r25, r1
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <MDIO_StderrSetPinDirection+0x16c>
    1c86:	46 c0       	rjmp	.+140    	; 0x1d14 <MDIO_StderrSetPinDirection+0x1f8>
    1c88:	5c c0       	rjmp	.+184    	; 0x1d42 <MDIO_StderrSetPinDirection+0x226>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> DDR,ARG_u8Pin);break;
    1c8a:	a9 e3       	ldi	r26, 0x39	; 57
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	e9 e3       	ldi	r30, 0x39	; 57
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	81 81       	ldd	r24, Z+1	; 0x01
    1c94:	48 2f       	mov	r20, r24
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	28 2f       	mov	r18, r24
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	02 2e       	mov	r0, r18
    1ca2:	02 c0       	rjmp	.+4      	; 0x1ca8 <MDIO_StderrSetPinDirection+0x18c>
    1ca4:	88 0f       	add	r24, r24
    1ca6:	99 1f       	adc	r25, r25
    1ca8:	0a 94       	dec	r0
    1caa:	e2 f7       	brpl	.-8      	; 0x1ca4 <MDIO_StderrSetPinDirection+0x188>
    1cac:	80 95       	com	r24
    1cae:	84 23       	and	r24, r20
    1cb0:	11 96       	adiw	r26, 0x01	; 1
    1cb2:	8c 93       	st	X, r24
    1cb4:	11 97       	sbiw	r26, 0x01	; 1
    1cb6:	1f c1       	rjmp	.+574    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> DDR,ARG_u8Pin);break;
    1cb8:	a6 e3       	ldi	r26, 0x36	; 54
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	e6 e3       	ldi	r30, 0x36	; 54
    1cbe:	f0 e0       	ldi	r31, 0x00	; 0
    1cc0:	81 81       	ldd	r24, Z+1	; 0x01
    1cc2:	48 2f       	mov	r20, r24
    1cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	02 2e       	mov	r0, r18
    1cd0:	02 c0       	rjmp	.+4      	; 0x1cd6 <MDIO_StderrSetPinDirection+0x1ba>
    1cd2:	88 0f       	add	r24, r24
    1cd4:	99 1f       	adc	r25, r25
    1cd6:	0a 94       	dec	r0
    1cd8:	e2 f7       	brpl	.-8      	; 0x1cd2 <MDIO_StderrSetPinDirection+0x1b6>
    1cda:	80 95       	com	r24
    1cdc:	84 23       	and	r24, r20
    1cde:	11 96       	adiw	r26, 0x01	; 1
    1ce0:	8c 93       	st	X, r24
    1ce2:	11 97       	sbiw	r26, 0x01	; 1
    1ce4:	08 c1       	rjmp	.+528    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> DDR,ARG_u8Pin);break;
    1ce6:	a3 e3       	ldi	r26, 0x33	; 51
    1ce8:	b0 e0       	ldi	r27, 0x00	; 0
    1cea:	e3 e3       	ldi	r30, 0x33	; 51
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	81 81       	ldd	r24, Z+1	; 0x01
    1cf0:	48 2f       	mov	r20, r24
    1cf2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf4:	28 2f       	mov	r18, r24
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	90 e0       	ldi	r25, 0x00	; 0
    1cfc:	02 2e       	mov	r0, r18
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <MDIO_StderrSetPinDirection+0x1e8>
    1d00:	88 0f       	add	r24, r24
    1d02:	99 1f       	adc	r25, r25
    1d04:	0a 94       	dec	r0
    1d06:	e2 f7       	brpl	.-8      	; 0x1d00 <MDIO_StderrSetPinDirection+0x1e4>
    1d08:	80 95       	com	r24
    1d0a:	84 23       	and	r24, r20
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	8c 93       	st	X, r24
    1d10:	11 97       	sbiw	r26, 0x01	; 1
    1d12:	f1 c0       	rjmp	.+482    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> DDR,ARG_u8Pin);break;
    1d14:	a0 e3       	ldi	r26, 0x30	; 48
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e0 e3       	ldi	r30, 0x30	; 48
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	81 81       	ldd	r24, Z+1	; 0x01
    1d1e:	48 2f       	mov	r20, r24
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	28 2f       	mov	r18, r24
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	02 2e       	mov	r0, r18
    1d2c:	02 c0       	rjmp	.+4      	; 0x1d32 <MDIO_StderrSetPinDirection+0x216>
    1d2e:	88 0f       	add	r24, r24
    1d30:	99 1f       	adc	r25, r25
    1d32:	0a 94       	dec	r0
    1d34:	e2 f7       	brpl	.-8      	; 0x1d2e <MDIO_StderrSetPinDirection+0x212>
    1d36:	80 95       	com	r24
    1d38:	84 23       	and	r24, r20
    1d3a:	11 96       	adiw	r26, 0x01	; 1
    1d3c:	8c 93       	st	X, r24
    1d3e:	11 97       	sbiw	r26, 0x01	; 1
    1d40:	da c0       	rjmp	.+436    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	d7 c0       	rjmp	.+430    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_PIN_PULLUP==ARG_u8Direction)
    1d48:	8c 81       	ldd	r24, Y+4	; 0x04
    1d4a:	83 30       	cpi	r24, 0x03	; 3
    1d4c:	09 f0       	breq	.+2      	; 0x1d50 <MDIO_StderrSetPinDirection+0x234>
    1d4e:	ce c0       	rjmp	.+412    	; 0x1eec <MDIO_StderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    1d50:	8a 81       	ldd	r24, Y+2	; 0x02
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	3e 83       	std	Y+6, r19	; 0x06
    1d58:	2d 83       	std	Y+5, r18	; 0x05
    1d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5e:	82 30       	cpi	r24, 0x02	; 2
    1d60:	91 05       	cpc	r25, r1
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <MDIO_StderrSetPinDirection+0x24a>
    1d64:	42 c0       	rjmp	.+132    	; 0x1dea <MDIO_StderrSetPinDirection+0x2ce>
    1d66:	2d 81       	ldd	r18, Y+5	; 0x05
    1d68:	3e 81       	ldd	r19, Y+6	; 0x06
    1d6a:	23 30       	cpi	r18, 0x03	; 3
    1d6c:	31 05       	cpc	r19, r1
    1d6e:	34 f4       	brge	.+12     	; 0x1d7c <MDIO_StderrSetPinDirection+0x260>
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	81 30       	cpi	r24, 0x01	; 1
    1d76:	91 05       	cpc	r25, r1
    1d78:	71 f0       	breq	.+28     	; 0x1d96 <MDIO_StderrSetPinDirection+0x27a>
    1d7a:	b5 c0       	rjmp	.+362    	; 0x1ee6 <MDIO_StderrSetPinDirection+0x3ca>
    1d7c:	2d 81       	ldd	r18, Y+5	; 0x05
    1d7e:	3e 81       	ldd	r19, Y+6	; 0x06
    1d80:	23 30       	cpi	r18, 0x03	; 3
    1d82:	31 05       	cpc	r19, r1
    1d84:	09 f4       	brne	.+2      	; 0x1d88 <MDIO_StderrSetPinDirection+0x26c>
    1d86:	5b c0       	rjmp	.+182    	; 0x1e3e <MDIO_StderrSetPinDirection+0x322>
    1d88:	8d 81       	ldd	r24, Y+5	; 0x05
    1d8a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8c:	84 30       	cpi	r24, 0x04	; 4
    1d8e:	91 05       	cpc	r25, r1
    1d90:	09 f4       	brne	.+2      	; 0x1d94 <MDIO_StderrSetPinDirection+0x278>
    1d92:	7f c0       	rjmp	.+254    	; 0x1e92 <MDIO_StderrSetPinDirection+0x376>
    1d94:	a8 c0       	rjmp	.+336    	; 0x1ee6 <MDIO_StderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> DDR,ARG_u8Pin);SET_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    1d96:	a9 e3       	ldi	r26, 0x39	; 57
    1d98:	b0 e0       	ldi	r27, 0x00	; 0
    1d9a:	e9 e3       	ldi	r30, 0x39	; 57
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	81 81       	ldd	r24, Z+1	; 0x01
    1da0:	48 2f       	mov	r20, r24
    1da2:	8b 81       	ldd	r24, Y+3	; 0x03
    1da4:	28 2f       	mov	r18, r24
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	02 c0       	rjmp	.+4      	; 0x1db2 <MDIO_StderrSetPinDirection+0x296>
    1dae:	88 0f       	add	r24, r24
    1db0:	99 1f       	adc	r25, r25
    1db2:	2a 95       	dec	r18
    1db4:	e2 f7       	brpl	.-8      	; 0x1dae <MDIO_StderrSetPinDirection+0x292>
    1db6:	80 95       	com	r24
    1db8:	84 23       	and	r24, r20
    1dba:	11 96       	adiw	r26, 0x01	; 1
    1dbc:	8c 93       	st	X, r24
    1dbe:	a9 e3       	ldi	r26, 0x39	; 57
    1dc0:	b0 e0       	ldi	r27, 0x00	; 0
    1dc2:	e9 e3       	ldi	r30, 0x39	; 57
    1dc4:	f0 e0       	ldi	r31, 0x00	; 0
    1dc6:	82 81       	ldd	r24, Z+2	; 0x02
    1dc8:	48 2f       	mov	r20, r24
    1dca:	8b 81       	ldd	r24, Y+3	; 0x03
    1dcc:	28 2f       	mov	r18, r24
    1dce:	30 e0       	ldi	r19, 0x00	; 0
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	02 2e       	mov	r0, r18
    1dd6:	02 c0       	rjmp	.+4      	; 0x1ddc <MDIO_StderrSetPinDirection+0x2c0>
    1dd8:	88 0f       	add	r24, r24
    1dda:	99 1f       	adc	r25, r25
    1ddc:	0a 94       	dec	r0
    1dde:	e2 f7       	brpl	.-8      	; 0x1dd8 <MDIO_StderrSetPinDirection+0x2bc>
    1de0:	84 2b       	or	r24, r20
    1de2:	12 96       	adiw	r26, 0x02	; 2
    1de4:	8c 93       	st	X, r24
    1de6:	12 97       	sbiw	r26, 0x02	; 2
    1de8:	86 c0       	rjmp	.+268    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> DDR,ARG_u8Pin);SET_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    1dea:	a6 e3       	ldi	r26, 0x36	; 54
    1dec:	b0 e0       	ldi	r27, 0x00	; 0
    1dee:	e6 e3       	ldi	r30, 0x36	; 54
    1df0:	f0 e0       	ldi	r31, 0x00	; 0
    1df2:	81 81       	ldd	r24, Z+1	; 0x01
    1df4:	48 2f       	mov	r20, r24
    1df6:	8b 81       	ldd	r24, Y+3	; 0x03
    1df8:	28 2f       	mov	r18, r24
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	81 e0       	ldi	r24, 0x01	; 1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	02 c0       	rjmp	.+4      	; 0x1e06 <MDIO_StderrSetPinDirection+0x2ea>
    1e02:	88 0f       	add	r24, r24
    1e04:	99 1f       	adc	r25, r25
    1e06:	2a 95       	dec	r18
    1e08:	e2 f7       	brpl	.-8      	; 0x1e02 <MDIO_StderrSetPinDirection+0x2e6>
    1e0a:	80 95       	com	r24
    1e0c:	84 23       	and	r24, r20
    1e0e:	11 96       	adiw	r26, 0x01	; 1
    1e10:	8c 93       	st	X, r24
    1e12:	a6 e3       	ldi	r26, 0x36	; 54
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	e6 e3       	ldi	r30, 0x36	; 54
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	82 81       	ldd	r24, Z+2	; 0x02
    1e1c:	48 2f       	mov	r20, r24
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	90 e0       	ldi	r25, 0x00	; 0
    1e28:	02 2e       	mov	r0, r18
    1e2a:	02 c0       	rjmp	.+4      	; 0x1e30 <MDIO_StderrSetPinDirection+0x314>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	0a 94       	dec	r0
    1e32:	e2 f7       	brpl	.-8      	; 0x1e2c <MDIO_StderrSetPinDirection+0x310>
    1e34:	84 2b       	or	r24, r20
    1e36:	12 96       	adiw	r26, 0x02	; 2
    1e38:	8c 93       	st	X, r24
    1e3a:	12 97       	sbiw	r26, 0x02	; 2
    1e3c:	5c c0       	rjmp	.+184    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> DDR,ARG_u8Pin);SET_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    1e3e:	a3 e3       	ldi	r26, 0x33	; 51
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e3 e3       	ldi	r30, 0x33	; 51
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	81 81       	ldd	r24, Z+1	; 0x01
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <MDIO_StderrSetPinDirection+0x33e>
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	2a 95       	dec	r18
    1e5c:	e2 f7       	brpl	.-8      	; 0x1e56 <MDIO_StderrSetPinDirection+0x33a>
    1e5e:	80 95       	com	r24
    1e60:	84 23       	and	r24, r20
    1e62:	11 96       	adiw	r26, 0x01	; 1
    1e64:	8c 93       	st	X, r24
    1e66:	a3 e3       	ldi	r26, 0x33	; 51
    1e68:	b0 e0       	ldi	r27, 0x00	; 0
    1e6a:	e3 e3       	ldi	r30, 0x33	; 51
    1e6c:	f0 e0       	ldi	r31, 0x00	; 0
    1e6e:	82 81       	ldd	r24, Z+2	; 0x02
    1e70:	48 2f       	mov	r20, r24
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	02 2e       	mov	r0, r18
    1e7e:	02 c0       	rjmp	.+4      	; 0x1e84 <MDIO_StderrSetPinDirection+0x368>
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	0a 94       	dec	r0
    1e86:	e2 f7       	brpl	.-8      	; 0x1e80 <MDIO_StderrSetPinDirection+0x364>
    1e88:	84 2b       	or	r24, r20
    1e8a:	12 96       	adiw	r26, 0x02	; 2
    1e8c:	8c 93       	st	X, r24
    1e8e:	12 97       	sbiw	r26, 0x02	; 2
    1e90:	32 c0       	rjmp	.+100    	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> DDR,ARG_u8Pin);SET_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    1e92:	a0 e3       	ldi	r26, 0x30	; 48
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e0 e3       	ldi	r30, 0x30	; 48
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	81 81       	ldd	r24, Z+1	; 0x01
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 c0       	rjmp	.+4      	; 0x1eae <MDIO_StderrSetPinDirection+0x392>
    1eaa:	88 0f       	add	r24, r24
    1eac:	99 1f       	adc	r25, r25
    1eae:	2a 95       	dec	r18
    1eb0:	e2 f7       	brpl	.-8      	; 0x1eaa <MDIO_StderrSetPinDirection+0x38e>
    1eb2:	80 95       	com	r24
    1eb4:	84 23       	and	r24, r20
    1eb6:	11 96       	adiw	r26, 0x01	; 1
    1eb8:	8c 93       	st	X, r24
    1eba:	a0 e3       	ldi	r26, 0x30	; 48
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	e0 e3       	ldi	r30, 0x30	; 48
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	82 81       	ldd	r24, Z+2	; 0x02
    1ec4:	48 2f       	mov	r20, r24
    1ec6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec8:	28 2f       	mov	r18, r24
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	02 2e       	mov	r0, r18
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <MDIO_StderrSetPinDirection+0x3bc>
    1ed4:	88 0f       	add	r24, r24
    1ed6:	99 1f       	adc	r25, r25
    1ed8:	0a 94       	dec	r0
    1eda:	e2 f7       	brpl	.-8      	; 0x1ed4 <MDIO_StderrSetPinDirection+0x3b8>
    1edc:	84 2b       	or	r24, r20
    1ede:	12 96       	adiw	r26, 0x02	; 2
    1ee0:	8c 93       	st	X, r24
    1ee2:	12 97       	sbiw	r26, 0x02	; 2
    1ee4:	08 c0       	rjmp	.+16     	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    1ee6:	81 e0       	ldi	r24, 0x01	; 1
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	05 c0       	rjmp	.+10     	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else
		{
			L_StderrError=E_NOK;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <MDIO_StderrSetPinDirection+0x3da>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ef8:	2a 96       	adiw	r28, 0x0a	; 10
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <MDIO_StderrSetPinValue>:
*[out]:	N/A
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrSetPinValue(u8 ARG_u8Port,u8 ARG_u8Pin, u8 ARG_u8Value)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	cd b7       	in	r28, 0x3d	; 61
    1f10:	de b7       	in	r29, 0x3e	; 62
    1f12:	28 97       	sbiw	r28, 0x08	; 8
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	f8 94       	cli
    1f18:	de bf       	out	0x3e, r29	; 62
    1f1a:	0f be       	out	0x3f, r0	; 63
    1f1c:	cd bf       	out	0x3d, r28	; 61
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
    1f20:	6b 83       	std	Y+3, r22	; 0x03
    1f22:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_StderrError=E_OK;
    1f24:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	88 30       	cpi	r24, 0x08	; 8
    1f2a:	08 f0       	brcs	.+2      	; 0x1f2e <MDIO_StderrSetPinValue+0x24>
    1f2c:	07 c1       	rjmp	.+526    	; 0x213c <MDIO_StderrSetPinValue+0x232>
	{
		if(MDIO_PIN_HIGH==ARG_u8Value)
    1f2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f30:	81 30       	cpi	r24, 0x01	; 1
    1f32:	09 f0       	breq	.+2      	; 0x1f36 <MDIO_StderrSetPinValue+0x2c>
    1f34:	7c c0       	rjmp	.+248    	; 0x202e <MDIO_StderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    1f36:	8a 81       	ldd	r24, Y+2	; 0x02
    1f38:	28 2f       	mov	r18, r24
    1f3a:	30 e0       	ldi	r19, 0x00	; 0
    1f3c:	38 87       	std	Y+8, r19	; 0x08
    1f3e:	2f 83       	std	Y+7, r18	; 0x07
    1f40:	8f 81       	ldd	r24, Y+7	; 0x07
    1f42:	98 85       	ldd	r25, Y+8	; 0x08
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	91 05       	cpc	r25, r1
    1f48:	69 f1       	breq	.+90     	; 0x1fa4 <MDIO_StderrSetPinValue+0x9a>
    1f4a:	2f 81       	ldd	r18, Y+7	; 0x07
    1f4c:	38 85       	ldd	r19, Y+8	; 0x08
    1f4e:	23 30       	cpi	r18, 0x03	; 3
    1f50:	31 05       	cpc	r19, r1
    1f52:	34 f4       	brge	.+12     	; 0x1f60 <MDIO_StderrSetPinValue+0x56>
    1f54:	8f 81       	ldd	r24, Y+7	; 0x07
    1f56:	98 85       	ldd	r25, Y+8	; 0x08
    1f58:	81 30       	cpi	r24, 0x01	; 1
    1f5a:	91 05       	cpc	r25, r1
    1f5c:	69 f0       	breq	.+26     	; 0x1f78 <MDIO_StderrSetPinValue+0x6e>
    1f5e:	64 c0       	rjmp	.+200    	; 0x2028 <MDIO_StderrSetPinValue+0x11e>
    1f60:	2f 81       	ldd	r18, Y+7	; 0x07
    1f62:	38 85       	ldd	r19, Y+8	; 0x08
    1f64:	23 30       	cpi	r18, 0x03	; 3
    1f66:	31 05       	cpc	r19, r1
    1f68:	99 f1       	breq	.+102    	; 0x1fd0 <MDIO_StderrSetPinValue+0xc6>
    1f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f6c:	98 85       	ldd	r25, Y+8	; 0x08
    1f6e:	84 30       	cpi	r24, 0x04	; 4
    1f70:	91 05       	cpc	r25, r1
    1f72:	09 f4       	brne	.+2      	; 0x1f76 <MDIO_StderrSetPinValue+0x6c>
    1f74:	43 c0       	rjmp	.+134    	; 0x1ffc <MDIO_StderrSetPinValue+0xf2>
    1f76:	58 c0       	rjmp	.+176    	; 0x2028 <MDIO_StderrSetPinValue+0x11e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    1f78:	a9 e3       	ldi	r26, 0x39	; 57
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e9 e3       	ldi	r30, 0x39	; 57
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	82 81       	ldd	r24, Z+2	; 0x02
    1f82:	48 2f       	mov	r20, r24
    1f84:	8b 81       	ldd	r24, Y+3	; 0x03
    1f86:	28 2f       	mov	r18, r24
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	02 2e       	mov	r0, r18
    1f90:	02 c0       	rjmp	.+4      	; 0x1f96 <MDIO_StderrSetPinValue+0x8c>
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	0a 94       	dec	r0
    1f98:	e2 f7       	brpl	.-8      	; 0x1f92 <MDIO_StderrSetPinValue+0x88>
    1f9a:	84 2b       	or	r24, r20
    1f9c:	12 96       	adiw	r26, 0x02	; 2
    1f9e:	8c 93       	st	X, r24
    1fa0:	12 97       	sbiw	r26, 0x02	; 2
    1fa2:	ce c0       	rjmp	.+412    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTB:SET_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    1fa4:	a6 e3       	ldi	r26, 0x36	; 54
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e6 e3       	ldi	r30, 0x36	; 54
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	82 81       	ldd	r24, Z+2	; 0x02
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <MDIO_StderrSetPinValue+0xb8>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <MDIO_StderrSetPinValue+0xb4>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	12 96       	adiw	r26, 0x02	; 2
    1fca:	8c 93       	st	X, r24
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
    1fce:	b8 c0       	rjmp	.+368    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTC:SET_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    1fd0:	a3 e3       	ldi	r26, 0x33	; 51
    1fd2:	b0 e0       	ldi	r27, 0x00	; 0
    1fd4:	e3 e3       	ldi	r30, 0x33	; 51
    1fd6:	f0 e0       	ldi	r31, 0x00	; 0
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	48 2f       	mov	r20, r24
    1fdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fde:	28 2f       	mov	r18, r24
    1fe0:	30 e0       	ldi	r19, 0x00	; 0
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	02 2e       	mov	r0, r18
    1fe8:	02 c0       	rjmp	.+4      	; 0x1fee <MDIO_StderrSetPinValue+0xe4>
    1fea:	88 0f       	add	r24, r24
    1fec:	99 1f       	adc	r25, r25
    1fee:	0a 94       	dec	r0
    1ff0:	e2 f7       	brpl	.-8      	; 0x1fea <MDIO_StderrSetPinValue+0xe0>
    1ff2:	84 2b       	or	r24, r20
    1ff4:	12 96       	adiw	r26, 0x02	; 2
    1ff6:	8c 93       	st	X, r24
    1ff8:	12 97       	sbiw	r26, 0x02	; 2
    1ffa:	a2 c0       	rjmp	.+324    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTD:SET_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    1ffc:	a0 e3       	ldi	r26, 0x30	; 48
    1ffe:	b0 e0       	ldi	r27, 0x00	; 0
    2000:	e0 e3       	ldi	r30, 0x30	; 48
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	82 81       	ldd	r24, Z+2	; 0x02
    2006:	48 2f       	mov	r20, r24
    2008:	8b 81       	ldd	r24, Y+3	; 0x03
    200a:	28 2f       	mov	r18, r24
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	90 e0       	ldi	r25, 0x00	; 0
    2012:	02 2e       	mov	r0, r18
    2014:	02 c0       	rjmp	.+4      	; 0x201a <MDIO_StderrSetPinValue+0x110>
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	0a 94       	dec	r0
    201c:	e2 f7       	brpl	.-8      	; 0x2016 <MDIO_StderrSetPinValue+0x10c>
    201e:	84 2b       	or	r24, r20
    2020:	12 96       	adiw	r26, 0x02	; 2
    2022:	8c 93       	st	X, r24
    2024:	12 97       	sbiw	r26, 0x02	; 2
    2026:	8c c0       	rjmp	.+280    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 c0       	rjmp	.+274    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
			}
		}
		else if(MDIO_PIN_LOW==ARG_u8Value)
    202e:	8c 81       	ldd	r24, Y+4	; 0x04
    2030:	88 23       	and	r24, r24
    2032:	09 f0       	breq	.+2      	; 0x2036 <MDIO_StderrSetPinValue+0x12c>
    2034:	80 c0       	rjmp	.+256    	; 0x2136 <MDIO_StderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    2036:	8a 81       	ldd	r24, Y+2	; 0x02
    2038:	28 2f       	mov	r18, r24
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	3e 83       	std	Y+6, r19	; 0x06
    203e:	2d 83       	std	Y+5, r18	; 0x05
    2040:	8d 81       	ldd	r24, Y+5	; 0x05
    2042:	9e 81       	ldd	r25, Y+6	; 0x06
    2044:	82 30       	cpi	r24, 0x02	; 2
    2046:	91 05       	cpc	r25, r1
    2048:	71 f1       	breq	.+92     	; 0x20a6 <MDIO_StderrSetPinValue+0x19c>
    204a:	2d 81       	ldd	r18, Y+5	; 0x05
    204c:	3e 81       	ldd	r19, Y+6	; 0x06
    204e:	23 30       	cpi	r18, 0x03	; 3
    2050:	31 05       	cpc	r19, r1
    2052:	34 f4       	brge	.+12     	; 0x2060 <MDIO_StderrSetPinValue+0x156>
    2054:	8d 81       	ldd	r24, Y+5	; 0x05
    2056:	9e 81       	ldd	r25, Y+6	; 0x06
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	91 05       	cpc	r25, r1
    205c:	69 f0       	breq	.+26     	; 0x2078 <MDIO_StderrSetPinValue+0x16e>
    205e:	68 c0       	rjmp	.+208    	; 0x2130 <MDIO_StderrSetPinValue+0x226>
    2060:	2d 81       	ldd	r18, Y+5	; 0x05
    2062:	3e 81       	ldd	r19, Y+6	; 0x06
    2064:	23 30       	cpi	r18, 0x03	; 3
    2066:	31 05       	cpc	r19, r1
    2068:	a9 f1       	breq	.+106    	; 0x20d4 <MDIO_StderrSetPinValue+0x1ca>
    206a:	8d 81       	ldd	r24, Y+5	; 0x05
    206c:	9e 81       	ldd	r25, Y+6	; 0x06
    206e:	84 30       	cpi	r24, 0x04	; 4
    2070:	91 05       	cpc	r25, r1
    2072:	09 f4       	brne	.+2      	; 0x2076 <MDIO_StderrSetPinValue+0x16c>
    2074:	46 c0       	rjmp	.+140    	; 0x2102 <MDIO_StderrSetPinValue+0x1f8>
    2076:	5c c0       	rjmp	.+184    	; 0x2130 <MDIO_StderrSetPinValue+0x226>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    2078:	a9 e3       	ldi	r26, 0x39	; 57
    207a:	b0 e0       	ldi	r27, 0x00	; 0
    207c:	e9 e3       	ldi	r30, 0x39	; 57
    207e:	f0 e0       	ldi	r31, 0x00	; 0
    2080:	82 81       	ldd	r24, Z+2	; 0x02
    2082:	48 2f       	mov	r20, r24
    2084:	8b 81       	ldd	r24, Y+3	; 0x03
    2086:	28 2f       	mov	r18, r24
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	02 2e       	mov	r0, r18
    2090:	02 c0       	rjmp	.+4      	; 0x2096 <MDIO_StderrSetPinValue+0x18c>
    2092:	88 0f       	add	r24, r24
    2094:	99 1f       	adc	r25, r25
    2096:	0a 94       	dec	r0
    2098:	e2 f7       	brpl	.-8      	; 0x2092 <MDIO_StderrSetPinValue+0x188>
    209a:	80 95       	com	r24
    209c:	84 23       	and	r24, r20
    209e:	12 96       	adiw	r26, 0x02	; 2
    20a0:	8c 93       	st	X, r24
    20a2:	12 97       	sbiw	r26, 0x02	; 2
    20a4:	4d c0       	rjmp	.+154    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    20a6:	a6 e3       	ldi	r26, 0x36	; 54
    20a8:	b0 e0       	ldi	r27, 0x00	; 0
    20aa:	e6 e3       	ldi	r30, 0x36	; 54
    20ac:	f0 e0       	ldi	r31, 0x00	; 0
    20ae:	82 81       	ldd	r24, Z+2	; 0x02
    20b0:	48 2f       	mov	r20, r24
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	28 2f       	mov	r18, r24
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	81 e0       	ldi	r24, 0x01	; 1
    20ba:	90 e0       	ldi	r25, 0x00	; 0
    20bc:	02 2e       	mov	r0, r18
    20be:	02 c0       	rjmp	.+4      	; 0x20c4 <MDIO_StderrSetPinValue+0x1ba>
    20c0:	88 0f       	add	r24, r24
    20c2:	99 1f       	adc	r25, r25
    20c4:	0a 94       	dec	r0
    20c6:	e2 f7       	brpl	.-8      	; 0x20c0 <MDIO_StderrSetPinValue+0x1b6>
    20c8:	80 95       	com	r24
    20ca:	84 23       	and	r24, r20
    20cc:	12 96       	adiw	r26, 0x02	; 2
    20ce:	8c 93       	st	X, r24
    20d0:	12 97       	sbiw	r26, 0x02	; 2
    20d2:	36 c0       	rjmp	.+108    	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    20d4:	a3 e3       	ldi	r26, 0x33	; 51
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e3 e3       	ldi	r30, 0x33	; 51
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	82 81       	ldd	r24, Z+2	; 0x02
    20de:	48 2f       	mov	r20, r24
    20e0:	8b 81       	ldd	r24, Y+3	; 0x03
    20e2:	28 2f       	mov	r18, r24
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 2e       	mov	r0, r18
    20ec:	02 c0       	rjmp	.+4      	; 0x20f2 <MDIO_StderrSetPinValue+0x1e8>
    20ee:	88 0f       	add	r24, r24
    20f0:	99 1f       	adc	r25, r25
    20f2:	0a 94       	dec	r0
    20f4:	e2 f7       	brpl	.-8      	; 0x20ee <MDIO_StderrSetPinValue+0x1e4>
    20f6:	80 95       	com	r24
    20f8:	84 23       	and	r24, r20
    20fa:	12 96       	adiw	r26, 0x02	; 2
    20fc:	8c 93       	st	X, r24
    20fe:	12 97       	sbiw	r26, 0x02	; 2
    2100:	1f c0       	rjmp	.+62     	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    2102:	a0 e3       	ldi	r26, 0x30	; 48
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e0 e3       	ldi	r30, 0x30	; 48
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	48 2f       	mov	r20, r24
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 2e       	mov	r0, r18
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <MDIO_StderrSetPinValue+0x216>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	0a 94       	dec	r0
    2122:	e2 f7       	brpl	.-8      	; 0x211c <MDIO_StderrSetPinValue+0x212>
    2124:	80 95       	com	r24
    2126:	84 23       	and	r24, r20
    2128:	12 96       	adiw	r26, 0x02	; 2
    212a:	8c 93       	st	X, r24
    212c:	12 97       	sbiw	r26, 0x02	; 2
    212e:	08 c0       	rjmp	.+16     	; 0x2140 <MDIO_StderrSetPinValue+0x236>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	89 83       	std	Y+1, r24	; 0x01
    2134:	05 c0       	rjmp	.+10     	; 0x2140 <MDIO_StderrSetPinValue+0x236>
			}
		}
		else
		{
			L_StderrError=E_NOK;
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	89 83       	std	Y+1, r24	; 0x01
    213a:	02 c0       	rjmp	.+4      	; 0x2140 <MDIO_StderrSetPinValue+0x236>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    2140:	89 81       	ldd	r24, Y+1	; 0x01
}
    2142:	28 96       	adiw	r28, 0x08	; 8
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	de bf       	out	0x3e, r29	; 62
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	cd bf       	out	0x3d, r28	; 61
    214e:	cf 91       	pop	r28
    2150:	df 91       	pop	r29
    2152:	08 95       	ret

00002154 <MDIO_StderrTogglePinValue>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrTogglePinValue(u8 ARG_u8Port,u8 ARG_u8Pin)
{
    2154:	df 93       	push	r29
    2156:	cf 93       	push	r28
    2158:	00 d0       	rcall	.+0      	; 0x215a <MDIO_StderrTogglePinValue+0x6>
    215a:	00 d0       	rcall	.+0      	; 0x215c <MDIO_StderrTogglePinValue+0x8>
    215c:	0f 92       	push	r0
    215e:	cd b7       	in	r28, 0x3d	; 61
    2160:	de b7       	in	r29, 0x3e	; 62
    2162:	8a 83       	std	Y+2, r24	; 0x02
    2164:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    2166:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	88 30       	cpi	r24, 0x08	; 8
    216c:	08 f0       	brcs	.+2      	; 0x2170 <MDIO_StderrTogglePinValue+0x1c>
    216e:	7c c0       	rjmp	.+248    	; 0x2268 <MDIO_StderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    2170:	8a 81       	ldd	r24, Y+2	; 0x02
    2172:	28 2f       	mov	r18, r24
    2174:	30 e0       	ldi	r19, 0x00	; 0
    2176:	3d 83       	std	Y+5, r19	; 0x05
    2178:	2c 83       	std	Y+4, r18	; 0x04
    217a:	8c 81       	ldd	r24, Y+4	; 0x04
    217c:	9d 81       	ldd	r25, Y+5	; 0x05
    217e:	82 30       	cpi	r24, 0x02	; 2
    2180:	91 05       	cpc	r25, r1
    2182:	69 f1       	breq	.+90     	; 0x21de <MDIO_StderrTogglePinValue+0x8a>
    2184:	2c 81       	ldd	r18, Y+4	; 0x04
    2186:	3d 81       	ldd	r19, Y+5	; 0x05
    2188:	23 30       	cpi	r18, 0x03	; 3
    218a:	31 05       	cpc	r19, r1
    218c:	34 f4       	brge	.+12     	; 0x219a <MDIO_StderrTogglePinValue+0x46>
    218e:	8c 81       	ldd	r24, Y+4	; 0x04
    2190:	9d 81       	ldd	r25, Y+5	; 0x05
    2192:	81 30       	cpi	r24, 0x01	; 1
    2194:	91 05       	cpc	r25, r1
    2196:	69 f0       	breq	.+26     	; 0x21b2 <MDIO_StderrTogglePinValue+0x5e>
    2198:	64 c0       	rjmp	.+200    	; 0x2262 <MDIO_StderrTogglePinValue+0x10e>
    219a:	2c 81       	ldd	r18, Y+4	; 0x04
    219c:	3d 81       	ldd	r19, Y+5	; 0x05
    219e:	23 30       	cpi	r18, 0x03	; 3
    21a0:	31 05       	cpc	r19, r1
    21a2:	99 f1       	breq	.+102    	; 0x220a <MDIO_StderrTogglePinValue+0xb6>
    21a4:	8c 81       	ldd	r24, Y+4	; 0x04
    21a6:	9d 81       	ldd	r25, Y+5	; 0x05
    21a8:	84 30       	cpi	r24, 0x04	; 4
    21aa:	91 05       	cpc	r25, r1
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <MDIO_StderrTogglePinValue+0x5c>
    21ae:	43 c0       	rjmp	.+134    	; 0x2236 <MDIO_StderrTogglePinValue+0xe2>
    21b0:	58 c0       	rjmp	.+176    	; 0x2262 <MDIO_StderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA:TOGGLE_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    21b2:	a9 e3       	ldi	r26, 0x39	; 57
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e9 e3       	ldi	r30, 0x39	; 57
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	82 81       	ldd	r24, Z+2	; 0x02
    21bc:	48 2f       	mov	r20, r24
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	28 2f       	mov	r18, r24
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	02 2e       	mov	r0, r18
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <MDIO_StderrTogglePinValue+0x7c>
    21cc:	88 0f       	add	r24, r24
    21ce:	99 1f       	adc	r25, r25
    21d0:	0a 94       	dec	r0
    21d2:	e2 f7       	brpl	.-8      	; 0x21cc <MDIO_StderrTogglePinValue+0x78>
    21d4:	84 27       	eor	r24, r20
    21d6:	12 96       	adiw	r26, 0x02	; 2
    21d8:	8c 93       	st	X, r24
    21da:	12 97       	sbiw	r26, 0x02	; 2
    21dc:	47 c0       	rjmp	.+142    	; 0x226c <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTB:TOGGLE_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    21de:	a6 e3       	ldi	r26, 0x36	; 54
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e3       	ldi	r30, 0x36	; 54
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	82 81       	ldd	r24, Z+2	; 0x02
    21e8:	48 2f       	mov	r20, r24
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	28 2f       	mov	r18, r24
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	81 e0       	ldi	r24, 0x01	; 1
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	02 2e       	mov	r0, r18
    21f6:	02 c0       	rjmp	.+4      	; 0x21fc <MDIO_StderrTogglePinValue+0xa8>
    21f8:	88 0f       	add	r24, r24
    21fa:	99 1f       	adc	r25, r25
    21fc:	0a 94       	dec	r0
    21fe:	e2 f7       	brpl	.-8      	; 0x21f8 <MDIO_StderrTogglePinValue+0xa4>
    2200:	84 27       	eor	r24, r20
    2202:	12 96       	adiw	r26, 0x02	; 2
    2204:	8c 93       	st	X, r24
    2206:	12 97       	sbiw	r26, 0x02	; 2
    2208:	31 c0       	rjmp	.+98     	; 0x226c <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTC:TOGGLE_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    220a:	a3 e3       	ldi	r26, 0x33	; 51
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e3 e3       	ldi	r30, 0x33	; 51
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	82 81       	ldd	r24, Z+2	; 0x02
    2214:	48 2f       	mov	r20, r24
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <MDIO_StderrTogglePinValue+0xd4>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <MDIO_StderrTogglePinValue+0xd0>
    222c:	84 27       	eor	r24, r20
    222e:	12 96       	adiw	r26, 0x02	; 2
    2230:	8c 93       	st	X, r24
    2232:	12 97       	sbiw	r26, 0x02	; 2
    2234:	1b c0       	rjmp	.+54     	; 0x226c <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTD:TOGGLE_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    2236:	a0 e3       	ldi	r26, 0x30	; 48
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e0 e3       	ldi	r30, 0x30	; 48
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	48 2f       	mov	r20, r24
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	28 2f       	mov	r18, r24
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	81 e0       	ldi	r24, 0x01	; 1
    224a:	90 e0       	ldi	r25, 0x00	; 0
    224c:	02 2e       	mov	r0, r18
    224e:	02 c0       	rjmp	.+4      	; 0x2254 <MDIO_StderrTogglePinValue+0x100>
    2250:	88 0f       	add	r24, r24
    2252:	99 1f       	adc	r25, r25
    2254:	0a 94       	dec	r0
    2256:	e2 f7       	brpl	.-8      	; 0x2250 <MDIO_StderrTogglePinValue+0xfc>
    2258:	84 27       	eor	r24, r20
    225a:	12 96       	adiw	r26, 0x02	; 2
    225c:	8c 93       	st	X, r24
    225e:	12 97       	sbiw	r26, 0x02	; 2
    2260:	05 c0       	rjmp	.+10     	; 0x226c <MDIO_StderrTogglePinValue+0x118>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	89 83       	std	Y+1, r24	; 0x01
    2266:	02 c0       	rjmp	.+4      	; 0x226c <MDIO_StderrTogglePinValue+0x118>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError; 	
    226c:	89 81       	ldd	r24, Y+1	; 0x01
}
    226e:	0f 90       	pop	r0
    2270:	0f 90       	pop	r0
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	cf 91       	pop	r28
    227a:	df 91       	pop	r29
    227c:	08 95       	ret

0000227e <MDIO_StderrGetPinValue>:
*[out]: u8 * ARG_u8pValue
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrGetPinValue(u8 * ARG_u8pValue,u8 ARG_u8Port,u8 ARG_u8Pin)
{	
    227e:	df 93       	push	r29
    2280:	cf 93       	push	r28
    2282:	cd b7       	in	r28, 0x3d	; 61
    2284:	de b7       	in	r29, 0x3e	; 62
    2286:	27 97       	sbiw	r28, 0x07	; 7
    2288:	0f b6       	in	r0, 0x3f	; 63
    228a:	f8 94       	cli
    228c:	de bf       	out	0x3e, r29	; 62
    228e:	0f be       	out	0x3f, r0	; 63
    2290:	cd bf       	out	0x3d, r28	; 61
    2292:	9b 83       	std	Y+3, r25	; 0x03
    2294:	8a 83       	std	Y+2, r24	; 0x02
    2296:	6c 83       	std	Y+4, r22	; 0x04
    2298:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_StderrError=E_OK;
    229a:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==ARG_u8pValue)
    229c:	8a 81       	ldd	r24, Y+2	; 0x02
    229e:	9b 81       	ldd	r25, Y+3	; 0x03
    22a0:	00 97       	sbiw	r24, 0x00	; 0
    22a2:	19 f4       	brne	.+6      	; 0x22aa <MDIO_StderrGetPinValue+0x2c>
	{
		L_StderrError=E_NULL_POINTER;
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	89 83       	std	Y+1, r24	; 0x01
    22a8:	73 c0       	rjmp	.+230    	; 0x2390 <MDIO_StderrGetPinValue+0x112>
	}
	else
	{
		switch(ARG_u8Port)
    22aa:	8c 81       	ldd	r24, Y+4	; 0x04
    22ac:	28 2f       	mov	r18, r24
    22ae:	30 e0       	ldi	r19, 0x00	; 0
    22b0:	3f 83       	std	Y+7, r19	; 0x07
    22b2:	2e 83       	std	Y+6, r18	; 0x06
    22b4:	4e 81       	ldd	r20, Y+6	; 0x06
    22b6:	5f 81       	ldd	r21, Y+7	; 0x07
    22b8:	42 30       	cpi	r20, 0x02	; 2
    22ba:	51 05       	cpc	r21, r1
    22bc:	59 f1       	breq	.+86     	; 0x2314 <MDIO_StderrGetPinValue+0x96>
    22be:	8e 81       	ldd	r24, Y+6	; 0x06
    22c0:	9f 81       	ldd	r25, Y+7	; 0x07
    22c2:	83 30       	cpi	r24, 0x03	; 3
    22c4:	91 05       	cpc	r25, r1
    22c6:	34 f4       	brge	.+12     	; 0x22d4 <MDIO_StderrGetPinValue+0x56>
    22c8:	2e 81       	ldd	r18, Y+6	; 0x06
    22ca:	3f 81       	ldd	r19, Y+7	; 0x07
    22cc:	21 30       	cpi	r18, 0x01	; 1
    22ce:	31 05       	cpc	r19, r1
    22d0:	69 f0       	breq	.+26     	; 0x22ec <MDIO_StderrGetPinValue+0x6e>
    22d2:	5c c0       	rjmp	.+184    	; 0x238c <MDIO_StderrGetPinValue+0x10e>
    22d4:	4e 81       	ldd	r20, Y+6	; 0x06
    22d6:	5f 81       	ldd	r21, Y+7	; 0x07
    22d8:	43 30       	cpi	r20, 0x03	; 3
    22da:	51 05       	cpc	r21, r1
    22dc:	79 f1       	breq	.+94     	; 0x233c <MDIO_StderrGetPinValue+0xbe>
    22de:	8e 81       	ldd	r24, Y+6	; 0x06
    22e0:	9f 81       	ldd	r25, Y+7	; 0x07
    22e2:	84 30       	cpi	r24, 0x04	; 4
    22e4:	91 05       	cpc	r25, r1
    22e6:	09 f4       	brne	.+2      	; 0x22ea <MDIO_StderrGetPinValue+0x6c>
    22e8:	3d c0       	rjmp	.+122    	; 0x2364 <MDIO_StderrGetPinValue+0xe6>
    22ea:	50 c0       	rjmp	.+160    	; 0x238c <MDIO_StderrGetPinValue+0x10e>
		{
			case MDIO_PORTA:*ARG_u8pValue=GET_BIT(GPIOA -> PIN,ARG_u8Pin);break;
    22ec:	e9 e3       	ldi	r30, 0x39	; 57
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	8d 81       	ldd	r24, Y+5	; 0x05
    22f8:	88 2f       	mov	r24, r24
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	a9 01       	movw	r20, r18
    22fe:	02 c0       	rjmp	.+4      	; 0x2304 <MDIO_StderrGetPinValue+0x86>
    2300:	55 95       	asr	r21
    2302:	47 95       	ror	r20
    2304:	8a 95       	dec	r24
    2306:	e2 f7       	brpl	.-8      	; 0x2300 <MDIO_StderrGetPinValue+0x82>
    2308:	ca 01       	movw	r24, r20
    230a:	81 70       	andi	r24, 0x01	; 1
    230c:	ea 81       	ldd	r30, Y+2	; 0x02
    230e:	fb 81       	ldd	r31, Y+3	; 0x03
    2310:	80 83       	st	Z, r24
    2312:	3e c0       	rjmp	.+124    	; 0x2390 <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTB:*ARG_u8pValue=GET_BIT(GPIOB -> PIN,ARG_u8Pin);break;
    2314:	e6 e3       	ldi	r30, 0x36	; 54
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	80 81       	ld	r24, Z
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	8d 81       	ldd	r24, Y+5	; 0x05
    2320:	88 2f       	mov	r24, r24
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	a9 01       	movw	r20, r18
    2326:	02 c0       	rjmp	.+4      	; 0x232c <MDIO_StderrGetPinValue+0xae>
    2328:	55 95       	asr	r21
    232a:	47 95       	ror	r20
    232c:	8a 95       	dec	r24
    232e:	e2 f7       	brpl	.-8      	; 0x2328 <MDIO_StderrGetPinValue+0xaa>
    2330:	ca 01       	movw	r24, r20
    2332:	81 70       	andi	r24, 0x01	; 1
    2334:	ea 81       	ldd	r30, Y+2	; 0x02
    2336:	fb 81       	ldd	r31, Y+3	; 0x03
    2338:	80 83       	st	Z, r24
    233a:	2a c0       	rjmp	.+84     	; 0x2390 <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTC:*ARG_u8pValue=GET_BIT(GPIOC -> PIN,ARG_u8Pin);break;
    233c:	e3 e3       	ldi	r30, 0x33	; 51
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	8d 81       	ldd	r24, Y+5	; 0x05
    2348:	88 2f       	mov	r24, r24
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a9 01       	movw	r20, r18
    234e:	02 c0       	rjmp	.+4      	; 0x2354 <MDIO_StderrGetPinValue+0xd6>
    2350:	55 95       	asr	r21
    2352:	47 95       	ror	r20
    2354:	8a 95       	dec	r24
    2356:	e2 f7       	brpl	.-8      	; 0x2350 <MDIO_StderrGetPinValue+0xd2>
    2358:	ca 01       	movw	r24, r20
    235a:	81 70       	andi	r24, 0x01	; 1
    235c:	ea 81       	ldd	r30, Y+2	; 0x02
    235e:	fb 81       	ldd	r31, Y+3	; 0x03
    2360:	80 83       	st	Z, r24
    2362:	16 c0       	rjmp	.+44     	; 0x2390 <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTD:*ARG_u8pValue=GET_BIT(GPIOD -> PIN,ARG_u8Pin);break;
    2364:	e0 e3       	ldi	r30, 0x30	; 48
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	a9 01       	movw	r20, r18
    2376:	02 c0       	rjmp	.+4      	; 0x237c <MDIO_StderrGetPinValue+0xfe>
    2378:	55 95       	asr	r21
    237a:	47 95       	ror	r20
    237c:	8a 95       	dec	r24
    237e:	e2 f7       	brpl	.-8      	; 0x2378 <MDIO_StderrGetPinValue+0xfa>
    2380:	ca 01       	movw	r24, r20
    2382:	81 70       	andi	r24, 0x01	; 1
    2384:	ea 81       	ldd	r30, Y+2	; 0x02
    2386:	fb 81       	ldd	r31, Y+3	; 0x03
    2388:	80 83       	st	Z, r24
    238a:	02 c0       	rjmp	.+4      	; 0x2390 <MDIO_StderrGetPinValue+0x112>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    238c:	81 e0       	ldi	r24, 0x01	; 1
    238e:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return L_StderrError;
    2390:	89 81       	ldd	r24, Y+1	; 0x01
}
    2392:	27 96       	adiw	r28, 0x07	; 7
    2394:	0f b6       	in	r0, 0x3f	; 63
    2396:	f8 94       	cli
    2398:	de bf       	out	0x3e, r29	; 62
    239a:	0f be       	out	0x3f, r0	; 63
    239c:	cd bf       	out	0x3d, r28	; 61
    239e:	cf 91       	pop	r28
    23a0:	df 91       	pop	r29
    23a2:	08 95       	ret

000023a4 <DIO_u8GetPinValue>:




u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    23a4:	df 93       	push	r29
    23a6:	cf 93       	push	r28
    23a8:	00 d0       	rcall	.+0      	; 0x23aa <DIO_u8GetPinValue+0x6>
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <DIO_u8GetPinValue+0x8>
    23ac:	0f 92       	push	r0
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	8a 83       	std	Y+2, r24	; 0x02
    23b4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_result;
	if(Copy_u8Pin<=MDIO_PIN7)
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	88 30       	cpi	r24, 0x08	; 8
    23ba:	08 f0       	brcs	.+2      	; 0x23be <DIO_u8GetPinValue+0x1a>
    23bc:	67 c0       	rjmp	.+206    	; 0x248c <DIO_u8GetPinValue+0xe8>
	{
		switch(Copy_u8Port)
    23be:	8a 81       	ldd	r24, Y+2	; 0x02
    23c0:	28 2f       	mov	r18, r24
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	3d 83       	std	Y+5, r19	; 0x05
    23c6:	2c 83       	std	Y+4, r18	; 0x04
    23c8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ca:	5d 81       	ldd	r21, Y+5	; 0x05
    23cc:	42 30       	cpi	r20, 0x02	; 2
    23ce:	51 05       	cpc	r21, r1
    23d0:	41 f1       	breq	.+80     	; 0x2422 <DIO_u8GetPinValue+0x7e>
    23d2:	8c 81       	ldd	r24, Y+4	; 0x04
    23d4:	9d 81       	ldd	r25, Y+5	; 0x05
    23d6:	83 30       	cpi	r24, 0x03	; 3
    23d8:	91 05       	cpc	r25, r1
    23da:	34 f4       	brge	.+12     	; 0x23e8 <DIO_u8GetPinValue+0x44>
    23dc:	2c 81       	ldd	r18, Y+4	; 0x04
    23de:	3d 81       	ldd	r19, Y+5	; 0x05
    23e0:	21 30       	cpi	r18, 0x01	; 1
    23e2:	31 05       	cpc	r19, r1
    23e4:	61 f0       	breq	.+24     	; 0x23fe <DIO_u8GetPinValue+0x5a>
    23e6:	52 c0       	rjmp	.+164    	; 0x248c <DIO_u8GetPinValue+0xe8>
    23e8:	4c 81       	ldd	r20, Y+4	; 0x04
    23ea:	5d 81       	ldd	r21, Y+5	; 0x05
    23ec:	43 30       	cpi	r20, 0x03	; 3
    23ee:	51 05       	cpc	r21, r1
    23f0:	51 f1       	breq	.+84     	; 0x2446 <DIO_u8GetPinValue+0xa2>
    23f2:	8c 81       	ldd	r24, Y+4	; 0x04
    23f4:	9d 81       	ldd	r25, Y+5	; 0x05
    23f6:	84 30       	cpi	r24, 0x04	; 4
    23f8:	91 05       	cpc	r25, r1
    23fa:	b9 f1       	breq	.+110    	; 0x246a <DIO_u8GetPinValue+0xc6>
    23fc:	47 c0       	rjmp	.+142    	; 0x248c <DIO_u8GetPinValue+0xe8>
		{
		case MDIO_PORTA:Local_result=GET_BIT(GPIOA -> PIN,Copy_u8Pin);break;
    23fe:	e9 e3       	ldi	r30, 0x39	; 57
    2400:	f0 e0       	ldi	r31, 0x00	; 0
    2402:	80 81       	ld	r24, Z
    2404:	28 2f       	mov	r18, r24
    2406:	30 e0       	ldi	r19, 0x00	; 0
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	88 2f       	mov	r24, r24
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	a9 01       	movw	r20, r18
    2410:	02 c0       	rjmp	.+4      	; 0x2416 <DIO_u8GetPinValue+0x72>
    2412:	55 95       	asr	r21
    2414:	47 95       	ror	r20
    2416:	8a 95       	dec	r24
    2418:	e2 f7       	brpl	.-8      	; 0x2412 <DIO_u8GetPinValue+0x6e>
    241a:	ca 01       	movw	r24, r20
    241c:	81 70       	andi	r24, 0x01	; 1
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	35 c0       	rjmp	.+106    	; 0x248c <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTB:Local_result=GET_BIT(GPIOB -> PIN,Copy_u8Pin);break;
    2422:	e6 e3       	ldi	r30, 0x36	; 54
    2424:	f0 e0       	ldi	r31, 0x00	; 0
    2426:	80 81       	ld	r24, Z
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	88 2f       	mov	r24, r24
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	a9 01       	movw	r20, r18
    2434:	02 c0       	rjmp	.+4      	; 0x243a <DIO_u8GetPinValue+0x96>
    2436:	55 95       	asr	r21
    2438:	47 95       	ror	r20
    243a:	8a 95       	dec	r24
    243c:	e2 f7       	brpl	.-8      	; 0x2436 <DIO_u8GetPinValue+0x92>
    243e:	ca 01       	movw	r24, r20
    2440:	81 70       	andi	r24, 0x01	; 1
    2442:	89 83       	std	Y+1, r24	; 0x01
    2444:	23 c0       	rjmp	.+70     	; 0x248c <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTC:Local_result=GET_BIT(GPIOC -> PIN,Copy_u8Pin);break;
    2446:	e3 e3       	ldi	r30, 0x33	; 51
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	28 2f       	mov	r18, r24
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	a9 01       	movw	r20, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <DIO_u8GetPinValue+0xba>
    245a:	55 95       	asr	r21
    245c:	47 95       	ror	r20
    245e:	8a 95       	dec	r24
    2460:	e2 f7       	brpl	.-8      	; 0x245a <DIO_u8GetPinValue+0xb6>
    2462:	ca 01       	movw	r24, r20
    2464:	81 70       	andi	r24, 0x01	; 1
    2466:	89 83       	std	Y+1, r24	; 0x01
    2468:	11 c0       	rjmp	.+34     	; 0x248c <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTD:Local_result=GET_BIT(GPIOD -> PIN,Copy_u8Pin);break;
    246a:	e0 e3       	ldi	r30, 0x30	; 48
    246c:	f0 e0       	ldi	r31, 0x00	; 0
    246e:	80 81       	ld	r24, Z
    2470:	28 2f       	mov	r18, r24
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	8b 81       	ldd	r24, Y+3	; 0x03
    2476:	88 2f       	mov	r24, r24
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	a9 01       	movw	r20, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <DIO_u8GetPinValue+0xde>
    247e:	55 95       	asr	r21
    2480:	47 95       	ror	r20
    2482:	8a 95       	dec	r24
    2484:	e2 f7       	brpl	.-8      	; 0x247e <DIO_u8GetPinValue+0xda>
    2486:	ca 01       	movw	r24, r20
    2488:	81 70       	andi	r24, 0x01	; 1
    248a:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_result;
    248c:	89 81       	ldd	r24, Y+1	; 0x01
}
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	0f 90       	pop	r0
    2494:	0f 90       	pop	r0
    2496:	0f 90       	pop	r0
    2498:	cf 91       	pop	r28
    249a:	df 91       	pop	r29
    249c:	08 95       	ret

0000249e <MGIE_voidEnable>:
#include "MGIE_private.h"
#include "MGIE_interface.h"


void MGIE_voidEnable(void)
{
    249e:	df 93       	push	r29
    24a0:	cf 93       	push	r28
    24a2:	cd b7       	in	r28, 0x3d	; 61
    24a4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    24a6:	af e5       	ldi	r26, 0x5F	; 95
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	ef e5       	ldi	r30, 0x5F	; 95
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	80 68       	ori	r24, 0x80	; 128
    24b2:	8c 93       	st	X, r24
}
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <MGIE_voidDisable>:
void MGIE_voidDisable(void)
{
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I);
    24c2:	af e5       	ldi	r26, 0x5F	; 95
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ef e5       	ldi	r30, 0x5F	; 95
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	8f 77       	andi	r24, 0x7F	; 127
    24ce:	8c 93       	st	X, r24
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	08 95       	ret

000024d6 <MTIM_stderrInit>:
volatile static u16 MTIM_u16Timer0OVFCount;
volatile static u8 MTIM_u8Timer0Preload;


STD_error_t MTIM_stderrInit(u8 ARG_u8TimerNo,u8 ARG_u8ClockSource,u8 ARG_u8Mode,u8 ARG_u8HWPinMode)
{
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	2b 97       	sbiw	r28, 0x0b	; 11
    24e0:	0f b6       	in	r0, 0x3f	; 63
    24e2:	f8 94       	cli
    24e4:	de bf       	out	0x3e, r29	; 62
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	cd bf       	out	0x3d, r28	; 61
    24ea:	8a 83       	std	Y+2, r24	; 0x02
    24ec:	6b 83       	std	Y+3, r22	; 0x03
    24ee:	4c 83       	std	Y+4, r20	; 0x04
    24f0:	2d 83       	std	Y+5, r18	; 0x05
	STD_error_t L_stderrState=E_OK;
    24f2:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8TimerNo<=2)&&(ARG_u8ClockSource<=7)&&(ARG_u8Mode<=15)&&(ARG_u8HWPinMode<=3))
    24f4:	8a 81       	ldd	r24, Y+2	; 0x02
    24f6:	83 30       	cpi	r24, 0x03	; 3
    24f8:	08 f0       	brcs	.+2      	; 0x24fc <MTIM_stderrInit+0x26>
    24fa:	0a c1       	rjmp	.+532    	; 0x2710 <MTIM_stderrInit+0x23a>
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	88 30       	cpi	r24, 0x08	; 8
    2500:	08 f0       	brcs	.+2      	; 0x2504 <MTIM_stderrInit+0x2e>
    2502:	06 c1       	rjmp	.+524    	; 0x2710 <MTIM_stderrInit+0x23a>
    2504:	8c 81       	ldd	r24, Y+4	; 0x04
    2506:	80 31       	cpi	r24, 0x10	; 16
    2508:	08 f0       	brcs	.+2      	; 0x250c <MTIM_stderrInit+0x36>
    250a:	02 c1       	rjmp	.+516    	; 0x2710 <MTIM_stderrInit+0x23a>
    250c:	8d 81       	ldd	r24, Y+5	; 0x05
    250e:	84 30       	cpi	r24, 0x04	; 4
    2510:	08 f0       	brcs	.+2      	; 0x2514 <MTIM_stderrInit+0x3e>
    2512:	fe c0       	rjmp	.+508    	; 0x2710 <MTIM_stderrInit+0x23a>
	{
		switch(ARG_u8TimerNo)
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	28 2f       	mov	r18, r24
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	3b 87       	std	Y+11, r19	; 0x0b
    251c:	2a 87       	std	Y+10, r18	; 0x0a
    251e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2520:	9b 85       	ldd	r25, Y+11	; 0x0b
    2522:	81 30       	cpi	r24, 0x01	; 1
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <MTIM_stderrInit+0x54>
    2528:	7e c0       	rjmp	.+252    	; 0x2626 <MTIM_stderrInit+0x150>
    252a:	2a 85       	ldd	r18, Y+10	; 0x0a
    252c:	3b 85       	ldd	r19, Y+11	; 0x0b
    252e:	22 30       	cpi	r18, 0x02	; 2
    2530:	31 05       	cpc	r19, r1
    2532:	09 f4       	brne	.+2      	; 0x2536 <MTIM_stderrInit+0x60>
    2534:	ef c0       	rjmp	.+478    	; 0x2714 <MTIM_stderrInit+0x23e>
    2536:	8a 85       	ldd	r24, Y+10	; 0x0a
    2538:	9b 85       	ldd	r25, Y+11	; 0x0b
    253a:	00 97       	sbiw	r24, 0x00	; 0
    253c:	09 f0       	breq	.+2      	; 0x2540 <MTIM_stderrInit+0x6a>
    253e:	e5 c0       	rjmp	.+458    	; 0x270a <MTIM_stderrInit+0x234>
		{
		case MTIM_TIMER0:
		{
			switch(ARG_u8Mode)
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	39 87       	std	Y+9, r19	; 0x09
    2548:	28 87       	std	Y+8, r18	; 0x08
    254a:	88 85       	ldd	r24, Y+8	; 0x08
    254c:	99 85       	ldd	r25, Y+9	; 0x09
    254e:	81 30       	cpi	r24, 0x01	; 1
    2550:	91 05       	cpc	r25, r1
    2552:	21 f1       	breq	.+72     	; 0x259c <MTIM_stderrInit+0xc6>
    2554:	28 85       	ldd	r18, Y+8	; 0x08
    2556:	39 85       	ldd	r19, Y+9	; 0x09
    2558:	22 30       	cpi	r18, 0x02	; 2
    255a:	31 05       	cpc	r19, r1
    255c:	2c f4       	brge	.+10     	; 0x2568 <MTIM_stderrInit+0x92>
    255e:	88 85       	ldd	r24, Y+8	; 0x08
    2560:	99 85       	ldd	r25, Y+9	; 0x09
    2562:	00 97       	sbiw	r24, 0x00	; 0
    2564:	61 f0       	breq	.+24     	; 0x257e <MTIM_stderrInit+0xa8>
    2566:	47 c0       	rjmp	.+142    	; 0x25f6 <MTIM_stderrInit+0x120>
    2568:	28 85       	ldd	r18, Y+8	; 0x08
    256a:	39 85       	ldd	r19, Y+9	; 0x09
    256c:	22 30       	cpi	r18, 0x02	; 2
    256e:	31 05       	cpc	r19, r1
    2570:	21 f1       	breq	.+72     	; 0x25ba <MTIM_stderrInit+0xe4>
    2572:	88 85       	ldd	r24, Y+8	; 0x08
    2574:	99 85       	ldd	r25, Y+9	; 0x09
    2576:	83 30       	cpi	r24, 0x03	; 3
    2578:	91 05       	cpc	r25, r1
    257a:	71 f1       	breq	.+92     	; 0x25d8 <MTIM_stderrInit+0x102>
    257c:	3c c0       	rjmp	.+120    	; 0x25f6 <MTIM_stderrInit+0x120>
			{
			case MTIM_MODE_NORMAL:
			{
				CLEAR_BIT(TCCR0,WGM00);
    257e:	a3 e5       	ldi	r26, 0x53	; 83
    2580:	b0 e0       	ldi	r27, 0x00	; 0
    2582:	e3 e5       	ldi	r30, 0x53	; 83
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	80 81       	ld	r24, Z
    2588:	8f 7b       	andi	r24, 0xBF	; 191
    258a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    258c:	a3 e5       	ldi	r26, 0x53	; 83
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e3 e5       	ldi	r30, 0x53	; 83
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	87 7f       	andi	r24, 0xF7	; 247
    2598:	8c 93       	st	X, r24
    259a:	2f c0       	rjmp	.+94     	; 0x25fa <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_CTC:
			{
				CLEAR_BIT(TCCR0,WGM00);
    259c:	a3 e5       	ldi	r26, 0x53	; 83
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e3 e5       	ldi	r30, 0x53	; 83
    25a2:	f0 e0       	ldi	r31, 0x00	; 0
    25a4:	80 81       	ld	r24, Z
    25a6:	8f 7b       	andi	r24, 0xBF	; 191
    25a8:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    25aa:	a3 e5       	ldi	r26, 0x53	; 83
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	e3 e5       	ldi	r30, 0x53	; 83
    25b0:	f0 e0       	ldi	r31, 0x00	; 0
    25b2:	80 81       	ld	r24, Z
    25b4:	88 60       	ori	r24, 0x08	; 8
    25b6:	8c 93       	st	X, r24
    25b8:	20 c0       	rjmp	.+64     	; 0x25fa <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_FASTPWM:
			{
				SET_BIT(TCCR0,WGM00);
    25ba:	a3 e5       	ldi	r26, 0x53	; 83
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	e3 e5       	ldi	r30, 0x53	; 83
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	80 64       	ori	r24, 0x40	; 64
    25c6:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    25c8:	a3 e5       	ldi	r26, 0x53	; 83
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e3 e5       	ldi	r30, 0x53	; 83
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	88 60       	ori	r24, 0x08	; 8
    25d4:	8c 93       	st	X, r24
    25d6:	11 c0       	rjmp	.+34     	; 0x25fa <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_PHASECORRECTPWM:
			{
				SET_BIT(TCCR0,WGM00);
    25d8:	a3 e5       	ldi	r26, 0x53	; 83
    25da:	b0 e0       	ldi	r27, 0x00	; 0
    25dc:	e3 e5       	ldi	r30, 0x53	; 83
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	80 81       	ld	r24, Z
    25e2:	80 64       	ori	r24, 0x40	; 64
    25e4:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    25e6:	a3 e5       	ldi	r26, 0x53	; 83
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	e3 e5       	ldi	r30, 0x53	; 83
    25ec:	f0 e0       	ldi	r31, 0x00	; 0
    25ee:	80 81       	ld	r24, Z
    25f0:	87 7f       	andi	r24, 0xF7	; 247
    25f2:	8c 93       	st	X, r24
    25f4:	02 c0       	rjmp	.+4      	; 0x25fa <MTIM_stderrInit+0x124>
				break;
			}
			default:L_stderrState=E_NOK;break;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	89 83       	std	Y+1, r24	; 0x01
			}
			TCCR0=((TCCR0&0xCF)|(ARG_u8HWPinMode<<4));
    25fa:	a3 e5       	ldi	r26, 0x53	; 83
    25fc:	b0 e0       	ldi	r27, 0x00	; 0
    25fe:	e3 e5       	ldi	r30, 0x53	; 83
    2600:	f0 e0       	ldi	r31, 0x00	; 0
    2602:	80 81       	ld	r24, Z
    2604:	28 2f       	mov	r18, r24
    2606:	2f 7c       	andi	r18, 0xCF	; 207
    2608:	8d 81       	ldd	r24, Y+5	; 0x05
    260a:	88 2f       	mov	r24, r24
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	82 95       	swap	r24
    2610:	92 95       	swap	r25
    2612:	90 7f       	andi	r25, 0xF0	; 240
    2614:	98 27       	eor	r25, r24
    2616:	80 7f       	andi	r24, 0xF0	; 240
    2618:	98 27       	eor	r25, r24
    261a:	82 2b       	or	r24, r18
    261c:	8c 93       	st	X, r24
			MTIM_u8Timer0Clock=ARG_u8ClockSource;
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	80 93 d6 01 	sts	0x01D6, r24
    2624:	77 c0       	rjmp	.+238    	; 0x2714 <MTIM_stderrInit+0x23e>
			break;
		}
		case MTIM_TIMER1:
		{
			switch(ARG_u8Mode)
    2626:	8c 81       	ldd	r24, Y+4	; 0x04
    2628:	28 2f       	mov	r18, r24
    262a:	30 e0       	ldi	r19, 0x00	; 0
    262c:	3f 83       	std	Y+7, r19	; 0x07
    262e:	2e 83       	std	Y+6, r18	; 0x06
    2630:	8e 81       	ldd	r24, Y+6	; 0x06
    2632:	9f 81       	ldd	r25, Y+7	; 0x07
    2634:	00 97       	sbiw	r24, 0x00	; 0
    2636:	31 f0       	breq	.+12     	; 0x2644 <MTIM_stderrInit+0x16e>
    2638:	2e 81       	ldd	r18, Y+6	; 0x06
    263a:	3f 81       	ldd	r19, Y+7	; 0x07
    263c:	2e 30       	cpi	r18, 0x0E	; 14
    263e:	31 05       	cpc	r19, r1
    2640:	f1 f0       	breq	.+60     	; 0x267e <MTIM_stderrInit+0x1a8>
    2642:	3a c0       	rjmp	.+116    	; 0x26b8 <MTIM_stderrInit+0x1e2>
			{
			case MTIM_MODE_NORMAL:
			{
				CLEAR_BIT(TCCR1A,WGM10);
    2644:	af e4       	ldi	r26, 0x4F	; 79
    2646:	b0 e0       	ldi	r27, 0x00	; 0
    2648:	ef e4       	ldi	r30, 0x4F	; 79
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	8e 7f       	andi	r24, 0xFE	; 254
    2650:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    2652:	af e4       	ldi	r26, 0x4F	; 79
    2654:	b0 e0       	ldi	r27, 0x00	; 0
    2656:	ef e4       	ldi	r30, 0x4F	; 79
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	80 81       	ld	r24, Z
    265c:	8d 7f       	andi	r24, 0xFD	; 253
    265e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    2660:	ae e4       	ldi	r26, 0x4E	; 78
    2662:	b0 e0       	ldi	r27, 0x00	; 0
    2664:	ee e4       	ldi	r30, 0x4E	; 78
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	80 81       	ld	r24, Z
    266a:	87 7f       	andi	r24, 0xF7	; 247
    266c:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    266e:	ae e4       	ldi	r26, 0x4E	; 78
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ee e4       	ldi	r30, 0x4E	; 78
    2674:	f0 e0       	ldi	r31, 0x00	; 0
    2676:	80 81       	ld	r24, Z
    2678:	8f 7e       	andi	r24, 0xEF	; 239
    267a:	8c 93       	st	X, r24
    267c:	1f c0       	rjmp	.+62     	; 0x26bc <MTIM_stderrInit+0x1e6>
				break;
			}
			case MTIM_MODE_FASTPWMCTRLTOP:
			{
				CLEAR_BIT(TCCR1A,WGM10);
    267e:	af e4       	ldi	r26, 0x4F	; 79
    2680:	b0 e0       	ldi	r27, 0x00	; 0
    2682:	ef e4       	ldi	r30, 0x4F	; 79
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	80 81       	ld	r24, Z
    2688:	8e 7f       	andi	r24, 0xFE	; 254
    268a:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    268c:	af e4       	ldi	r26, 0x4F	; 79
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	ef e4       	ldi	r30, 0x4F	; 79
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	82 60       	ori	r24, 0x02	; 2
    2698:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    269a:	ae e4       	ldi	r26, 0x4E	; 78
    269c:	b0 e0       	ldi	r27, 0x00	; 0
    269e:	ee e4       	ldi	r30, 0x4E	; 78
    26a0:	f0 e0       	ldi	r31, 0x00	; 0
    26a2:	80 81       	ld	r24, Z
    26a4:	88 60       	ori	r24, 0x08	; 8
    26a6:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    26a8:	ae e4       	ldi	r26, 0x4E	; 78
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	ee e4       	ldi	r30, 0x4E	; 78
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	80 81       	ld	r24, Z
    26b2:	80 61       	ori	r24, 0x10	; 16
    26b4:	8c 93       	st	X, r24
    26b6:	02 c0       	rjmp	.+4      	; 0x26bc <MTIM_stderrInit+0x1e6>
				break;
			}
			default:L_stderrState=E_NOK;break;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	89 83       	std	Y+1, r24	; 0x01
			}
			if(ARG_u8HWPinMode==MTIM_HWPIN_DISCONNECTED)
    26bc:	8d 81       	ldd	r24, Y+5	; 0x05
    26be:	88 23       	and	r24, r24
    26c0:	79 f4       	brne	.+30     	; 0x26e0 <MTIM_stderrInit+0x20a>
			{
				CLEAR_BIT(TCCR1A,COM1A1);
    26c2:	af e4       	ldi	r26, 0x4F	; 79
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	ef e4       	ldi	r30, 0x4F	; 79
    26c8:	f0 e0       	ldi	r31, 0x00	; 0
    26ca:	80 81       	ld	r24, Z
    26cc:	8f 77       	andi	r24, 0x7F	; 127
    26ce:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    26d0:	af e4       	ldi	r26, 0x4F	; 79
    26d2:	b0 e0       	ldi	r27, 0x00	; 0
    26d4:	ef e4       	ldi	r30, 0x4F	; 79
    26d6:	f0 e0       	ldi	r31, 0x00	; 0
    26d8:	80 81       	ld	r24, Z
    26da:	8f 7b       	andi	r24, 0xBF	; 191
    26dc:	8c 93       	st	X, r24
    26de:	11 c0       	rjmp	.+34     	; 0x2702 <MTIM_stderrInit+0x22c>
			}
			else if(ARG_u8HWPinMode==MTIM_HWPIN_NONINVERTING_PWM)
    26e0:	8d 81       	ldd	r24, Y+5	; 0x05
    26e2:	82 30       	cpi	r24, 0x02	; 2
    26e4:	71 f4       	brne	.+28     	; 0x2702 <MTIM_stderrInit+0x22c>
			{
				SET_BIT(TCCR1A,COM1A1);
    26e6:	af e4       	ldi	r26, 0x4F	; 79
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	ef e4       	ldi	r30, 0x4F	; 79
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	80 68       	ori	r24, 0x80	; 128
    26f2:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    26f4:	af e4       	ldi	r26, 0x4F	; 79
    26f6:	b0 e0       	ldi	r27, 0x00	; 0
    26f8:	ef e4       	ldi	r30, 0x4F	; 79
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	80 81       	ld	r24, Z
    26fe:	8f 7b       	andi	r24, 0xBF	; 191
    2700:	8c 93       	st	X, r24
			}
			else
			{
				// add next options in the data sheet
			}
			MTIM_u8Timer1Clock=ARG_u8ClockSource;
    2702:	8b 81       	ldd	r24, Y+3	; 0x03
    2704:	80 93 d5 01 	sts	0x01D5, r24
    2708:	05 c0       	rjmp	.+10     	; 0x2714 <MTIM_stderrInit+0x23e>
		}
		case MTIM_TIMER2:
		{
			break;
		}
		default:L_stderrState=E_NOK;break;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	02 c0       	rjmp	.+4      	; 0x2714 <MTIM_stderrInit+0x23e>
		}
	}
	else
	{
		L_stderrState=E_NOK;
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2714:	89 81       	ldd	r24, Y+1	; 0x01
}
    2716:	2b 96       	adiw	r28, 0x0b	; 11
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	f8 94       	cli
    271c:	de bf       	out	0x3e, r29	; 62
    271e:	0f be       	out	0x3f, r0	; 63
    2720:	cd bf       	out	0x3d, r28	; 61
    2722:	cf 91       	pop	r28
    2724:	df 91       	pop	r29
    2726:	08 95       	ret

00002728 <MTIM_voidForceOutputCompare>:
void MTIM_voidForceOutputCompare(void)
{
    2728:	df 93       	push	r29
    272a:	cf 93       	push	r28
    272c:	cd b7       	in	r28, 0x3d	; 61
    272e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,FOC0);
    2730:	a3 e5       	ldi	r26, 0x53	; 83
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	e3 e5       	ldi	r30, 0x53	; 83
    2736:	f0 e0       	ldi	r31, 0x00	; 0
    2738:	80 81       	ld	r24, Z
    273a:	80 68       	ori	r24, 0x80	; 128
    273c:	8c 93       	st	X, r24
}
    273e:	cf 91       	pop	r28
    2740:	df 91       	pop	r29
    2742:	08 95       	ret

00002744 <MTIM_stderrEnableInterrupt>:
STD_error_t MTIM_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    2744:	df 93       	push	r29
    2746:	cf 93       	push	r28
    2748:	00 d0       	rcall	.+0      	; 0x274a <MTIM_stderrEnableInterrupt+0x6>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2750:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    2752:	8a 81       	ldd	r24, Y+2	; 0x02
    2754:	88 30       	cpi	r24, 0x08	; 8
    2756:	a0 f4       	brcc	.+40     	; 0x2780 <MTIM_stderrEnableInterrupt+0x3c>
	{
		SET_BIT(TIMSK,ARG_u8InterruptSource);
    2758:	a9 e5       	ldi	r26, 0x59	; 89
    275a:	b0 e0       	ldi	r27, 0x00	; 0
    275c:	e9 e5       	ldi	r30, 0x59	; 89
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	80 81       	ld	r24, Z
    2762:	48 2f       	mov	r20, r24
    2764:	8a 81       	ldd	r24, Y+2	; 0x02
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	81 e0       	ldi	r24, 0x01	; 1
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	02 2e       	mov	r0, r18
    2770:	02 c0       	rjmp	.+4      	; 0x2776 <MTIM_stderrEnableInterrupt+0x32>
    2772:	88 0f       	add	r24, r24
    2774:	99 1f       	adc	r25, r25
    2776:	0a 94       	dec	r0
    2778:	e2 f7       	brpl	.-8      	; 0x2772 <MTIM_stderrEnableInterrupt+0x2e>
    277a:	84 2b       	or	r24, r20
    277c:	8c 93       	st	X, r24
    277e:	02 c0       	rjmp	.+4      	; 0x2784 <MTIM_stderrEnableInterrupt+0x40>
	}
	else
	{
		L_stderrState=E_NOK;
    2780:	81 e0       	ldi	r24, 0x01	; 1
    2782:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2784:	89 81       	ldd	r24, Y+1	; 0x01
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	cf 91       	pop	r28
    278c:	df 91       	pop	r29
    278e:	08 95       	ret

00002790 <MTIM_stderrDisableInterrupt>:
STD_error_t MTIM_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    2790:	df 93       	push	r29
    2792:	cf 93       	push	r28
    2794:	00 d0       	rcall	.+0      	; 0x2796 <MTIM_stderrDisableInterrupt+0x6>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    279c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    279e:	8a 81       	ldd	r24, Y+2	; 0x02
    27a0:	88 30       	cpi	r24, 0x08	; 8
    27a2:	a8 f4       	brcc	.+42     	; 0x27ce <MTIM_stderrDisableInterrupt+0x3e>
	{
		CLEAR_BIT(TIMSK,ARG_u8InterruptSource);
    27a4:	a9 e5       	ldi	r26, 0x59	; 89
    27a6:	b0 e0       	ldi	r27, 0x00	; 0
    27a8:	e9 e5       	ldi	r30, 0x59	; 89
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	48 2f       	mov	r20, r24
    27b0:	8a 81       	ldd	r24, Y+2	; 0x02
    27b2:	28 2f       	mov	r18, r24
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	02 2e       	mov	r0, r18
    27bc:	02 c0       	rjmp	.+4      	; 0x27c2 <MTIM_stderrDisableInterrupt+0x32>
    27be:	88 0f       	add	r24, r24
    27c0:	99 1f       	adc	r25, r25
    27c2:	0a 94       	dec	r0
    27c4:	e2 f7       	brpl	.-8      	; 0x27be <MTIM_stderrDisableInterrupt+0x2e>
    27c6:	80 95       	com	r24
    27c8:	84 23       	and	r24, r20
    27ca:	8c 93       	st	X, r24
    27cc:	02 c0       	rjmp	.+4      	; 0x27d2 <MTIM_stderrDisableInterrupt+0x42>
	}
	else
	{
		L_stderrState=E_NOK;
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
}
    27d4:	0f 90       	pop	r0
    27d6:	0f 90       	pop	r0
    27d8:	cf 91       	pop	r28
    27da:	df 91       	pop	r29
    27dc:	08 95       	ret

000027de <MTIM_stderrSetCallBack>:
STD_error_t MTIM_stderrSetCallBack(u8 ARG_u8InterruptSource,void (*ARG_pvoidfUserFunction)(void))
{
    27de:	df 93       	push	r29
    27e0:	cf 93       	push	r28
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <MTIM_stderrSetCallBack+0x6>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <MTIM_stderrSetCallBack+0x8>
    27e6:	00 d0       	rcall	.+0      	; 0x27e8 <MTIM_stderrSetCallBack+0xa>
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
    27ec:	8a 83       	std	Y+2, r24	; 0x02
    27ee:	7c 83       	std	Y+4, r23	; 0x04
    27f0:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    27f2:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL)
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	9c 81       	ldd	r25, Y+4	; 0x04
    27f8:	00 97       	sbiw	r24, 0x00	; 0
    27fa:	59 f1       	breq	.+86     	; 0x2852 <MTIM_stderrSetCallBack+0x74>
	{
		switch(ARG_u8InterruptSource)
    27fc:	8a 81       	ldd	r24, Y+2	; 0x02
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	3e 83       	std	Y+6, r19	; 0x06
    2804:	2d 83       	std	Y+5, r18	; 0x05
    2806:	8d 81       	ldd	r24, Y+5	; 0x05
    2808:	9e 81       	ldd	r25, Y+6	; 0x06
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	91 05       	cpc	r25, r1
    280e:	81 f0       	breq	.+32     	; 0x2830 <MTIM_stderrSetCallBack+0x52>
    2810:	2d 81       	ldd	r18, Y+5	; 0x05
    2812:	3e 81       	ldd	r19, Y+6	; 0x06
    2814:	25 30       	cpi	r18, 0x05	; 5
    2816:	31 05       	cpc	r19, r1
    2818:	91 f0       	breq	.+36     	; 0x283e <MTIM_stderrSetCallBack+0x60>
    281a:	8d 81       	ldd	r24, Y+5	; 0x05
    281c:	9e 81       	ldd	r25, Y+6	; 0x06
    281e:	00 97       	sbiw	r24, 0x00	; 0
    2820:	a9 f4       	brne	.+42     	; 0x284c <MTIM_stderrSetCallBack+0x6e>
		{
		case MTIM_INTERRUPT_T0_OVF:MTIMER0_pvoidfUserFunctionT0OVF=ARG_pvoidfUserFunction;break;
    2822:	8b 81       	ldd	r24, Y+3	; 0x03
    2824:	9c 81       	ldd	r25, Y+4	; 0x04
    2826:	90 93 c5 01 	sts	0x01C5, r25
    282a:	80 93 c4 01 	sts	0x01C4, r24
    282e:	13 c0       	rjmp	.+38     	; 0x2856 <MTIM_stderrSetCallBack+0x78>
		case MTIM_INTERRUPT_T0_OCM:MTIMER0_pvoidfUserFunctionT0OCM=ARG_pvoidfUserFunction;break;
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	90 93 c7 01 	sts	0x01C7, r25
    2838:	80 93 c6 01 	sts	0x01C6, r24
    283c:	0c c0       	rjmp	.+24     	; 0x2856 <MTIM_stderrSetCallBack+0x78>
		case MTIM_INTERRUPT_T1_ICU:MTIMER1_pvoidfUserFunctionT1ICU=ARG_pvoidfUserFunction;break;
    283e:	8b 81       	ldd	r24, Y+3	; 0x03
    2840:	9c 81       	ldd	r25, Y+4	; 0x04
    2842:	90 93 c9 01 	sts	0x01C9, r25
    2846:	80 93 c8 01 	sts	0x01C8, r24
    284a:	05 c0       	rjmp	.+10     	; 0x2856 <MTIM_stderrSetCallBack+0x78>
		default:L_stderrState=E_NOK;break;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	89 83       	std	Y+1, r24	; 0x01
    2850:	02 c0       	rjmp	.+4      	; 0x2856 <MTIM_stderrSetCallBack+0x78>
		}
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    2852:	82 e0       	ldi	r24, 0x02	; 2
    2854:	89 83       	std	Y+1, r24	; 0x01
	}	
	return L_stderrState;	
    2856:	89 81       	ldd	r24, Y+1	; 0x01
}
    2858:	26 96       	adiw	r28, 0x06	; 6
    285a:	0f b6       	in	r0, 0x3f	; 63
    285c:	f8 94       	cli
    285e:	de bf       	out	0x3e, r29	; 62
    2860:	0f be       	out	0x3f, r0	; 63
    2862:	cd bf       	out	0x3d, r28	; 61
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <MTIM_stderrStartTimer>:
STD_error_t MTIM_stderrStartTimer(u8 ARG_u8TimerNo)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	00 d0       	rcall	.+0      	; 0x2870 <MTIM_stderrStartTimer+0x6>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <MTIM_stderrStartTimer+0x8>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2878:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    287a:	8a 81       	ldd	r24, Y+2	; 0x02
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	3c 83       	std	Y+4, r19	; 0x04
    2882:	2b 83       	std	Y+3, r18	; 0x03
    2884:	8b 81       	ldd	r24, Y+3	; 0x03
    2886:	9c 81       	ldd	r25, Y+4	; 0x04
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	91 05       	cpc	r25, r1
    288c:	a9 f0       	breq	.+42     	; 0x28b8 <MTIM_stderrStartTimer+0x4e>
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	22 30       	cpi	r18, 0x02	; 2
    2894:	31 05       	cpc	r19, r1
    2896:	f1 f0       	breq	.+60     	; 0x28d4 <MTIM_stderrStartTimer+0x6a>
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	9c 81       	ldd	r25, Y+4	; 0x04
    289c:	00 97       	sbiw	r24, 0x00	; 0
    289e:	c1 f4       	brne	.+48     	; 0x28d0 <MTIM_stderrStartTimer+0x66>
	{
	case MTIM_TIMER0:
	{
		TCCR0=((TCCR0&0xF8)|MTIM_u8Timer0Clock);
    28a0:	a3 e5       	ldi	r26, 0x53	; 83
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	e3 e5       	ldi	r30, 0x53	; 83
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	98 2f       	mov	r25, r24
    28ac:	98 7f       	andi	r25, 0xF8	; 248
    28ae:	80 91 d6 01 	lds	r24, 0x01D6
    28b2:	89 2b       	or	r24, r25
    28b4:	8c 93       	st	X, r24
    28b6:	0e c0       	rjmp	.+28     	; 0x28d4 <MTIM_stderrStartTimer+0x6a>
		break;
	}
	case  MTIM_TIMER1:
	{

		TCCR1B=((TCCR1B&0xF8)|MTIM_u8Timer1Clock);
    28b8:	ae e4       	ldi	r26, 0x4E	; 78
    28ba:	b0 e0       	ldi	r27, 0x00	; 0
    28bc:	ee e4       	ldi	r30, 0x4E	; 78
    28be:	f0 e0       	ldi	r31, 0x00	; 0
    28c0:	80 81       	ld	r24, Z
    28c2:	98 2f       	mov	r25, r24
    28c4:	98 7f       	andi	r25, 0xF8	; 248
    28c6:	80 91 d5 01 	lds	r24, 0x01D5
    28ca:	89 2b       	or	r24, r25
    28cc:	8c 93       	st	X, r24
    28ce:	02 c0       	rjmp	.+4      	; 0x28d4 <MTIM_stderrStartTimer+0x6a>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    28d0:	81 e0       	ldi	r24, 0x01	; 1
    28d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
}
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	0f 90       	pop	r0
    28dc:	0f 90       	pop	r0
    28de:	cf 91       	pop	r28
    28e0:	df 91       	pop	r29
    28e2:	08 95       	ret

000028e4 <MTIM_stderrStopTimer>:
STD_error_t MTIM_stderrStopTimer(u8 ARG_u8TimerNo)
{
    28e4:	df 93       	push	r29
    28e6:	cf 93       	push	r28
    28e8:	00 d0       	rcall	.+0      	; 0x28ea <MTIM_stderrStopTimer+0x6>
    28ea:	00 d0       	rcall	.+0      	; 0x28ec <MTIM_stderrStopTimer+0x8>
    28ec:	cd b7       	in	r28, 0x3d	; 61
    28ee:	de b7       	in	r29, 0x3e	; 62
    28f0:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    28f2:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    28f4:	8a 81       	ldd	r24, Y+2	; 0x02
    28f6:	28 2f       	mov	r18, r24
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	3c 83       	std	Y+4, r19	; 0x04
    28fc:	2b 83       	std	Y+3, r18	; 0x03
    28fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2900:	9c 81       	ldd	r25, Y+4	; 0x04
    2902:	81 30       	cpi	r24, 0x01	; 1
    2904:	91 05       	cpc	r25, r1
    2906:	89 f0       	breq	.+34     	; 0x292a <MTIM_stderrStopTimer+0x46>
    2908:	2b 81       	ldd	r18, Y+3	; 0x03
    290a:	3c 81       	ldd	r19, Y+4	; 0x04
    290c:	22 30       	cpi	r18, 0x02	; 2
    290e:	31 05       	cpc	r19, r1
    2910:	b1 f0       	breq	.+44     	; 0x293e <MTIM_stderrStopTimer+0x5a>
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	81 f4       	brne	.+32     	; 0x293a <MTIM_stderrStopTimer+0x56>
	{
	case MTIM_TIMER0:
	{
		TCCR0=((TCCR0&0xF8)|MTIM_CS_NO_CLOCK);
    291a:	a3 e5       	ldi	r26, 0x53	; 83
    291c:	b0 e0       	ldi	r27, 0x00	; 0
    291e:	e3 e5       	ldi	r30, 0x53	; 83
    2920:	f0 e0       	ldi	r31, 0x00	; 0
    2922:	80 81       	ld	r24, Z
    2924:	88 7f       	andi	r24, 0xF8	; 248
    2926:	8c 93       	st	X, r24
    2928:	0a c0       	rjmp	.+20     	; 0x293e <MTIM_stderrStopTimer+0x5a>
		break;
	}
	case  MTIM_TIMER1:
	{
		TCCR1B=((TCCR1B&0xF8)|MTIM_CS_NO_CLOCK);
    292a:	ae e4       	ldi	r26, 0x4E	; 78
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	ee e4       	ldi	r30, 0x4E	; 78
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	80 81       	ld	r24, Z
    2934:	88 7f       	andi	r24, 0xF8	; 248
    2936:	8c 93       	st	X, r24
    2938:	02 c0       	rjmp	.+4      	; 0x293e <MTIM_stderrStopTimer+0x5a>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    293e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2940:	0f 90       	pop	r0
    2942:	0f 90       	pop	r0
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	cf 91       	pop	r28
    294a:	df 91       	pop	r29
    294c:	08 95       	ret

0000294e <MTIM_stderrSetOCR>:
STD_error_t	MTIM_stderrSetOCR(u8 ARG_u8TimerNo,u16 ARG_u16OCRValue)
{
    294e:	df 93       	push	r29
    2950:	cf 93       	push	r28
    2952:	00 d0       	rcall	.+0      	; 0x2954 <MTIM_stderrSetOCR+0x6>
    2954:	00 d0       	rcall	.+0      	; 0x2956 <MTIM_stderrSetOCR+0x8>
    2956:	00 d0       	rcall	.+0      	; 0x2958 <MTIM_stderrSetOCR+0xa>
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	8a 83       	std	Y+2, r24	; 0x02
    295e:	7c 83       	std	Y+4, r23	; 0x04
    2960:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    2962:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    2964:	8a 81       	ldd	r24, Y+2	; 0x02
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3e 83       	std	Y+6, r19	; 0x06
    296c:	2d 83       	std	Y+5, r18	; 0x05
    296e:	8d 81       	ldd	r24, Y+5	; 0x05
    2970:	9e 81       	ldd	r25, Y+6	; 0x06
    2972:	81 30       	cpi	r24, 0x01	; 1
    2974:	91 05       	cpc	r25, r1
    2976:	71 f0       	breq	.+28     	; 0x2994 <MTIM_stderrSetOCR+0x46>
    2978:	2d 81       	ldd	r18, Y+5	; 0x05
    297a:	3e 81       	ldd	r19, Y+6	; 0x06
    297c:	22 30       	cpi	r18, 0x02	; 2
    297e:	31 05       	cpc	r19, r1
    2980:	91 f0       	breq	.+36     	; 0x29a6 <MTIM_stderrSetOCR+0x58>
    2982:	8d 81       	ldd	r24, Y+5	; 0x05
    2984:	9e 81       	ldd	r25, Y+6	; 0x06
    2986:	00 97       	sbiw	r24, 0x00	; 0
    2988:	61 f4       	brne	.+24     	; 0x29a2 <MTIM_stderrSetOCR+0x54>
	{
	case MTIM_TIMER0:
	{
		OCR0=ARG_u16OCRValue;
    298a:	ec e5       	ldi	r30, 0x5C	; 92
    298c:	f0 e0       	ldi	r31, 0x00	; 0
    298e:	8b 81       	ldd	r24, Y+3	; 0x03
    2990:	80 83       	st	Z, r24
    2992:	09 c0       	rjmp	.+18     	; 0x29a6 <MTIM_stderrSetOCR+0x58>
		break;
	}
	case  MTIM_TIMER1:
	{
		OCR1A=ARG_u16OCRValue;
    2994:	ea e4       	ldi	r30, 0x4A	; 74
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	91 83       	std	Z+1, r25	; 0x01
    299e:	80 83       	st	Z, r24
    29a0:	02 c0       	rjmp	.+4      	; 0x29a6 <MTIM_stderrSetOCR+0x58>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    29a6:	89 81       	ldd	r24, Y+1	; 0x01

}
    29a8:	26 96       	adiw	r28, 0x06	; 6
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <MTIM_stderrSetTimerValue>:

STD_error_t	MTIM_stderrSetTimerValue(u8 ARG_u8TimerNo,u16 ARG_u16TimerValue)
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	00 d0       	rcall	.+0      	; 0x29c0 <MTIM_stderrSetTimerValue+0x6>
    29c0:	00 d0       	rcall	.+0      	; 0x29c2 <MTIM_stderrSetTimerValue+0x8>
    29c2:	00 d0       	rcall	.+0      	; 0x29c4 <MTIM_stderrSetTimerValue+0xa>
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	8a 83       	std	Y+2, r24	; 0x02
    29ca:	7c 83       	std	Y+4, r23	; 0x04
    29cc:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    29ce:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    29d0:	8a 81       	ldd	r24, Y+2	; 0x02
    29d2:	28 2f       	mov	r18, r24
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	3e 83       	std	Y+6, r19	; 0x06
    29d8:	2d 83       	std	Y+5, r18	; 0x05
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	81 30       	cpi	r24, 0x01	; 1
    29e0:	91 05       	cpc	r25, r1
    29e2:	71 f0       	breq	.+28     	; 0x2a00 <MTIM_stderrSetTimerValue+0x46>
    29e4:	2d 81       	ldd	r18, Y+5	; 0x05
    29e6:	3e 81       	ldd	r19, Y+6	; 0x06
    29e8:	22 30       	cpi	r18, 0x02	; 2
    29ea:	31 05       	cpc	r19, r1
    29ec:	91 f0       	breq	.+36     	; 0x2a12 <MTIM_stderrSetTimerValue+0x58>
    29ee:	8d 81       	ldd	r24, Y+5	; 0x05
    29f0:	9e 81       	ldd	r25, Y+6	; 0x06
    29f2:	00 97       	sbiw	r24, 0x00	; 0
    29f4:	61 f4       	brne	.+24     	; 0x2a0e <MTIM_stderrSetTimerValue+0x54>
	{
	case MTIM_TIMER0:
	{
		TCNT0=ARG_u16TimerValue;
    29f6:	e2 e5       	ldi	r30, 0x52	; 82
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	8b 81       	ldd	r24, Y+3	; 0x03
    29fc:	80 83       	st	Z, r24
    29fe:	09 c0       	rjmp	.+18     	; 0x2a12 <MTIM_stderrSetTimerValue+0x58>
		break;
	}
	case  MTIM_TIMER1:
	{
		TCNT1=ARG_u16TimerValue;
    2a00:	ec e4       	ldi	r30, 0x4C	; 76
    2a02:	f0 e0       	ldi	r31, 0x00	; 0
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	9c 81       	ldd	r25, Y+4	; 0x04
    2a08:	91 83       	std	Z+1, r25	; 0x01
    2a0a:	80 83       	st	Z, r24
    2a0c:	02 c0       	rjmp	.+4      	; 0x2a12 <MTIM_stderrSetTimerValue+0x58>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2a0e:	81 e0       	ldi	r24, 0x01	; 1
    2a10:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2a12:	89 81       	ldd	r24, Y+1	; 0x01

}
    2a14:	26 96       	adiw	r28, 0x06	; 6
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	cf 91       	pop	r28
    2a22:	df 91       	pop	r29
    2a24:	08 95       	ret

00002a26 <MTIM_stderrTimerDelay>:
STD_error_t MTIM_stderrTimerDelay(u8 ARG_u8TimerNo,u32 ARG_32msDelay)
{
    2a26:	ef 92       	push	r14
    2a28:	ff 92       	push	r15
    2a2a:	0f 93       	push	r16
    2a2c:	1f 93       	push	r17
    2a2e:	df 93       	push	r29
    2a30:	cf 93       	push	r28
    2a32:	cd b7       	in	r28, 0x3d	; 61
    2a34:	de b7       	in	r29, 0x3e	; 62
    2a36:	64 97       	sbiw	r28, 0x14	; 20
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	8c 87       	std	Y+12, r24	; 0x0c
    2a44:	4d 87       	std	Y+13, r20	; 0x0d
    2a46:	5e 87       	std	Y+14, r21	; 0x0e
    2a48:	6f 87       	std	Y+15, r22	; 0x0f
    2a4a:	78 8b       	std	Y+16, r23	; 0x10
	STD_error_t L_stderrState=E_OK;
    2a4c:	1b 86       	std	Y+11, r1	; 0x0b
	f32 L_f32TickTime,L_f32OVFTime;
	u16 L_u16PreScalar;
	switch(ARG_u8TimerNo)
    2a4e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2a50:	28 2f       	mov	r18, r24
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	3c 8b       	std	Y+20, r19	; 0x14
    2a56:	2b 8b       	std	Y+19, r18	; 0x13
    2a58:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a5c:	81 30       	cpi	r24, 0x01	; 1
    2a5e:	91 05       	cpc	r25, r1
    2a60:	09 f4       	brne	.+2      	; 0x2a64 <MTIM_stderrTimerDelay+0x3e>
    2a62:	ed c0       	rjmp	.+474    	; 0x2c3e <MTIM_stderrTimerDelay+0x218>
    2a64:	2b 89       	ldd	r18, Y+19	; 0x13
    2a66:	3c 89       	ldd	r19, Y+20	; 0x14
    2a68:	22 30       	cpi	r18, 0x02	; 2
    2a6a:	31 05       	cpc	r19, r1
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <MTIM_stderrTimerDelay+0x4a>
    2a6e:	e7 c0       	rjmp	.+462    	; 0x2c3e <MTIM_stderrTimerDelay+0x218>
    2a70:	8b 89       	ldd	r24, Y+19	; 0x13
    2a72:	9c 89       	ldd	r25, Y+20	; 0x14
    2a74:	00 97       	sbiw	r24, 0x00	; 0
    2a76:	09 f0       	breq	.+2      	; 0x2a7a <MTIM_stderrTimerDelay+0x54>
    2a78:	e0 c0       	rjmp	.+448    	; 0x2c3a <MTIM_stderrTimerDelay+0x214>
	{
	case MTIM_TIMER0:
	{
		switch(MTIM_u8Timer0Clock)
    2a7a:	80 91 d6 01 	lds	r24, 0x01D6
    2a7e:	28 2f       	mov	r18, r24
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	3a 8b       	std	Y+18, r19	; 0x12
    2a84:	29 8b       	std	Y+17, r18	; 0x11
    2a86:	89 89       	ldd	r24, Y+17	; 0x11
    2a88:	9a 89       	ldd	r25, Y+18	; 0x12
    2a8a:	83 30       	cpi	r24, 0x03	; 3
    2a8c:	91 05       	cpc	r25, r1
    2a8e:	29 f1       	breq	.+74     	; 0x2ada <MTIM_stderrTimerDelay+0xb4>
    2a90:	29 89       	ldd	r18, Y+17	; 0x11
    2a92:	3a 89       	ldd	r19, Y+18	; 0x12
    2a94:	24 30       	cpi	r18, 0x04	; 4
    2a96:	31 05       	cpc	r19, r1
    2a98:	5c f4       	brge	.+22     	; 0x2ab0 <MTIM_stderrTimerDelay+0x8a>
    2a9a:	89 89       	ldd	r24, Y+17	; 0x11
    2a9c:	9a 89       	ldd	r25, Y+18	; 0x12
    2a9e:	81 30       	cpi	r24, 0x01	; 1
    2aa0:	91 05       	cpc	r25, r1
    2aa2:	89 f0       	breq	.+34     	; 0x2ac6 <MTIM_stderrTimerDelay+0xa0>
    2aa4:	29 89       	ldd	r18, Y+17	; 0x11
    2aa6:	3a 89       	ldd	r19, Y+18	; 0x12
    2aa8:	22 30       	cpi	r18, 0x02	; 2
    2aaa:	31 05       	cpc	r19, r1
    2aac:	89 f0       	breq	.+34     	; 0x2ad0 <MTIM_stderrTimerDelay+0xaa>
    2aae:	23 c0       	rjmp	.+70     	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
    2ab0:	89 89       	ldd	r24, Y+17	; 0x11
    2ab2:	9a 89       	ldd	r25, Y+18	; 0x12
    2ab4:	84 30       	cpi	r24, 0x04	; 4
    2ab6:	91 05       	cpc	r25, r1
    2ab8:	a9 f0       	breq	.+42     	; 0x2ae4 <MTIM_stderrTimerDelay+0xbe>
    2aba:	29 89       	ldd	r18, Y+17	; 0x11
    2abc:	3a 89       	ldd	r19, Y+18	; 0x12
    2abe:	25 30       	cpi	r18, 0x05	; 5
    2ac0:	31 05       	cpc	r19, r1
    2ac2:	a9 f0       	breq	.+42     	; 0x2aee <MTIM_stderrTimerDelay+0xc8>
    2ac4:	18 c0       	rjmp	.+48     	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
		{
		case MTIM_CS_CLOCK_PRESCALAR_1:L_u16PreScalar=1;break;
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	9a 83       	std	Y+2, r25	; 0x02
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	13 c0       	rjmp	.+38     	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_8:L_u16PreScalar=8;break;
    2ad0:	88 e0       	ldi	r24, 0x08	; 8
    2ad2:	90 e0       	ldi	r25, 0x00	; 0
    2ad4:	9a 83       	std	Y+2, r25	; 0x02
    2ad6:	89 83       	std	Y+1, r24	; 0x01
    2ad8:	0e c0       	rjmp	.+28     	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_64:L_u16PreScalar=64;break;
    2ada:	80 e4       	ldi	r24, 0x40	; 64
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
    2ae2:	09 c0       	rjmp	.+18     	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_256:L_u16PreScalar=256;break;
    2ae4:	80 e0       	ldi	r24, 0x00	; 0
    2ae6:	91 e0       	ldi	r25, 0x01	; 1
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_1024:L_u16PreScalar=1024;break;
    2aee:	80 e0       	ldi	r24, 0x00	; 0
    2af0:	94 e0       	ldi	r25, 0x04	; 4
    2af2:	9a 83       	std	Y+2, r25	; 0x02
    2af4:	89 83       	std	Y+1, r24	; 0x01
		}
		L_f32TickTime=((f32)L_u16PreScalar/F_CPU);
    2af6:	89 81       	ldd	r24, Y+1	; 0x01
    2af8:	9a 81       	ldd	r25, Y+2	; 0x02
    2afa:	cc 01       	movw	r24, r24
    2afc:	a0 e0       	ldi	r26, 0x00	; 0
    2afe:	b0 e0       	ldi	r27, 0x00	; 0
    2b00:	bc 01       	movw	r22, r24
    2b02:	cd 01       	movw	r24, r26
    2b04:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b08:	dc 01       	movw	r26, r24
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	bc 01       	movw	r22, r24
    2b0e:	cd 01       	movw	r24, r26
    2b10:	20 e0       	ldi	r18, 0x00	; 0
    2b12:	34 e2       	ldi	r19, 0x24	; 36
    2b14:	44 ef       	ldi	r20, 0xF4	; 244
    2b16:	5a e4       	ldi	r21, 0x4A	; 74
    2b18:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b1c:	dc 01       	movw	r26, r24
    2b1e:	cb 01       	movw	r24, r22
    2b20:	8f 83       	std	Y+7, r24	; 0x07
    2b22:	98 87       	std	Y+8, r25	; 0x08
    2b24:	a9 87       	std	Y+9, r26	; 0x09
    2b26:	ba 87       	std	Y+10, r27	; 0x0a
		L_f32OVFTime=L_f32TickTime*256;
    2b28:	6f 81       	ldd	r22, Y+7	; 0x07
    2b2a:	78 85       	ldd	r23, Y+8	; 0x08
    2b2c:	89 85       	ldd	r24, Y+9	; 0x09
    2b2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	40 e8       	ldi	r20, 0x80	; 128
    2b36:	53 e4       	ldi	r21, 0x43	; 67
    2b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b3c:	dc 01       	movw	r26, r24
    2b3e:	cb 01       	movw	r24, r22
    2b40:	8b 83       	std	Y+3, r24	; 0x03
    2b42:	9c 83       	std	Y+4, r25	; 0x04
    2b44:	ad 83       	std	Y+5, r26	; 0x05
    2b46:	be 83       	std	Y+6, r27	; 0x06
		MTIM_u16Timer0OVFCount=(((f32)ARG_32msDelay/1000)/L_f32OVFTime);
    2b48:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b4a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b4e:	98 89       	ldd	r25, Y+16	; 0x10
    2b50:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b54:	dc 01       	movw	r26, r24
    2b56:	cb 01       	movw	r24, r22
    2b58:	bc 01       	movw	r22, r24
    2b5a:	cd 01       	movw	r24, r26
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	4a e7       	ldi	r20, 0x7A	; 122
    2b62:	54 e4       	ldi	r21, 0x44	; 68
    2b64:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b68:	dc 01       	movw	r26, r24
    2b6a:	cb 01       	movw	r24, r22
    2b6c:	bc 01       	movw	r22, r24
    2b6e:	cd 01       	movw	r24, r26
    2b70:	2b 81       	ldd	r18, Y+3	; 0x03
    2b72:	3c 81       	ldd	r19, Y+4	; 0x04
    2b74:	4d 81       	ldd	r20, Y+5	; 0x05
    2b76:	5e 81       	ldd	r21, Y+6	; 0x06
    2b78:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	bc 01       	movw	r22, r24
    2b82:	cd 01       	movw	r24, r26
    2b84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b88:	dc 01       	movw	r26, r24
    2b8a:	cb 01       	movw	r24, r22
    2b8c:	90 93 cd 01 	sts	0x01CD, r25
    2b90:	80 93 cc 01 	sts	0x01CC, r24
		//MTIM_u8Timer0Preload=256-((ARG_32msDelay/1000)%(u32)L_f32OVFTime);
		MTIM_u8Timer0Preload=256*(1-((((f32)ARG_32msDelay/1000)/L_f32OVFTime)-MTIM_u16Timer0OVFCount));
    2b94:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b96:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b9a:	98 89       	ldd	r25, Y+16	; 0x10
    2b9c:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ba0:	dc 01       	movw	r26, r24
    2ba2:	cb 01       	movw	r24, r22
    2ba4:	bc 01       	movw	r22, r24
    2ba6:	cd 01       	movw	r24, r26
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	4a e7       	ldi	r20, 0x7A	; 122
    2bae:	54 e4       	ldi	r21, 0x44	; 68
    2bb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	2b 81       	ldd	r18, Y+3	; 0x03
    2bbe:	3c 81       	ldd	r19, Y+4	; 0x04
    2bc0:	4d 81       	ldd	r20, Y+5	; 0x05
    2bc2:	5e 81       	ldd	r21, Y+6	; 0x06
    2bc4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2bc8:	dc 01       	movw	r26, r24
    2bca:	cb 01       	movw	r24, r22
    2bcc:	7c 01       	movw	r14, r24
    2bce:	8d 01       	movw	r16, r26
    2bd0:	80 91 cc 01 	lds	r24, 0x01CC
    2bd4:	90 91 cd 01 	lds	r25, 0x01CD
    2bd8:	cc 01       	movw	r24, r24
    2bda:	a0 e0       	ldi	r26, 0x00	; 0
    2bdc:	b0 e0       	ldi	r27, 0x00	; 0
    2bde:	bc 01       	movw	r22, r24
    2be0:	cd 01       	movw	r24, r26
    2be2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2be6:	9b 01       	movw	r18, r22
    2be8:	ac 01       	movw	r20, r24
    2bea:	c8 01       	movw	r24, r16
    2bec:	b7 01       	movw	r22, r14
    2bee:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2bf2:	dc 01       	movw	r26, r24
    2bf4:	cb 01       	movw	r24, r22
    2bf6:	9c 01       	movw	r18, r24
    2bf8:	ad 01       	movw	r20, r26
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	70 e0       	ldi	r23, 0x00	; 0
    2bfe:	80 e8       	ldi	r24, 0x80	; 128
    2c00:	9f e3       	ldi	r25, 0x3F	; 63
    2c02:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2c06:	dc 01       	movw	r26, r24
    2c08:	cb 01       	movw	r24, r22
    2c0a:	bc 01       	movw	r22, r24
    2c0c:	cd 01       	movw	r24, r26
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	53 e4       	ldi	r21, 0x43	; 67
    2c16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c1a:	dc 01       	movw	r26, r24
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	bc 01       	movw	r22, r24
    2c20:	cd 01       	movw	r24, r26
    2c22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c26:	dc 01       	movw	r26, r24
    2c28:	cb 01       	movw	r24, r22
    2c2a:	80 93 ce 01 	sts	0x01CE, r24

		TCNT0=MTIM_u8Timer0Preload;
    2c2e:	e2 e5       	ldi	r30, 0x52	; 82
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	80 91 ce 01 	lds	r24, 0x01CE
    2c36:	80 83       	st	Z, r24
    2c38:	02 c0       	rjmp	.+4      	; 0x2c3e <MTIM_stderrTimerDelay+0x218>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2c3a:	81 e0       	ldi	r24, 0x01	; 1
    2c3c:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return L_stderrState;
    2c3e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2c40:	64 96       	adiw	r28, 0x14	; 20
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	cf 91       	pop	r28
    2c4e:	df 91       	pop	r29
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	ff 90       	pop	r15
    2c56:	ef 90       	pop	r14
    2c58:	08 95       	ret

00002c5a <__vector_11>:
void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
    2c5a:	1f 92       	push	r1
    2c5c:	0f 92       	push	r0
    2c5e:	0f b6       	in	r0, 0x3f	; 63
    2c60:	0f 92       	push	r0
    2c62:	11 24       	eor	r1, r1
    2c64:	2f 93       	push	r18
    2c66:	3f 93       	push	r19
    2c68:	4f 93       	push	r20
    2c6a:	5f 93       	push	r21
    2c6c:	6f 93       	push	r22
    2c6e:	7f 93       	push	r23
    2c70:	8f 93       	push	r24
    2c72:	9f 93       	push	r25
    2c74:	af 93       	push	r26
    2c76:	bf 93       	push	r27
    2c78:	ef 93       	push	r30
    2c7a:	ff 93       	push	r31
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	cd b7       	in	r28, 0x3d	; 61
    2c82:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER0_pvoidfUserFunctionT0OVF!=NULL)
    2c84:	80 91 c4 01 	lds	r24, 0x01C4
    2c88:	90 91 c5 01 	lds	r25, 0x01C5
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	29 f1       	breq	.+74     	; 0x2cda <__vector_11+0x80>
	{
		static volatile u16 L_u16OVFCounter=0;
		L_u16OVFCounter++;
    2c90:	80 91 ca 01 	lds	r24, 0x01CA
    2c94:	90 91 cb 01 	lds	r25, 0x01CB
    2c98:	01 96       	adiw	r24, 0x01	; 1
    2c9a:	90 93 cb 01 	sts	0x01CB, r25
    2c9e:	80 93 ca 01 	sts	0x01CA, r24
		if(L_u16OVFCounter==(MTIM_u16Timer0OVFCount+1))
    2ca2:	80 91 cc 01 	lds	r24, 0x01CC
    2ca6:	90 91 cd 01 	lds	r25, 0x01CD
    2caa:	9c 01       	movw	r18, r24
    2cac:	2f 5f       	subi	r18, 0xFF	; 255
    2cae:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb0:	80 91 ca 01 	lds	r24, 0x01CA
    2cb4:	90 91 cb 01 	lds	r25, 0x01CB
    2cb8:	28 17       	cp	r18, r24
    2cba:	39 07       	cpc	r19, r25
    2cbc:	71 f4       	brne	.+28     	; 0x2cda <__vector_11+0x80>
		{
			L_u16OVFCounter=0;
    2cbe:	10 92 cb 01 	sts	0x01CB, r1
    2cc2:	10 92 ca 01 	sts	0x01CA, r1
			TCNT0=MTIM_u8Timer0Preload;
    2cc6:	e2 e5       	ldi	r30, 0x52	; 82
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 91 ce 01 	lds	r24, 0x01CE
    2cce:	80 83       	st	Z, r24
			MTIMER0_pvoidfUserFunctionT0OVF();
    2cd0:	e0 91 c4 01 	lds	r30, 0x01C4
    2cd4:	f0 91 c5 01 	lds	r31, 0x01C5
    2cd8:	09 95       	icall
	}
	else
	{
		//report null pointer
	}
}
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	ff 91       	pop	r31
    2ce0:	ef 91       	pop	r30
    2ce2:	bf 91       	pop	r27
    2ce4:	af 91       	pop	r26
    2ce6:	9f 91       	pop	r25
    2ce8:	8f 91       	pop	r24
    2cea:	7f 91       	pop	r23
    2cec:	6f 91       	pop	r22
    2cee:	5f 91       	pop	r21
    2cf0:	4f 91       	pop	r20
    2cf2:	3f 91       	pop	r19
    2cf4:	2f 91       	pop	r18
    2cf6:	0f 90       	pop	r0
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	0f 90       	pop	r0
    2cfc:	1f 90       	pop	r1
    2cfe:	18 95       	reti

00002d00 <__vector_10>:
void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
    2d00:	1f 92       	push	r1
    2d02:	0f 92       	push	r0
    2d04:	0f b6       	in	r0, 0x3f	; 63
    2d06:	0f 92       	push	r0
    2d08:	11 24       	eor	r1, r1
    2d0a:	2f 93       	push	r18
    2d0c:	3f 93       	push	r19
    2d0e:	4f 93       	push	r20
    2d10:	5f 93       	push	r21
    2d12:	6f 93       	push	r22
    2d14:	7f 93       	push	r23
    2d16:	8f 93       	push	r24
    2d18:	9f 93       	push	r25
    2d1a:	af 93       	push	r26
    2d1c:	bf 93       	push	r27
    2d1e:	ef 93       	push	r30
    2d20:	ff 93       	push	r31
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER0_pvoidfUserFunctionT0OCM!=NULL)
    2d2a:	80 91 c6 01 	lds	r24, 0x01C6
    2d2e:	90 91 c7 01 	lds	r25, 0x01C7
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	29 f0       	breq	.+10     	; 0x2d40 <__vector_10+0x40>
	{
		MTIMER0_pvoidfUserFunctionT0OCM();
    2d36:	e0 91 c6 01 	lds	r30, 0x01C6
    2d3a:	f0 91 c7 01 	lds	r31, 0x01C7
    2d3e:	09 95       	icall
	}
	else
	{
		//report null pointer
	}
}
    2d40:	cf 91       	pop	r28
    2d42:	df 91       	pop	r29
    2d44:	ff 91       	pop	r31
    2d46:	ef 91       	pop	r30
    2d48:	bf 91       	pop	r27
    2d4a:	af 91       	pop	r26
    2d4c:	9f 91       	pop	r25
    2d4e:	8f 91       	pop	r24
    2d50:	7f 91       	pop	r23
    2d52:	6f 91       	pop	r22
    2d54:	5f 91       	pop	r21
    2d56:	4f 91       	pop	r20
    2d58:	3f 91       	pop	r19
    2d5a:	2f 91       	pop	r18
    2d5c:	0f 90       	pop	r0
    2d5e:	0f be       	out	0x3f, r0	; 63
    2d60:	0f 90       	pop	r0
    2d62:	1f 90       	pop	r1
    2d64:	18 95       	reti

00002d66 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    2d66:	1f 92       	push	r1
    2d68:	0f 92       	push	r0
    2d6a:	0f b6       	in	r0, 0x3f	; 63
    2d6c:	0f 92       	push	r0
    2d6e:	11 24       	eor	r1, r1
    2d70:	2f 93       	push	r18
    2d72:	3f 93       	push	r19
    2d74:	4f 93       	push	r20
    2d76:	5f 93       	push	r21
    2d78:	6f 93       	push	r22
    2d7a:	7f 93       	push	r23
    2d7c:	8f 93       	push	r24
    2d7e:	9f 93       	push	r25
    2d80:	af 93       	push	r26
    2d82:	bf 93       	push	r27
    2d84:	ef 93       	push	r30
    2d86:	ff 93       	push	r31
    2d88:	df 93       	push	r29
    2d8a:	cf 93       	push	r28
    2d8c:	cd b7       	in	r28, 0x3d	; 61
    2d8e:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER1_pvoidfUserFunctionT1ICU!=NULL)
    2d90:	80 91 c8 01 	lds	r24, 0x01C8
    2d94:	90 91 c9 01 	lds	r25, 0x01C9
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	29 f0       	breq	.+10     	; 0x2da6 <__vector_6+0x40>
	{
		MTIMER1_pvoidfUserFunctionT1ICU();
    2d9c:	e0 91 c8 01 	lds	r30, 0x01C8
    2da0:	f0 91 c9 01 	lds	r31, 0x01C9
    2da4:	09 95       	icall
	}

}
    2da6:	cf 91       	pop	r28
    2da8:	df 91       	pop	r29
    2daa:	ff 91       	pop	r31
    2dac:	ef 91       	pop	r30
    2dae:	bf 91       	pop	r27
    2db0:	af 91       	pop	r26
    2db2:	9f 91       	pop	r25
    2db4:	8f 91       	pop	r24
    2db6:	7f 91       	pop	r23
    2db8:	6f 91       	pop	r22
    2dba:	5f 91       	pop	r21
    2dbc:	4f 91       	pop	r20
    2dbe:	3f 91       	pop	r19
    2dc0:	2f 91       	pop	r18
    2dc2:	0f 90       	pop	r0
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	0f 90       	pop	r0
    2dc8:	1f 90       	pop	r1
    2dca:	18 95       	reti

00002dcc <MTIM_voidBusyWaitDlay>:

void MTIM_voidBusyWaitDlay(u16 ARG_u16MsDelay)
{
    2dcc:	df 93       	push	r29
    2dce:	cf 93       	push	r28
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <MTIM_voidBusyWaitDlay+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <MTIM_voidBusyWaitDlay+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	9c 83       	std	Y+4, r25	; 0x04
    2dda:	8b 83       	std	Y+3, r24	; 0x03
	//loop counter
	u16 L_u16LoopCounter;
	// make the timer to work on ctc mode
	CLEAR_BIT(TCCR0,WGM00);
    2ddc:	a3 e5       	ldi	r26, 0x53	; 83
    2dde:	b0 e0       	ldi	r27, 0x00	; 0
    2de0:	e3 e5       	ldi	r30, 0x53	; 83
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 7b       	andi	r24, 0xBF	; 191
    2de8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2dea:	a3 e5       	ldi	r26, 0x53	; 83
    2dec:	b0 e0       	ldi	r27, 0x00	; 0
    2dee:	e3 e5       	ldi	r30, 0x53	; 83
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
    2df4:	88 60       	ori	r24, 0x08	; 8
    2df6:	8c 93       	st	X, r24
	// make the ocr0 register equal to 125 (so Time of the compare will be 1msec )
	MTIM_stderrSetOCR(MTIM_TIMER0,125);
    2df8:	80 e0       	ldi	r24, 0x00	; 0
    2dfa:	6d e7       	ldi	r22, 0x7D	; 125
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	0e 94 a7 14 	call	0x294e	; 0x294e <MTIM_stderrSetOCR>
	// make the pre scaler to 64 so the tick time is 8us
	TCCR0=((TCCR0&0xF8)|MTIM_CS_CLOCK_PRESCALAR_64);
    2e02:	a3 e5       	ldi	r26, 0x53	; 83
    2e04:	b0 e0       	ldi	r27, 0x00	; 0
    2e06:	e3 e5       	ldi	r30, 0x53	; 83
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	80 81       	ld	r24, Z
    2e0c:	88 7f       	andi	r24, 0xF8	; 248
    2e0e:	83 60       	ori	r24, 0x03	; 3
    2e10:	8c 93       	st	X, r24
	// the loop counter will count to the required delay each iteration is 1msec
	for(L_u16LoopCounter=0;L_u16LoopCounter<ARG_u16MsDelay;L_u16LoopCounter++)
    2e12:	1a 82       	std	Y+2, r1	; 0x02
    2e14:	19 82       	std	Y+1, r1	; 0x01
    2e16:	15 c0       	rjmp	.+42     	; 0x2e42 <MTIM_voidBusyWaitDlay+0x76>
	{
		while(!GET_BIT(TIFR,TOV0));
    2e18:	e8 e5       	ldi	r30, 0x58	; 88
    2e1a:	f0 e0       	ldi	r31, 0x00	; 0
    2e1c:	80 81       	ld	r24, Z
    2e1e:	88 2f       	mov	r24, r24
    2e20:	90 e0       	ldi	r25, 0x00	; 0
    2e22:	81 70       	andi	r24, 0x01	; 1
    2e24:	90 70       	andi	r25, 0x00	; 0
    2e26:	00 97       	sbiw	r24, 0x00	; 0
    2e28:	b9 f3       	breq	.-18     	; 0x2e18 <MTIM_voidBusyWaitDlay+0x4c>
		SET_BIT(TIFR,TOV0);
    2e2a:	a8 e5       	ldi	r26, 0x58	; 88
    2e2c:	b0 e0       	ldi	r27, 0x00	; 0
    2e2e:	e8 e5       	ldi	r30, 0x58	; 88
    2e30:	f0 e0       	ldi	r31, 0x00	; 0
    2e32:	80 81       	ld	r24, Z
    2e34:	81 60       	ori	r24, 0x01	; 1
    2e36:	8c 93       	st	X, r24
	// make the ocr0 register equal to 125 (so Time of the compare will be 1msec )
	MTIM_stderrSetOCR(MTIM_TIMER0,125);
	// make the pre scaler to 64 so the tick time is 8us
	TCCR0=((TCCR0&0xF8)|MTIM_CS_CLOCK_PRESCALAR_64);
	// the loop counter will count to the required delay each iteration is 1msec
	for(L_u16LoopCounter=0;L_u16LoopCounter<ARG_u16MsDelay;L_u16LoopCounter++)
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	9a 83       	std	Y+2, r25	; 0x02
    2e40:	89 83       	std	Y+1, r24	; 0x01
    2e42:	29 81       	ldd	r18, Y+1	; 0x01
    2e44:	3a 81       	ldd	r19, Y+2	; 0x02
    2e46:	8b 81       	ldd	r24, Y+3	; 0x03
    2e48:	9c 81       	ldd	r25, Y+4	; 0x04
    2e4a:	28 17       	cp	r18, r24
    2e4c:	39 07       	cpc	r19, r25
    2e4e:	20 f3       	brcs	.-56     	; 0x2e18 <MTIM_voidBusyWaitDlay+0x4c>
	{
		while(!GET_BIT(TIFR,TOV0));
		SET_BIT(TIFR,TOV0);
	}
}
    2e50:	0f 90       	pop	r0
    2e52:	0f 90       	pop	r0
    2e54:	0f 90       	pop	r0
    2e56:	0f 90       	pop	r0
    2e58:	cf 91       	pop	r28
    2e5a:	df 91       	pop	r29
    2e5c:	08 95       	ret

00002e5e <MTIM_SetTimer1TopValue>:

void MTIM_SetTimer1TopValue(u16 ARG_u8TopValue)
{
    2e5e:	df 93       	push	r29
    2e60:	cf 93       	push	r28
    2e62:	00 d0       	rcall	.+0      	; 0x2e64 <MTIM_SetTimer1TopValue+0x6>
    2e64:	cd b7       	in	r28, 0x3d	; 61
    2e66:	de b7       	in	r29, 0x3e	; 62
    2e68:	9a 83       	std	Y+2, r25	; 0x02
    2e6a:	89 83       	std	Y+1, r24	; 0x01
	ICR1=ARG_u8TopValue;
    2e6c:	e6 e4       	ldi	r30, 0x46	; 70
    2e6e:	f0 e0       	ldi	r31, 0x00	; 0
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	9a 81       	ldd	r25, Y+2	; 0x02
    2e74:	91 83       	std	Z+1, r25	; 0x01
    2e76:	80 83       	st	Z, r24
}
    2e78:	0f 90       	pop	r0
    2e7a:	0f 90       	pop	r0
    2e7c:	cf 91       	pop	r28
    2e7e:	df 91       	pop	r29
    2e80:	08 95       	ret

00002e82 <MTIM_u16GetTimerValue>:


u16 MTIM_u16GetTimerValue(u8 ARG_u8TimerNo)
{
    2e82:	df 93       	push	r29
    2e84:	cf 93       	push	r28
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <MTIM_u16GetTimerValue+0x6>
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <MTIM_u16GetTimerValue+0x8>
    2e8a:	0f 92       	push	r0
    2e8c:	cd b7       	in	r28, 0x3d	; 61
    2e8e:	de b7       	in	r29, 0x3e	; 62
    2e90:	8b 83       	std	Y+3, r24	; 0x03
	u16 L_Return;
	switch(ARG_u8TimerNo)
    2e92:	8b 81       	ldd	r24, Y+3	; 0x03
    2e94:	28 2f       	mov	r18, r24
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	3d 83       	std	Y+5, r19	; 0x05
    2e9a:	2c 83       	std	Y+4, r18	; 0x04
    2e9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2ea0:	00 97       	sbiw	r24, 0x00	; 0
    2ea2:	31 f0       	breq	.+12     	; 0x2eb0 <MTIM_u16GetTimerValue+0x2e>
    2ea4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ea6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ea8:	21 30       	cpi	r18, 0x01	; 1
    2eaa:	31 05       	cpc	r19, r1
    2eac:	49 f0       	breq	.+18     	; 0x2ec0 <MTIM_u16GetTimerValue+0x3e>
    2eae:	0e c0       	rjmp	.+28     	; 0x2ecc <MTIM_u16GetTimerValue+0x4a>
	{
	case MTIM_TIMER0:
	{
		L_Return=TCNT0;
    2eb0:	e2 e5       	ldi	r30, 0x52	; 82
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 2f       	mov	r24, r24
    2eb8:	90 e0       	ldi	r25, 0x00	; 0
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
    2ebe:	06 c0       	rjmp	.+12     	; 0x2ecc <MTIM_u16GetTimerValue+0x4a>
		break;
	}
	case  MTIM_TIMER1:
	{
		L_Return=TCNT1;
    2ec0:	ec e4       	ldi	r30, 0x4C	; 76
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	80 81       	ld	r24, Z
    2ec6:	91 81       	ldd	r25, Z+1	; 0x01
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
	{
		break;
	}
	default:break;//L_stderrState=E_NOK;break;
	}
	return L_Return;
    2ecc:	89 81       	ldd	r24, Y+1	; 0x01
    2ece:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	cf 91       	pop	r28
    2edc:	df 91       	pop	r29
    2ede:	08 95       	ret

00002ee0 <ICU_voidSetEdge>:


//icu  function

void ICU_voidSetEdge(u8 Copy_u8Edge)
{
    2ee0:	df 93       	push	r29
    2ee2:	cf 93       	push	r28
    2ee4:	0f 92       	push	r0
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge==ICU_RISINGEDGE)
    2eec:	89 81       	ldd	r24, Y+1	; 0x01
    2eee:	81 30       	cpi	r24, 0x01	; 1
    2ef0:	41 f4       	brne	.+16     	; 0x2f02 <ICU_voidSetEdge+0x22>
	{
		SET_BIT(TCCR1B,ICES1);
    2ef2:	ae e4       	ldi	r26, 0x4E	; 78
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	ee e4       	ldi	r30, 0x4E	; 78
    2ef8:	f0 e0       	ldi	r31, 0x00	; 0
    2efa:	80 81       	ld	r24, Z
    2efc:	80 64       	ori	r24, 0x40	; 64
    2efe:	8c 93       	st	X, r24
    2f00:	0a c0       	rjmp	.+20     	; 0x2f16 <ICU_voidSetEdge+0x36>
	}
	else if(Copy_u8Edge==ICU_FALLINGEDGE)
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	82 30       	cpi	r24, 0x02	; 2
    2f06:	39 f4       	brne	.+14     	; 0x2f16 <ICU_voidSetEdge+0x36>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    2f08:	ae e4       	ldi	r26, 0x4E	; 78
    2f0a:	b0 e0       	ldi	r27, 0x00	; 0
    2f0c:	ee e4       	ldi	r30, 0x4E	; 78
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	8f 7b       	andi	r24, 0xBF	; 191
    2f14:	8c 93       	st	X, r24
	}
}
    2f16:	0f 90       	pop	r0
    2f18:	cf 91       	pop	r28
    2f1a:	df 91       	pop	r29
    2f1c:	08 95       	ret

00002f1e <ICU_voidEnableint>:
void ICU_voidEnableint(void)
{
    2f1e:	df 93       	push	r29
    2f20:	cf 93       	push	r28
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    2f26:	a9 e5       	ldi	r26, 0x59	; 89
    2f28:	b0 e0       	ldi	r27, 0x00	; 0
    2f2a:	e9 e5       	ldi	r30, 0x59	; 89
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	80 81       	ld	r24, Z
    2f30:	80 62       	ori	r24, 0x20	; 32
    2f32:	8c 93       	st	X, r24
}
    2f34:	cf 91       	pop	r28
    2f36:	df 91       	pop	r29
    2f38:	08 95       	ret

00002f3a <ICU_voidDisableint>:
void ICU_voidDisableint(void)
{
    2f3a:	df 93       	push	r29
    2f3c:	cf 93       	push	r28
    2f3e:	cd b7       	in	r28, 0x3d	; 61
    2f40:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    2f42:	a9 e5       	ldi	r26, 0x59	; 89
    2f44:	b0 e0       	ldi	r27, 0x00	; 0
    2f46:	e9 e5       	ldi	r30, 0x59	; 89
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	8f 7d       	andi	r24, 0xDF	; 223
    2f4e:	8c 93       	st	X, r24
}
    2f50:	cf 91       	pop	r28
    2f52:	df 91       	pop	r29
    2f54:	08 95       	ret

00002f56 <ICU_u16ReadICU>:
u16	ICU_u16ReadICU(void)
{
    2f56:	df 93       	push	r29
    2f58:	cf 93       	push	r28
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
	return	ICR1;
    2f5e:	e6 e4       	ldi	r30, 0x46	; 70
    2f60:	f0 e0       	ldi	r31, 0x00	; 0
    2f62:	80 81       	ld	r24, Z
    2f64:	91 81       	ldd	r25, Z+1	; 0x01
}
    2f66:	cf 91       	pop	r28
    2f68:	df 91       	pop	r29
    2f6a:	08 95       	ret

00002f6c <MUART_stderrInit>:
static void (*MUART_pvoidfUserFunctionTxC)(void)=NULL;
static void (*MUART_pvoidfUserFunctionUDREmpty)(void)=NULL;


STD_error_t MUART_stderrInit(u32 ARG_u32BudRate,u8 ARG_u8DataBits,u8 ARG_u8Parity,u8 ARG_u8StopBits)
{
    2f6c:	0f 93       	push	r16
    2f6e:	df 93       	push	r29
    2f70:	cf 93       	push	r28
    2f72:	cd b7       	in	r28, 0x3d	; 61
    2f74:	de b7       	in	r29, 0x3e	; 62
    2f76:	2a 97       	sbiw	r28, 0x0a	; 10
    2f78:	0f b6       	in	r0, 0x3f	; 63
    2f7a:	f8 94       	cli
    2f7c:	de bf       	out	0x3e, r29	; 62
    2f7e:	0f be       	out	0x3f, r0	; 63
    2f80:	cd bf       	out	0x3d, r28	; 61
    2f82:	6c 83       	std	Y+4, r22	; 0x04
    2f84:	7d 83       	std	Y+5, r23	; 0x05
    2f86:	8e 83       	std	Y+6, r24	; 0x06
    2f88:	9f 83       	std	Y+7, r25	; 0x07
    2f8a:	48 87       	std	Y+8, r20	; 0x08
    2f8c:	29 87       	std	Y+9, r18	; 0x09
    2f8e:	0a 87       	std	Y+10, r16	; 0x0a
	STD_error_t L_stderrState=E_OK;
    2f90:	1b 82       	std	Y+3, r1	; 0x03
	if((ARG_u8DataBits<=3 ||7== ARG_u8DataBits)&&((0x20==ARG_u8Parity)||(0x20==ARG_u8Parity)||(0x30==ARG_u8Parity))&&
    2f92:	88 85       	ldd	r24, Y+8	; 0x08
    2f94:	84 30       	cpi	r24, 0x04	; 4
    2f96:	20 f0       	brcs	.+8      	; 0x2fa0 <MUART_stderrInit+0x34>
    2f98:	88 85       	ldd	r24, Y+8	; 0x08
    2f9a:	87 30       	cpi	r24, 0x07	; 7
    2f9c:	09 f0       	breq	.+2      	; 0x2fa0 <MUART_stderrInit+0x34>
    2f9e:	62 c0       	rjmp	.+196    	; 0x3064 <MUART_stderrInit+0xf8>
    2fa0:	89 85       	ldd	r24, Y+9	; 0x09
    2fa2:	80 32       	cpi	r24, 0x20	; 32
    2fa4:	39 f0       	breq	.+14     	; 0x2fb4 <MUART_stderrInit+0x48>
    2fa6:	89 85       	ldd	r24, Y+9	; 0x09
    2fa8:	80 32       	cpi	r24, 0x20	; 32
    2faa:	21 f0       	breq	.+8      	; 0x2fb4 <MUART_stderrInit+0x48>
    2fac:	89 85       	ldd	r24, Y+9	; 0x09
    2fae:	80 33       	cpi	r24, 0x30	; 48
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <MUART_stderrInit+0x48>
    2fb2:	58 c0       	rjmp	.+176    	; 0x3064 <MUART_stderrInit+0xf8>
    2fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fb6:	88 23       	and	r24, r24
    2fb8:	21 f0       	breq	.+8      	; 0x2fc2 <MUART_stderrInit+0x56>
    2fba:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fbc:	88 30       	cpi	r24, 0x08	; 8
    2fbe:	09 f0       	breq	.+2      	; 0x2fc2 <MUART_stderrInit+0x56>
    2fc0:	51 c0       	rjmp	.+162    	; 0x3064 <MUART_stderrInit+0xf8>
		((0==ARG_u8StopBits)||(0x08==ARG_u8StopBits)))
	{
		u16 UBBR;
		UBBR=((F_CPU/(16*ARG_u32BudRate))-1);
    2fc2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc6:	ae 81       	ldd	r26, Y+6	; 0x06
    2fc8:	bf 81       	ldd	r27, Y+7	; 0x07
    2fca:	88 0f       	add	r24, r24
    2fcc:	99 1f       	adc	r25, r25
    2fce:	aa 1f       	adc	r26, r26
    2fd0:	bb 1f       	adc	r27, r27
    2fd2:	88 0f       	add	r24, r24
    2fd4:	99 1f       	adc	r25, r25
    2fd6:	aa 1f       	adc	r26, r26
    2fd8:	bb 1f       	adc	r27, r27
    2fda:	88 0f       	add	r24, r24
    2fdc:	99 1f       	adc	r25, r25
    2fde:	aa 1f       	adc	r26, r26
    2fe0:	bb 1f       	adc	r27, r27
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	aa 1f       	adc	r26, r26
    2fe8:	bb 1f       	adc	r27, r27
    2fea:	9c 01       	movw	r18, r24
    2fec:	ad 01       	movw	r20, r26
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	92 e1       	ldi	r25, 0x12	; 18
    2ff2:	aa e7       	ldi	r26, 0x7A	; 122
    2ff4:	b0 e0       	ldi	r27, 0x00	; 0
    2ff6:	bc 01       	movw	r22, r24
    2ff8:	cd 01       	movw	r24, r26
    2ffa:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__udivmodsi4>
    2ffe:	da 01       	movw	r26, r20
    3000:	c9 01       	movw	r24, r18
    3002:	01 97       	sbiw	r24, 0x01	; 1
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
		UBRRL=(u8)UBBR;
    3008:	e9 e2       	ldi	r30, 0x29	; 41
    300a:	f0 e0       	ldi	r31, 0x00	; 0
    300c:	89 81       	ldd	r24, Y+1	; 0x01
    300e:	80 83       	st	Z, r24
		UBRRH=(u8)((UBBR>>8)&0X0F);
    3010:	e0 e4       	ldi	r30, 0x40	; 64
    3012:	f0 e0       	ldi	r31, 0x00	; 0
    3014:	89 81       	ldd	r24, Y+1	; 0x01
    3016:	9a 81       	ldd	r25, Y+2	; 0x02
    3018:	89 2f       	mov	r24, r25
    301a:	99 27       	eor	r25, r25
    301c:	8f 70       	andi	r24, 0x0F	; 15
    301e:	80 83       	st	Z, r24
		UCSRB=(UCSRB&0xFC)|(ARG_u8DataBits&0x04);
    3020:	aa e2       	ldi	r26, 0x2A	; 42
    3022:	b0 e0       	ldi	r27, 0x00	; 0
    3024:	ea e2       	ldi	r30, 0x2A	; 42
    3026:	f0 e0       	ldi	r31, 0x00	; 0
    3028:	80 81       	ld	r24, Z
    302a:	98 2f       	mov	r25, r24
    302c:	9c 7f       	andi	r25, 0xFC	; 252
    302e:	88 85       	ldd	r24, Y+8	; 0x08
    3030:	84 70       	andi	r24, 0x04	; 4
    3032:	89 2b       	or	r24, r25
    3034:	8c 93       	st	X, r24
		UCSRC=(1<<URSEL)|(UCSRC&0XC1)|((ARG_u8DataBits&0X03)<<1)|(ARG_u8Parity)|(ARG_u8StopBits);
    3036:	a0 e4       	ldi	r26, 0x40	; 64
    3038:	b0 e0       	ldi	r27, 0x00	; 0
    303a:	e0 e4       	ldi	r30, 0x40	; 64
    303c:	f0 e0       	ldi	r31, 0x00	; 0
    303e:	80 81       	ld	r24, Z
    3040:	81 74       	andi	r24, 0x41	; 65
    3042:	28 2f       	mov	r18, r24
    3044:	20 68       	ori	r18, 0x80	; 128
    3046:	88 85       	ldd	r24, Y+8	; 0x08
    3048:	88 2f       	mov	r24, r24
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	83 70       	andi	r24, 0x03	; 3
    304e:	90 70       	andi	r25, 0x00	; 0
    3050:	88 0f       	add	r24, r24
    3052:	99 1f       	adc	r25, r25
    3054:	92 2f       	mov	r25, r18
    3056:	98 2b       	or	r25, r24
    3058:	89 85       	ldd	r24, Y+9	; 0x09
    305a:	98 2b       	or	r25, r24
    305c:	8a 85       	ldd	r24, Y+10	; 0x0a
    305e:	89 2b       	or	r24, r25
    3060:	8c 93       	st	X, r24
    3062:	02 c0       	rjmp	.+4      	; 0x3068 <MUART_stderrInit+0xfc>
	}
	else
	{
		L_stderrState=E_NOK;
    3064:	81 e0       	ldi	r24, 0x01	; 1
    3066:	8b 83       	std	Y+3, r24	; 0x03
	}
	return L_stderrState;
    3068:	8b 81       	ldd	r24, Y+3	; 0x03
}
    306a:	2a 96       	adiw	r28, 0x0a	; 10
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	cf 91       	pop	r28
    3078:	df 91       	pop	r29
    307a:	0f 91       	pop	r16
    307c:	08 95       	ret

0000307e <MUART_voidEnableTx>:

void MUART_voidEnableTx(void)
{
    307e:	df 93       	push	r29
    3080:	cf 93       	push	r28
    3082:	cd b7       	in	r28, 0x3d	; 61
    3084:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    3086:	aa e2       	ldi	r26, 0x2A	; 42
    3088:	b0 e0       	ldi	r27, 0x00	; 0
    308a:	ea e2       	ldi	r30, 0x2A	; 42
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	88 60       	ori	r24, 0x08	; 8
    3092:	8c 93       	st	X, r24
}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <MUART_voidDisableTx>:
void MUART_voidDisableTx(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	cd b7       	in	r28, 0x3d	; 61
    30a0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    30a2:	aa e2       	ldi	r26, 0x2A	; 42
    30a4:	b0 e0       	ldi	r27, 0x00	; 0
    30a6:	ea e2       	ldi	r30, 0x2A	; 42
    30a8:	f0 e0       	ldi	r31, 0x00	; 0
    30aa:	80 81       	ld	r24, Z
    30ac:	87 7f       	andi	r24, 0xF7	; 247
    30ae:	8c 93       	st	X, r24
}
    30b0:	cf 91       	pop	r28
    30b2:	df 91       	pop	r29
    30b4:	08 95       	ret

000030b6 <MUART_voidEnableRx>:

void MUART_voidEnableRx(void)
{
    30b6:	df 93       	push	r29
    30b8:	cf 93       	push	r28
    30ba:	cd b7       	in	r28, 0x3d	; 61
    30bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    30be:	aa e2       	ldi	r26, 0x2A	; 42
    30c0:	b0 e0       	ldi	r27, 0x00	; 0
    30c2:	ea e2       	ldi	r30, 0x2A	; 42
    30c4:	f0 e0       	ldi	r31, 0x00	; 0
    30c6:	80 81       	ld	r24, Z
    30c8:	80 61       	ori	r24, 0x10	; 16
    30ca:	8c 93       	st	X, r24
}
    30cc:	cf 91       	pop	r28
    30ce:	df 91       	pop	r29
    30d0:	08 95       	ret

000030d2 <MUART_voidDisableRx>:
void MUART_voidDisableRx(void)
{
    30d2:	df 93       	push	r29
    30d4:	cf 93       	push	r28
    30d6:	cd b7       	in	r28, 0x3d	; 61
    30d8:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    30da:	aa e2       	ldi	r26, 0x2A	; 42
    30dc:	b0 e0       	ldi	r27, 0x00	; 0
    30de:	ea e2       	ldi	r30, 0x2A	; 42
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	80 81       	ld	r24, Z
    30e4:	8f 7e       	andi	r24, 0xEF	; 239
    30e6:	8c 93       	st	X, r24
}
    30e8:	cf 91       	pop	r28
    30ea:	df 91       	pop	r29
    30ec:	08 95       	ret

000030ee <MUART_voidTxFlagPolling>:

void MUART_voidTxFlagPolling(void)
{
    30ee:	df 93       	push	r29
    30f0:	cf 93       	push	r28
    30f2:	cd b7       	in	r28, 0x3d	; 61
    30f4:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,TXC));
    30f6:	eb e2       	ldi	r30, 0x2B	; 43
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	82 95       	swap	r24
    30fe:	86 95       	lsr	r24
    3100:	86 95       	lsr	r24
    3102:	83 70       	andi	r24, 0x03	; 3
    3104:	88 2f       	mov	r24, r24
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	81 70       	andi	r24, 0x01	; 1
    310a:	90 70       	andi	r25, 0x00	; 0
    310c:	00 97       	sbiw	r24, 0x00	; 0
    310e:	99 f3       	breq	.-26     	; 0x30f6 <MUART_voidTxFlagPolling+0x8>
}
    3110:	cf 91       	pop	r28
    3112:	df 91       	pop	r29
    3114:	08 95       	ret

00003116 <MUART_voidRxFlagPolling>:
void MUART_voidRxFlagPolling(void)
{
    3116:	df 93       	push	r29
    3118:	cf 93       	push	r28
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,RXC));
    311e:	eb e2       	ldi	r30, 0x2B	; 43
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	88 23       	and	r24, r24
    3126:	dc f7       	brge	.-10     	; 0x311e <MUART_voidRxFlagPolling+0x8>
}
    3128:	cf 91       	pop	r28
    312a:	df 91       	pop	r29
    312c:	08 95       	ret

0000312e <MUART_voidRUDREFlagPolling>:
void MUART_voidRUDREFlagPolling(void)
{
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,UDRE));
    3136:	eb e2       	ldi	r30, 0x2B	; 43
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	80 81       	ld	r24, Z
    313c:	82 95       	swap	r24
    313e:	86 95       	lsr	r24
    3140:	87 70       	andi	r24, 0x07	; 7
    3142:	88 2f       	mov	r24, r24
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	81 70       	andi	r24, 0x01	; 1
    3148:	90 70       	andi	r25, 0x00	; 0
    314a:	00 97       	sbiw	r24, 0x00	; 0
    314c:	a1 f3       	breq	.-24     	; 0x3136 <MUART_voidRUDREFlagPolling+0x8>
}
    314e:	cf 91       	pop	r28
    3150:	df 91       	pop	r29
    3152:	08 95       	ret

00003154 <MUART_voidSendChar>:

void MUART_voidSendChar(char ARG_charChar)
{
    3154:	df 93       	push	r29
    3156:	cf 93       	push	r28
    3158:	0f 92       	push	r0
    315a:	cd b7       	in	r28, 0x3d	; 61
    315c:	de b7       	in	r29, 0x3e	; 62
    315e:	89 83       	std	Y+1, r24	; 0x01
	MUART_voidRUDREFlagPolling();
    3160:	0e 94 97 18 	call	0x312e	; 0x312e <MUART_voidRUDREFlagPolling>
	UDR=ARG_charChar;
    3164:	ec e2       	ldi	r30, 0x2C	; 44
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	89 81       	ldd	r24, Y+1	; 0x01
    316a:	80 83       	st	Z, r24
}
    316c:	0f 90       	pop	r0
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	08 95       	ret

00003174 <MUART_voidSendString>:
void MUART_voidSendString(char * ARG_charpString)
{
    3174:	df 93       	push	r29
    3176:	cf 93       	push	r28
    3178:	00 d0       	rcall	.+0      	; 0x317a <MUART_voidSendString+0x6>
    317a:	00 d0       	rcall	.+0      	; 0x317c <MUART_voidSendString+0x8>
    317c:	00 d0       	rcall	.+0      	; 0x317e <MUART_voidSendString+0xa>
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	9e 83       	std	Y+6, r25	; 0x06
    3184:	8d 83       	std	Y+5, r24	; 0x05
	u32 L_u32Counter=0;
    3186:	19 82       	std	Y+1, r1	; 0x01
    3188:	1a 82       	std	Y+2, r1	; 0x02
    318a:	1b 82       	std	Y+3, r1	; 0x03
    318c:	1c 82       	std	Y+4, r1	; 0x04
    318e:	15 c0       	rjmp	.+42     	; 0x31ba <MUART_voidSendString+0x46>
	while(ARG_charpString[L_u32Counter]!='\0')
	{
		L_u32Counter++;
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	9a 81       	ldd	r25, Y+2	; 0x02
    3194:	ab 81       	ldd	r26, Y+3	; 0x03
    3196:	bc 81       	ldd	r27, Y+4	; 0x04
    3198:	01 96       	adiw	r24, 0x01	; 1
    319a:	a1 1d       	adc	r26, r1
    319c:	b1 1d       	adc	r27, r1
    319e:	89 83       	std	Y+1, r24	; 0x01
    31a0:	9a 83       	std	Y+2, r25	; 0x02
    31a2:	ab 83       	std	Y+3, r26	; 0x03
    31a4:	bc 83       	std	Y+4, r27	; 0x04
		MUART_voidSendChar(ARG_charpString[L_u32Counter]);	
    31a6:	29 81       	ldd	r18, Y+1	; 0x01
    31a8:	3a 81       	ldd	r19, Y+2	; 0x02
    31aa:	8d 81       	ldd	r24, Y+5	; 0x05
    31ac:	9e 81       	ldd	r25, Y+6	; 0x06
    31ae:	fc 01       	movw	r30, r24
    31b0:	e2 0f       	add	r30, r18
    31b2:	f3 1f       	adc	r31, r19
    31b4:	80 81       	ld	r24, Z
    31b6:	0e 94 aa 18 	call	0x3154	; 0x3154 <MUART_voidSendChar>
	UDR=ARG_charChar;
}
void MUART_voidSendString(char * ARG_charpString)
{
	u32 L_u32Counter=0;
	while(ARG_charpString[L_u32Counter]!='\0')
    31ba:	29 81       	ldd	r18, Y+1	; 0x01
    31bc:	3a 81       	ldd	r19, Y+2	; 0x02
    31be:	8d 81       	ldd	r24, Y+5	; 0x05
    31c0:	9e 81       	ldd	r25, Y+6	; 0x06
    31c2:	fc 01       	movw	r30, r24
    31c4:	e2 0f       	add	r30, r18
    31c6:	f3 1f       	adc	r31, r19
    31c8:	80 81       	ld	r24, Z
    31ca:	88 23       	and	r24, r24
    31cc:	09 f7       	brne	.-62     	; 0x3190 <MUART_voidSendString+0x1c>
	{
		L_u32Counter++;
		MUART_voidSendChar(ARG_charpString[L_u32Counter]);	
	}
}
    31ce:	26 96       	adiw	r28, 0x06	; 6
    31d0:	0f b6       	in	r0, 0x3f	; 63
    31d2:	f8 94       	cli
    31d4:	de bf       	out	0x3e, r29	; 62
    31d6:	0f be       	out	0x3f, r0	; 63
    31d8:	cd bf       	out	0x3d, r28	; 61
    31da:	cf 91       	pop	r28
    31dc:	df 91       	pop	r29
    31de:	08 95       	ret

000031e0 <MUART_charReceiveChar>:


char MUART_charReceiveChar(void)
{
    31e0:	df 93       	push	r29
    31e2:	cf 93       	push	r28
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
	MUART_voidRxFlagPolling();
    31e8:	0e 94 8b 18 	call	0x3116	; 0x3116 <MUART_voidRxFlagPolling>
	return	UDR;
    31ec:	ec e2       	ldi	r30, 0x2C	; 44
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
}
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <MUART_voidReceiveStringUntil>:
void MUART_voidReceiveStringUntil(char * ARG_charpString,char ARG_charTerminator)
{
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	df 93       	push	r29
    31fe:	cf 93       	push	r28
    3200:	cd b7       	in	r28, 0x3d	; 61
    3202:	de b7       	in	r29, 0x3e	; 62
    3204:	27 97       	sbiw	r28, 0x07	; 7
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	f8 94       	cli
    320a:	de bf       	out	0x3e, r29	; 62
    320c:	0f be       	out	0x3f, r0	; 63
    320e:	cd bf       	out	0x3d, r28	; 61
    3210:	9e 83       	std	Y+6, r25	; 0x06
    3212:	8d 83       	std	Y+5, r24	; 0x05
    3214:	6f 83       	std	Y+7, r22	; 0x07
	u32 L_u32Counter=0;
    3216:	19 82       	std	Y+1, r1	; 0x01
    3218:	1a 82       	std	Y+2, r1	; 0x02
    321a:	1b 82       	std	Y+3, r1	; 0x03
    321c:	1c 82       	std	Y+4, r1	; 0x04
	ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
    321e:	29 81       	ldd	r18, Y+1	; 0x01
    3220:	3a 81       	ldd	r19, Y+2	; 0x02
    3222:	8d 81       	ldd	r24, Y+5	; 0x05
    3224:	9e 81       	ldd	r25, Y+6	; 0x06
    3226:	8c 01       	movw	r16, r24
    3228:	02 0f       	add	r16, r18
    322a:	13 1f       	adc	r17, r19
    322c:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    3230:	f8 01       	movw	r30, r16
    3232:	80 83       	st	Z, r24
    3234:	16 c0       	rjmp	.+44     	; 0x3262 <MUART_voidReceiveStringUntil+0x6a>
	while(ARG_charpString[L_u32Counter]!=ARG_charTerminator)
	{
		L_u32Counter++;
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	9a 81       	ldd	r25, Y+2	; 0x02
    323a:	ab 81       	ldd	r26, Y+3	; 0x03
    323c:	bc 81       	ldd	r27, Y+4	; 0x04
    323e:	01 96       	adiw	r24, 0x01	; 1
    3240:	a1 1d       	adc	r26, r1
    3242:	b1 1d       	adc	r27, r1
    3244:	89 83       	std	Y+1, r24	; 0x01
    3246:	9a 83       	std	Y+2, r25	; 0x02
    3248:	ab 83       	std	Y+3, r26	; 0x03
    324a:	bc 83       	std	Y+4, r27	; 0x04
		ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
    324c:	29 81       	ldd	r18, Y+1	; 0x01
    324e:	3a 81       	ldd	r19, Y+2	; 0x02
    3250:	8d 81       	ldd	r24, Y+5	; 0x05
    3252:	9e 81       	ldd	r25, Y+6	; 0x06
    3254:	8c 01       	movw	r16, r24
    3256:	02 0f       	add	r16, r18
    3258:	13 1f       	adc	r17, r19
    325a:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    325e:	f8 01       	movw	r30, r16
    3260:	80 83       	st	Z, r24
}
void MUART_voidReceiveStringUntil(char * ARG_charpString,char ARG_charTerminator)
{
	u32 L_u32Counter=0;
	ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
	while(ARG_charpString[L_u32Counter]!=ARG_charTerminator)
    3262:	29 81       	ldd	r18, Y+1	; 0x01
    3264:	3a 81       	ldd	r19, Y+2	; 0x02
    3266:	8d 81       	ldd	r24, Y+5	; 0x05
    3268:	9e 81       	ldd	r25, Y+6	; 0x06
    326a:	fc 01       	movw	r30, r24
    326c:	e2 0f       	add	r30, r18
    326e:	f3 1f       	adc	r31, r19
    3270:	90 81       	ld	r25, Z
    3272:	8f 81       	ldd	r24, Y+7	; 0x07
    3274:	98 17       	cp	r25, r24
    3276:	f9 f6       	brne	.-66     	; 0x3236 <MUART_voidReceiveStringUntil+0x3e>
	{
		L_u32Counter++;
		ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
	}
	ARG_charpString[L_u32Counter]='\0';
    3278:	89 81       	ldd	r24, Y+1	; 0x01
    327a:	9a 81       	ldd	r25, Y+2	; 0x02
    327c:	2d 81       	ldd	r18, Y+5	; 0x05
    327e:	3e 81       	ldd	r19, Y+6	; 0x06
    3280:	f9 01       	movw	r30, r18
    3282:	e8 0f       	add	r30, r24
    3284:	f9 1f       	adc	r31, r25
    3286:	10 82       	st	Z, r1
}
    3288:	27 96       	adiw	r28, 0x07	; 7
    328a:	0f b6       	in	r0, 0x3f	; 63
    328c:	f8 94       	cli
    328e:	de bf       	out	0x3e, r29	; 62
    3290:	0f be       	out	0x3f, r0	; 63
    3292:	cd bf       	out	0x3d, r28	; 61
    3294:	cf 91       	pop	r28
    3296:	df 91       	pop	r29
    3298:	1f 91       	pop	r17
    329a:	0f 91       	pop	r16
    329c:	08 95       	ret

0000329e <MUART_stderrEnableInterrupt>:

STD_error_t MUART_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	00 d0       	rcall	.+0      	; 0x32a4 <MUART_stderrEnableInterrupt+0x6>
    32a4:	cd b7       	in	r28, 0x3d	; 61
    32a6:	de b7       	in	r29, 0x3e	; 62
    32a8:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    32aa:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8InterruptSource>=5)&&(ARG_u8InterruptSource<=7))
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	85 30       	cpi	r24, 0x05	; 5
    32b0:	b8 f0       	brcs	.+46     	; 0x32e0 <MUART_stderrEnableInterrupt+0x42>
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	88 30       	cpi	r24, 0x08	; 8
    32b6:	a0 f4       	brcc	.+40     	; 0x32e0 <MUART_stderrEnableInterrupt+0x42>
	{
		SET_BIT(UCSRB,ARG_u8InterruptSource);
    32b8:	aa e2       	ldi	r26, 0x2A	; 42
    32ba:	b0 e0       	ldi	r27, 0x00	; 0
    32bc:	ea e2       	ldi	r30, 0x2A	; 42
    32be:	f0 e0       	ldi	r31, 0x00	; 0
    32c0:	80 81       	ld	r24, Z
    32c2:	48 2f       	mov	r20, r24
    32c4:	8a 81       	ldd	r24, Y+2	; 0x02
    32c6:	28 2f       	mov	r18, r24
    32c8:	30 e0       	ldi	r19, 0x00	; 0
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	02 2e       	mov	r0, r18
    32d0:	02 c0       	rjmp	.+4      	; 0x32d6 <MUART_stderrEnableInterrupt+0x38>
    32d2:	88 0f       	add	r24, r24
    32d4:	99 1f       	adc	r25, r25
    32d6:	0a 94       	dec	r0
    32d8:	e2 f7       	brpl	.-8      	; 0x32d2 <MUART_stderrEnableInterrupt+0x34>
    32da:	84 2b       	or	r24, r20
    32dc:	8c 93       	st	X, r24
    32de:	02 c0       	rjmp	.+4      	; 0x32e4 <MUART_stderrEnableInterrupt+0x46>
	}
	else
	{
		L_stderrState=E_NOK;
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    32e4:	89 81       	ldd	r24, Y+1	; 0x01
}
    32e6:	0f 90       	pop	r0
    32e8:	0f 90       	pop	r0
    32ea:	cf 91       	pop	r28
    32ec:	df 91       	pop	r29
    32ee:	08 95       	ret

000032f0 <MUART_stderrDisableInterrupt>:
STD_error_t MUART_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    32f0:	df 93       	push	r29
    32f2:	cf 93       	push	r28
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <MUART_stderrDisableInterrupt+0x6>
    32f6:	cd b7       	in	r28, 0x3d	; 61
    32f8:	de b7       	in	r29, 0x3e	; 62
    32fa:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    32fc:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8InterruptSource>=5)&&(ARG_u8InterruptSource<=7))
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	85 30       	cpi	r24, 0x05	; 5
    3302:	c0 f0       	brcs	.+48     	; 0x3334 <MUART_stderrDisableInterrupt+0x44>
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	88 30       	cpi	r24, 0x08	; 8
    3308:	a8 f4       	brcc	.+42     	; 0x3334 <MUART_stderrDisableInterrupt+0x44>
	{
	CLEAR_BIT(UCSRB,ARG_u8InterruptSource);
    330a:	aa e2       	ldi	r26, 0x2A	; 42
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	ea e2       	ldi	r30, 0x2A	; 42
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 2e       	mov	r0, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <MUART_stderrDisableInterrupt+0x38>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	0a 94       	dec	r0
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <MUART_stderrDisableInterrupt+0x34>
    332c:	80 95       	com	r24
    332e:	84 23       	and	r24, r20
    3330:	8c 93       	st	X, r24
    3332:	02 c0       	rjmp	.+4      	; 0x3338 <MUART_stderrDisableInterrupt+0x48>
	}
	else
	{
		L_stderrState=E_NOK;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3338:	89 81       	ldd	r24, Y+1	; 0x01
}
    333a:	0f 90       	pop	r0
    333c:	0f 90       	pop	r0
    333e:	cf 91       	pop	r28
    3340:	df 91       	pop	r29
    3342:	08 95       	ret

00003344 <MUART_stderrSetCallback>:

STD_error_t MUART_stderrSetCallback(void(*ARG_pvoidfUserFunction)(void),u8 ARG_u8InterruptSource)
{
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	00 d0       	rcall	.+0      	; 0x334a <MUART_stderrSetCallback+0x6>
    334a:	00 d0       	rcall	.+0      	; 0x334c <MUART_stderrSetCallback+0x8>
    334c:	00 d0       	rcall	.+0      	; 0x334e <MUART_stderrSetCallback+0xa>
    334e:	cd b7       	in	r28, 0x3d	; 61
    3350:	de b7       	in	r29, 0x3e	; 62
    3352:	9b 83       	std	Y+3, r25	; 0x03
    3354:	8a 83       	std	Y+2, r24	; 0x02
    3356:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    3358:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL)
    335a:	8a 81       	ldd	r24, Y+2	; 0x02
    335c:	9b 81       	ldd	r25, Y+3	; 0x03
    335e:	00 97       	sbiw	r24, 0x00	; 0
    3360:	69 f1       	breq	.+90     	; 0x33bc <MUART_stderrSetCallback+0x78>
	{
		switch(ARG_u8InterruptSource)
    3362:	8c 81       	ldd	r24, Y+4	; 0x04
    3364:	28 2f       	mov	r18, r24
    3366:	30 e0       	ldi	r19, 0x00	; 0
    3368:	3e 83       	std	Y+6, r19	; 0x06
    336a:	2d 83       	std	Y+5, r18	; 0x05
    336c:	8d 81       	ldd	r24, Y+5	; 0x05
    336e:	9e 81       	ldd	r25, Y+6	; 0x06
    3370:	86 30       	cpi	r24, 0x06	; 6
    3372:	91 05       	cpc	r25, r1
    3374:	91 f0       	breq	.+36     	; 0x339a <MUART_stderrSetCallback+0x56>
    3376:	2d 81       	ldd	r18, Y+5	; 0x05
    3378:	3e 81       	ldd	r19, Y+6	; 0x06
    337a:	27 30       	cpi	r18, 0x07	; 7
    337c:	31 05       	cpc	r19, r1
    337e:	31 f0       	breq	.+12     	; 0x338c <MUART_stderrSetCallback+0x48>
    3380:	8d 81       	ldd	r24, Y+5	; 0x05
    3382:	9e 81       	ldd	r25, Y+6	; 0x06
    3384:	85 30       	cpi	r24, 0x05	; 5
    3386:	91 05       	cpc	r25, r1
    3388:	79 f0       	breq	.+30     	; 0x33a8 <MUART_stderrSetCallback+0x64>
    338a:	15 c0       	rjmp	.+42     	; 0x33b6 <MUART_stderrSetCallback+0x72>
		{
			case MUART_INTERRUPT_RXC:MUART_pvoidfUserFunctionRxC=ARG_pvoidfUserFunction;break;
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	90 93 d0 01 	sts	0x01D0, r25
    3394:	80 93 cf 01 	sts	0x01CF, r24
    3398:	13 c0       	rjmp	.+38     	; 0x33c0 <MUART_stderrSetCallback+0x7c>
			case MUART_INTERRUPT_TXC:MUART_pvoidfUserFunctionTxC=ARG_pvoidfUserFunction;break;
    339a:	8a 81       	ldd	r24, Y+2	; 0x02
    339c:	9b 81       	ldd	r25, Y+3	; 0x03
    339e:	90 93 d2 01 	sts	0x01D2, r25
    33a2:	80 93 d1 01 	sts	0x01D1, r24
    33a6:	0c c0       	rjmp	.+24     	; 0x33c0 <MUART_stderrSetCallback+0x7c>
			case MUART_INTERRUPT_UDR_EMPTY:MUART_pvoidfUserFunctionUDREmpty=ARG_pvoidfUserFunction;break;
    33a8:	8a 81       	ldd	r24, Y+2	; 0x02
    33aa:	9b 81       	ldd	r25, Y+3	; 0x03
    33ac:	90 93 d4 01 	sts	0x01D4, r25
    33b0:	80 93 d3 01 	sts	0x01D3, r24
    33b4:	05 c0       	rjmp	.+10     	; 0x33c0 <MUART_stderrSetCallback+0x7c>
			default: L_stderrState=E_NOK;
    33b6:	81 e0       	ldi	r24, 0x01	; 1
    33b8:	89 83       	std	Y+1, r24	; 0x01
    33ba:	02 c0       	rjmp	.+4      	; 0x33c0 <MUART_stderrSetCallback+0x7c>
		}
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    33bc:	82 e0       	ldi	r24, 0x02	; 2
    33be:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    33c0:	89 81       	ldd	r24, Y+1	; 0x01
}
    33c2:	26 96       	adiw	r28, 0x06	; 6
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	08 95       	ret

000033d4 <__vector_13>:
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    33d4:	1f 92       	push	r1
    33d6:	0f 92       	push	r0
    33d8:	0f b6       	in	r0, 0x3f	; 63
    33da:	0f 92       	push	r0
    33dc:	11 24       	eor	r1, r1
    33de:	2f 93       	push	r18
    33e0:	3f 93       	push	r19
    33e2:	4f 93       	push	r20
    33e4:	5f 93       	push	r21
    33e6:	6f 93       	push	r22
    33e8:	7f 93       	push	r23
    33ea:	8f 93       	push	r24
    33ec:	9f 93       	push	r25
    33ee:	af 93       	push	r26
    33f0:	bf 93       	push	r27
    33f2:	ef 93       	push	r30
    33f4:	ff 93       	push	r31
    33f6:	df 93       	push	r29
    33f8:	cf 93       	push	r28
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionRxC!=NULL)
    33fe:	80 91 cf 01 	lds	r24, 0x01CF
    3402:	90 91 d0 01 	lds	r25, 0x01D0
    3406:	00 97       	sbiw	r24, 0x00	; 0
    3408:	29 f0       	breq	.+10     	; 0x3414 <__vector_13+0x40>
	{
		MUART_pvoidfUserFunctionRxC();
    340a:	e0 91 cf 01 	lds	r30, 0x01CF
    340e:	f0 91 d0 01 	lds	r31, 0x01D0
    3412:	09 95       	icall
	}
}
    3414:	cf 91       	pop	r28
    3416:	df 91       	pop	r29
    3418:	ff 91       	pop	r31
    341a:	ef 91       	pop	r30
    341c:	bf 91       	pop	r27
    341e:	af 91       	pop	r26
    3420:	9f 91       	pop	r25
    3422:	8f 91       	pop	r24
    3424:	7f 91       	pop	r23
    3426:	6f 91       	pop	r22
    3428:	5f 91       	pop	r21
    342a:	4f 91       	pop	r20
    342c:	3f 91       	pop	r19
    342e:	2f 91       	pop	r18
    3430:	0f 90       	pop	r0
    3432:	0f be       	out	0x3f, r0	; 63
    3434:	0f 90       	pop	r0
    3436:	1f 90       	pop	r1
    3438:	18 95       	reti

0000343a <__vector_14>:
void __vector_14(void)  __attribute__((signal));
void __vector_14(void)
{
    343a:	1f 92       	push	r1
    343c:	0f 92       	push	r0
    343e:	0f b6       	in	r0, 0x3f	; 63
    3440:	0f 92       	push	r0
    3442:	11 24       	eor	r1, r1
    3444:	2f 93       	push	r18
    3446:	3f 93       	push	r19
    3448:	4f 93       	push	r20
    344a:	5f 93       	push	r21
    344c:	6f 93       	push	r22
    344e:	7f 93       	push	r23
    3450:	8f 93       	push	r24
    3452:	9f 93       	push	r25
    3454:	af 93       	push	r26
    3456:	bf 93       	push	r27
    3458:	ef 93       	push	r30
    345a:	ff 93       	push	r31
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionUDREmpty!=NULL)
    3464:	80 91 d3 01 	lds	r24, 0x01D3
    3468:	90 91 d4 01 	lds	r25, 0x01D4
    346c:	00 97       	sbiw	r24, 0x00	; 0
    346e:	29 f0       	breq	.+10     	; 0x347a <__vector_14+0x40>
	{
		MUART_pvoidfUserFunctionUDREmpty();
    3470:	e0 91 d3 01 	lds	r30, 0x01D3
    3474:	f0 91 d4 01 	lds	r31, 0x01D4
    3478:	09 95       	icall
	}
}
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	ff 91       	pop	r31
    3480:	ef 91       	pop	r30
    3482:	bf 91       	pop	r27
    3484:	af 91       	pop	r26
    3486:	9f 91       	pop	r25
    3488:	8f 91       	pop	r24
    348a:	7f 91       	pop	r23
    348c:	6f 91       	pop	r22
    348e:	5f 91       	pop	r21
    3490:	4f 91       	pop	r20
    3492:	3f 91       	pop	r19
    3494:	2f 91       	pop	r18
    3496:	0f 90       	pop	r0
    3498:	0f be       	out	0x3f, r0	; 63
    349a:	0f 90       	pop	r0
    349c:	1f 90       	pop	r1
    349e:	18 95       	reti

000034a0 <__vector_15>:
void __vector_15(void)  __attribute__((signal));
void __vector_15(void)
{
    34a0:	1f 92       	push	r1
    34a2:	0f 92       	push	r0
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	0f 92       	push	r0
    34a8:	11 24       	eor	r1, r1
    34aa:	2f 93       	push	r18
    34ac:	3f 93       	push	r19
    34ae:	4f 93       	push	r20
    34b0:	5f 93       	push	r21
    34b2:	6f 93       	push	r22
    34b4:	7f 93       	push	r23
    34b6:	8f 93       	push	r24
    34b8:	9f 93       	push	r25
    34ba:	af 93       	push	r26
    34bc:	bf 93       	push	r27
    34be:	ef 93       	push	r30
    34c0:	ff 93       	push	r31
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionTxC!=NULL)
    34ca:	80 91 d1 01 	lds	r24, 0x01D1
    34ce:	90 91 d2 01 	lds	r25, 0x01D2
    34d2:	00 97       	sbiw	r24, 0x00	; 0
    34d4:	29 f0       	breq	.+10     	; 0x34e0 <__vector_15+0x40>
	{
		MUART_pvoidfUserFunctionTxC();
    34d6:	e0 91 d1 01 	lds	r30, 0x01D1
    34da:	f0 91 d2 01 	lds	r31, 0x01D2
    34de:	09 95       	icall
	}
}
    34e0:	cf 91       	pop	r28
    34e2:	df 91       	pop	r29
    34e4:	ff 91       	pop	r31
    34e6:	ef 91       	pop	r30
    34e8:	bf 91       	pop	r27
    34ea:	af 91       	pop	r26
    34ec:	9f 91       	pop	r25
    34ee:	8f 91       	pop	r24
    34f0:	7f 91       	pop	r23
    34f2:	6f 91       	pop	r22
    34f4:	5f 91       	pop	r21
    34f6:	4f 91       	pop	r20
    34f8:	3f 91       	pop	r19
    34fa:	2f 91       	pop	r18
    34fc:	0f 90       	pop	r0
    34fe:	0f be       	out	0x3f, r0	; 63
    3500:	0f 90       	pop	r0
    3502:	1f 90       	pop	r1
    3504:	18 95       	reti

00003506 <MUART_charReturnUDR>:
char MUART_charReturnUDR(void)
{
    3506:	df 93       	push	r29
    3508:	cf 93       	push	r28
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    350e:	ec e2       	ldi	r30, 0x2C	; 44
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	80 81       	ld	r24, Z
}
    3514:	cf 91       	pop	r28
    3516:	df 91       	pop	r29
    3518:	08 95       	ret

0000351a <main>:
#define MOTOR_PORT	MDIO_PORTD
#define MOTOR_PIN	MDIO_PIN7
char L_charOperation;
char L_charCallBackData;
int main(void)
{
    351a:	0f 93       	push	r16
    351c:	df 93       	push	r29
    351e:	cf 93       	push	r28
    3520:	cd b7       	in	r28, 0x3d	; 61
    3522:	de b7       	in	r29, 0x3e	; 62
	MDIO_StderrSetPortDirection(MDIO_PORTB,0x0F);
    3524:	82 e0       	ldi	r24, 0x02	; 2
    3526:	6f e0       	ldi	r22, 0x0F	; 15
    3528:	0e 94 a2 0c 	call	0x1944	; 0x1944 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(MDIO_PORTB,0xF0);
    352c:	82 e0       	ldi	r24, 0x02	; 2
    352e:	60 ef       	ldi	r22, 0xF0	; 240
    3530:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <MDIO_StderrSetPortValue>
	MDIO_StderrSetPinDirection(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_OUTPUT);
    3534:	84 e0       	ldi	r24, 0x04	; 4
    3536:	67 e0       	ldi	r22, 0x07	; 7
    3538:	41 e0       	ldi	r20, 0x01	; 1
    353a:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <MDIO_StderrSetPinDirection>
	HLCD_voidinit();
    353e:	0e 94 3c 08 	call	0x1078	; 0x1078 <HLCD_voidinit>
	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_2);
    3542:	81 e0       	ldi	r24, 0x01	; 1
    3544:	61 e0       	ldi	r22, 0x01	; 1
    3546:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <MADC_stderrInit>
	MADC_voidAdcEnable();
    354a:	0e 94 37 0b 	call	0x166e	; 0x166e <MADC_voidAdcEnable>
	MUART_stderrInit(9600,MUART_DATABITS_8,MUART_PARITY_NONE,MUART_STOPBITS_1);
    354e:	60 e8       	ldi	r22, 0x80	; 128
    3550:	75 e2       	ldi	r23, 0x25	; 37
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	90 e0       	ldi	r25, 0x00	; 0
    3556:	43 e0       	ldi	r20, 0x03	; 3
    3558:	20 e0       	ldi	r18, 0x00	; 0
    355a:	00 e0       	ldi	r16, 0x00	; 0
    355c:	0e 94 b6 17 	call	0x2f6c	; 0x2f6c <MUART_stderrInit>
	MUART_voidEnableRx();
    3560:	0e 94 5b 18 	call	0x30b6	; 0x30b6 <MUART_voidEnableRx>
	MGIE_voidEnable();
    3564:	0e 94 4f 12 	call	0x249e	; 0x249e <MGIE_voidEnable>
	L_charOperation=MUART_charReceiveChar();
    3568:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    356c:	80 93 d8 01 	sts	0x01D8, r24
	if(L_charOperation=='S')
    3570:	80 91 d8 01 	lds	r24, 0x01D8
    3574:	83 35       	cpi	r24, 0x53	; 83
    3576:	29 f4       	brne	.+10     	; 0x3582 <main+0x68>
	{
		HLCD_voidSendString("HELLO");
    3578:	80 e6       	ldi	r24, 0x60	; 96
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
    3580:	06 c0       	rjmp	.+12     	; 0x358e <main+0x74>
	}
	else
	{
		return 0;
    3582:	80 e0       	ldi	r24, 0x00	; 0
    3584:	90 e0       	ldi	r25, 0x00	; 0
		else
		{

		}
	}
}
    3586:	cf 91       	pop	r28
    3588:	df 91       	pop	r29
    358a:	0f 91       	pop	r16
    358c:	08 95       	ret
	{
		return 0;
	}
	while(1)
	{
		HLCD_voidSendCommand(HLCD_CLEAR);
    358e:	81 e0       	ldi	r24, 0x01	; 1
    3590:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
		L_charOperation=MUART_charReceiveChar();
    3594:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    3598:	80 93 d8 01 	sts	0x01D8, r24
		if(L_charOperation=='M')
    359c:	80 91 d8 01 	lds	r24, 0x01D8
    35a0:	8d 34       	cpi	r24, 0x4D	; 77
    35a2:	19 f4       	brne	.+6      	; 0x35aa <main+0x90>
		{
			HOME_voidManualMode();
    35a4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <HOME_voidManualMode>
    35a8:	f2 cf       	rjmp	.-28     	; 0x358e <main+0x74>
		}
		else if(L_charOperation=='A')
    35aa:	80 91 d8 01 	lds	r24, 0x01D8
    35ae:	81 34       	cpi	r24, 0x41	; 65
    35b0:	71 f7       	brne	.-36     	; 0x358e <main+0x74>
		{
			HOME_voidAutoMode();
    35b2:	0e 94 f9 1a 	call	0x35f2	; 0x35f2 <HOME_voidAutoMode>
    35b6:	eb cf       	rjmp	.-42     	; 0x358e <main+0x74>

000035b8 <HOME_voidManualMode>:
		}
	}
}

void HOME_voidManualMode(void)
{
    35b8:	df 93       	push	r29
    35ba:	cf 93       	push	r28
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(HLCD_CLEAR);
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("Maunal Mode");
    35c6:	86 e6       	ldi	r24, 0x66	; 102
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	while(1)
	{
		L_charOperation=MUART_charReceiveChar();
    35ce:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    35d2:	80 93 d8 01 	sts	0x01D8, r24
		if(L_charOperation=='F')
    35d6:	80 91 d8 01 	lds	r24, 0x01D8
    35da:	86 34       	cpi	r24, 0x46	; 70
    35dc:	19 f4       	brne	.+6      	; 0x35e4 <HOME_voidManualMode+0x2c>
		{
			HOME_voidControlFan();
    35de:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <HOME_voidControlFan>
    35e2:	f5 cf       	rjmp	.-22     	; 0x35ce <HOME_voidManualMode+0x16>
		}
		else if(L_charOperation=='B')
    35e4:	80 91 d8 01 	lds	r24, 0x01D8
    35e8:	82 34       	cpi	r24, 0x42	; 66
    35ea:	89 f7       	brne	.-30     	; 0x35ce <HOME_voidManualMode+0x16>
		else
		{
			// for now do nothing
		}
	}
}
    35ec:	cf 91       	pop	r28
    35ee:	df 91       	pop	r29
    35f0:	08 95       	ret

000035f2 <HOME_voidAutoMode>:
void HOME_voidAutoMode(void)
{
    35f2:	df 93       	push	r29
    35f4:	cf 93       	push	r28
    35f6:	00 d0       	rcall	.+0      	; 0x35f8 <HOME_voidAutoMode+0x6>
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <HOME_voidAutoMode+0x8>
    35fa:	00 d0       	rcall	.+0      	; 0x35fc <HOME_voidAutoMode+0xa>
    35fc:	cd b7       	in	r28, 0x3d	; 61
    35fe:	de b7       	in	r29, 0x3e	; 62
	u32 L_u32Temp;
	u16 L_u16reading;
	HLCD_voidSendCommand(1);
    3600:	81 e0       	ldi	r24, 0x01	; 1
    3602:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("Automatic Mode");
    3606:	82 e7       	ldi	r24, 0x72	; 114
    3608:	90 e0       	ldi	r25, 0x00	; 0
    360a:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	MUART_stderrEnableInterrupt(MUART_INTERRUPT_RXC);
    360e:	87 e0       	ldi	r24, 0x07	; 7
    3610:	0e 94 4f 19 	call	0x329e	; 0x329e <MUART_stderrEnableInterrupt>
	while(1)
	{

		MUART_stderrSetCallback(HOME_voidExitAutoMode,MUART_INTERRUPT_RXC);
    3614:	8f e9       	ldi	r24, 0x9F	; 159
    3616:	9b e1       	ldi	r25, 0x1B	; 27
    3618:	67 e0       	ldi	r22, 0x07	; 7
    361a:	0e 94 a2 19 	call	0x3344	; 0x3344 <MUART_stderrSetCallback>
		if(L_charCallBackData!='B')
    361e:	80 91 d7 01 	lds	r24, 0x01D7
    3622:	82 34       	cpi	r24, 0x42	; 66
    3624:	e9 f1       	breq	.+122    	; 0x36a0 <HOME_voidAutoMode+0xae>
		{
			MADC_stderrRead(&L_u16reading,MADC_CHANNEL_ADC0);
    3626:	ce 01       	movw	r24, r28
    3628:	05 96       	adiw	r24, 0x05	; 5
    362a:	60 e0       	ldi	r22, 0x00	; 0
    362c:	0e 94 8f 0b 	call	0x171e	; 0x171e <MADC_stderrRead>
			L_u32Temp=((u32)L_u16reading*5000)/256;
    3630:	8d 81       	ldd	r24, Y+5	; 0x05
    3632:	9e 81       	ldd	r25, Y+6	; 0x06
    3634:	cc 01       	movw	r24, r24
    3636:	a0 e0       	ldi	r26, 0x00	; 0
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	28 e8       	ldi	r18, 0x88	; 136
    363c:	33 e1       	ldi	r19, 0x13	; 19
    363e:	40 e0       	ldi	r20, 0x00	; 0
    3640:	50 e0       	ldi	r21, 0x00	; 0
    3642:	bc 01       	movw	r22, r24
    3644:	cd 01       	movw	r24, r26
    3646:	0e 94 aa 1b 	call	0x3754	; 0x3754 <__mulsi3>
    364a:	dc 01       	movw	r26, r24
    364c:	cb 01       	movw	r24, r22
    364e:	89 2f       	mov	r24, r25
    3650:	9a 2f       	mov	r25, r26
    3652:	ab 2f       	mov	r26, r27
    3654:	bb 27       	eor	r27, r27
    3656:	89 83       	std	Y+1, r24	; 0x01
    3658:	9a 83       	std	Y+2, r25	; 0x02
    365a:	ab 83       	std	Y+3, r26	; 0x03
    365c:	bc 83       	std	Y+4, r27	; 0x04
			L_u32Temp/=10;
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	9a 81       	ldd	r25, Y+2	; 0x02
    3662:	ab 81       	ldd	r26, Y+3	; 0x03
    3664:	bc 81       	ldd	r27, Y+4	; 0x04
    3666:	2a e0       	ldi	r18, 0x0A	; 10
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	40 e0       	ldi	r20, 0x00	; 0
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	bc 01       	movw	r22, r24
    3670:	cd 01       	movw	r24, r26
    3672:	0e 94 c9 1b 	call	0x3792	; 0x3792 <__udivmodsi4>
    3676:	da 01       	movw	r26, r20
    3678:	c9 01       	movw	r24, r18
    367a:	89 83       	std	Y+1, r24	; 0x01
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	ab 83       	std	Y+3, r26	; 0x03
    3680:	bc 83       	std	Y+4, r27	; 0x04
			if(L_u32Temp>25)
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	ab 81       	ldd	r26, Y+3	; 0x03
    3688:	bc 81       	ldd	r27, Y+4	; 0x04
    368a:	8a 31       	cpi	r24, 0x1A	; 26
    368c:	91 05       	cpc	r25, r1
    368e:	a1 05       	cpc	r26, r1
    3690:	b1 05       	cpc	r27, r1
    3692:	18 f0       	brcs	.+6      	; 0x369a <HOME_voidAutoMode+0xa8>
			{
				OPEN_FAN();
    3694:	0e 94 87 1b 	call	0x370e	; 0x370e <OPEN_FAN>
    3698:	bd cf       	rjmp	.-134    	; 0x3614 <HOME_voidAutoMode+0x22>
			}
			else
			{
				CLOSE_FAN();
    369a:	0e 94 93 1b 	call	0x3726	; 0x3726 <CLOSE_FAN>
    369e:	ba cf       	rjmp	.-140    	; 0x3614 <HOME_voidAutoMode+0x22>
			}
		}
		else
		{
			MUART_stderrDisableInterrupt(MUART_INTERRUPT_RXC);
    36a0:	87 e0       	ldi	r24, 0x07	; 7
    36a2:	0e 94 78 19 	call	0x32f0	; 0x32f0 <MUART_stderrDisableInterrupt>
			break;
		}
	}


}
    36a6:	26 96       	adiw	r28, 0x06	; 6
    36a8:	0f b6       	in	r0, 0x3f	; 63
    36aa:	f8 94       	cli
    36ac:	de bf       	out	0x3e, r29	; 62
    36ae:	0f be       	out	0x3f, r0	; 63
    36b0:	cd bf       	out	0x3d, r28	; 61
    36b2:	cf 91       	pop	r28
    36b4:	df 91       	pop	r29
    36b6:	08 95       	ret

000036b8 <HOME_voidControlFan>:
void HOME_voidControlFan(void)
{
    36b8:	df 93       	push	r29
    36ba:	cf 93       	push	r28
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		L_charOperation=MUART_charReceiveChar();
    36c0:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <MUART_charReceiveChar>
    36c4:	80 93 d8 01 	sts	0x01D8, r24
		if(L_charOperation=='O')
    36c8:	80 91 d8 01 	lds	r24, 0x01D8
    36cc:	8f 34       	cpi	r24, 0x4F	; 79
    36ce:	51 f4       	brne	.+20     	; 0x36e4 <HOME_voidControlFan+0x2c>
		{
			HLCD_voidSendCommand(HLCD_CLEAR);
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("FAN ON");
    36d6:	81 e8       	ldi	r24, 0x81	; 129
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			OPEN_FAN();
    36de:	0e 94 87 1b 	call	0x370e	; 0x370e <OPEN_FAN>
    36e2:	ee cf       	rjmp	.-36     	; 0x36c0 <HOME_voidControlFan+0x8>
		}
		else if(L_charOperation=='F')
    36e4:	80 91 d8 01 	lds	r24, 0x01D8
    36e8:	86 34       	cpi	r24, 0x46	; 70
    36ea:	51 f4       	brne	.+20     	; 0x3700 <HOME_voidControlFan+0x48>
		{
			HLCD_voidSendCommand(HLCD_CLEAR);
    36ec:	81 e0       	ldi	r24, 0x01	; 1
    36ee:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("FAN OFF");
    36f2:	88 e8       	ldi	r24, 0x88	; 136
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			CLOSE_FAN();
    36fa:	0e 94 93 1b 	call	0x3726	; 0x3726 <CLOSE_FAN>
    36fe:	e0 cf       	rjmp	.-64     	; 0x36c0 <HOME_voidControlFan+0x8>
		}
		else if(L_charOperation=='B')
    3700:	80 91 d8 01 	lds	r24, 0x01D8
    3704:	82 34       	cpi	r24, 0x42	; 66
    3706:	e1 f6       	brne	.-72     	; 0x36c0 <HOME_voidControlFan+0x8>
		else
		{
			// for now do nothing
		}
	}
}
    3708:	cf 91       	pop	r28
    370a:	df 91       	pop	r29
    370c:	08 95       	ret

0000370e <OPEN_FAN>:

void OPEN_FAN(void)
{
    370e:	df 93       	push	r29
    3710:	cf 93       	push	r28
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
	MDIO_StderrSetPinValue(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_HIGH);
    3716:	84 e0       	ldi	r24, 0x04	; 4
    3718:	67 e0       	ldi	r22, 0x07	; 7
    371a:	41 e0       	ldi	r20, 0x01	; 1
    371c:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
}
    3720:	cf 91       	pop	r28
    3722:	df 91       	pop	r29
    3724:	08 95       	ret

00003726 <CLOSE_FAN>:
void CLOSE_FAN(void)
{
    3726:	df 93       	push	r29
    3728:	cf 93       	push	r28
    372a:	cd b7       	in	r28, 0x3d	; 61
    372c:	de b7       	in	r29, 0x3e	; 62
	MDIO_StderrSetPinValue(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_LOW);
    372e:	84 e0       	ldi	r24, 0x04	; 4
    3730:	67 e0       	ldi	r22, 0x07	; 7
    3732:	40 e0       	ldi	r20, 0x00	; 0
    3734:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <MDIO_StderrSetPinValue>
}
    3738:	cf 91       	pop	r28
    373a:	df 91       	pop	r29
    373c:	08 95       	ret

0000373e <HOME_voidExitAutoMode>:
void HOME_voidExitAutoMode(void)
{
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
	L_charCallBackData=MUART_charReturnUDR();
    3746:	0e 94 83 1a 	call	0x3506	; 0x3506 <MUART_charReturnUDR>
    374a:	80 93 d7 01 	sts	0x01D7, r24
}
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <__mulsi3>:
    3754:	62 9f       	mul	r22, r18
    3756:	d0 01       	movw	r26, r0
    3758:	73 9f       	mul	r23, r19
    375a:	f0 01       	movw	r30, r0
    375c:	82 9f       	mul	r24, r18
    375e:	e0 0d       	add	r30, r0
    3760:	f1 1d       	adc	r31, r1
    3762:	64 9f       	mul	r22, r20
    3764:	e0 0d       	add	r30, r0
    3766:	f1 1d       	adc	r31, r1
    3768:	92 9f       	mul	r25, r18
    376a:	f0 0d       	add	r31, r0
    376c:	83 9f       	mul	r24, r19
    376e:	f0 0d       	add	r31, r0
    3770:	74 9f       	mul	r23, r20
    3772:	f0 0d       	add	r31, r0
    3774:	65 9f       	mul	r22, r21
    3776:	f0 0d       	add	r31, r0
    3778:	99 27       	eor	r25, r25
    377a:	72 9f       	mul	r23, r18
    377c:	b0 0d       	add	r27, r0
    377e:	e1 1d       	adc	r30, r1
    3780:	f9 1f       	adc	r31, r25
    3782:	63 9f       	mul	r22, r19
    3784:	b0 0d       	add	r27, r0
    3786:	e1 1d       	adc	r30, r1
    3788:	f9 1f       	adc	r31, r25
    378a:	bd 01       	movw	r22, r26
    378c:	cf 01       	movw	r24, r30
    378e:	11 24       	eor	r1, r1
    3790:	08 95       	ret

00003792 <__udivmodsi4>:
    3792:	a1 e2       	ldi	r26, 0x21	; 33
    3794:	1a 2e       	mov	r1, r26
    3796:	aa 1b       	sub	r26, r26
    3798:	bb 1b       	sub	r27, r27
    379a:	fd 01       	movw	r30, r26
    379c:	0d c0       	rjmp	.+26     	; 0x37b8 <__udivmodsi4_ep>

0000379e <__udivmodsi4_loop>:
    379e:	aa 1f       	adc	r26, r26
    37a0:	bb 1f       	adc	r27, r27
    37a2:	ee 1f       	adc	r30, r30
    37a4:	ff 1f       	adc	r31, r31
    37a6:	a2 17       	cp	r26, r18
    37a8:	b3 07       	cpc	r27, r19
    37aa:	e4 07       	cpc	r30, r20
    37ac:	f5 07       	cpc	r31, r21
    37ae:	20 f0       	brcs	.+8      	; 0x37b8 <__udivmodsi4_ep>
    37b0:	a2 1b       	sub	r26, r18
    37b2:	b3 0b       	sbc	r27, r19
    37b4:	e4 0b       	sbc	r30, r20
    37b6:	f5 0b       	sbc	r31, r21

000037b8 <__udivmodsi4_ep>:
    37b8:	66 1f       	adc	r22, r22
    37ba:	77 1f       	adc	r23, r23
    37bc:	88 1f       	adc	r24, r24
    37be:	99 1f       	adc	r25, r25
    37c0:	1a 94       	dec	r1
    37c2:	69 f7       	brne	.-38     	; 0x379e <__udivmodsi4_loop>
    37c4:	60 95       	com	r22
    37c6:	70 95       	com	r23
    37c8:	80 95       	com	r24
    37ca:	90 95       	com	r25
    37cc:	9b 01       	movw	r18, r22
    37ce:	ac 01       	movw	r20, r24
    37d0:	bd 01       	movw	r22, r26
    37d2:	cf 01       	movw	r24, r30
    37d4:	08 95       	ret

000037d6 <__divmodsi4>:
    37d6:	97 fb       	bst	r25, 7
    37d8:	09 2e       	mov	r0, r25
    37da:	05 26       	eor	r0, r21
    37dc:	0e d0       	rcall	.+28     	; 0x37fa <__divmodsi4_neg1>
    37de:	57 fd       	sbrc	r21, 7
    37e0:	04 d0       	rcall	.+8      	; 0x37ea <__divmodsi4_neg2>
    37e2:	d7 df       	rcall	.-82     	; 0x3792 <__udivmodsi4>
    37e4:	0a d0       	rcall	.+20     	; 0x37fa <__divmodsi4_neg1>
    37e6:	00 1c       	adc	r0, r0
    37e8:	38 f4       	brcc	.+14     	; 0x37f8 <__divmodsi4_exit>

000037ea <__divmodsi4_neg2>:
    37ea:	50 95       	com	r21
    37ec:	40 95       	com	r20
    37ee:	30 95       	com	r19
    37f0:	21 95       	neg	r18
    37f2:	3f 4f       	sbci	r19, 0xFF	; 255
    37f4:	4f 4f       	sbci	r20, 0xFF	; 255
    37f6:	5f 4f       	sbci	r21, 0xFF	; 255

000037f8 <__divmodsi4_exit>:
    37f8:	08 95       	ret

000037fa <__divmodsi4_neg1>:
    37fa:	f6 f7       	brtc	.-4      	; 0x37f8 <__divmodsi4_exit>
    37fc:	90 95       	com	r25
    37fe:	80 95       	com	r24
    3800:	70 95       	com	r23
    3802:	61 95       	neg	r22
    3804:	7f 4f       	sbci	r23, 0xFF	; 255
    3806:	8f 4f       	sbci	r24, 0xFF	; 255
    3808:	9f 4f       	sbci	r25, 0xFF	; 255
    380a:	08 95       	ret

0000380c <__prologue_saves__>:
    380c:	2f 92       	push	r2
    380e:	3f 92       	push	r3
    3810:	4f 92       	push	r4
    3812:	5f 92       	push	r5
    3814:	6f 92       	push	r6
    3816:	7f 92       	push	r7
    3818:	8f 92       	push	r8
    381a:	9f 92       	push	r9
    381c:	af 92       	push	r10
    381e:	bf 92       	push	r11
    3820:	cf 92       	push	r12
    3822:	df 92       	push	r13
    3824:	ef 92       	push	r14
    3826:	ff 92       	push	r15
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	cf 93       	push	r28
    382e:	df 93       	push	r29
    3830:	cd b7       	in	r28, 0x3d	; 61
    3832:	de b7       	in	r29, 0x3e	; 62
    3834:	ca 1b       	sub	r28, r26
    3836:	db 0b       	sbc	r29, r27
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
    3842:	09 94       	ijmp

00003844 <__epilogue_restores__>:
    3844:	2a 88       	ldd	r2, Y+18	; 0x12
    3846:	39 88       	ldd	r3, Y+17	; 0x11
    3848:	48 88       	ldd	r4, Y+16	; 0x10
    384a:	5f 84       	ldd	r5, Y+15	; 0x0f
    384c:	6e 84       	ldd	r6, Y+14	; 0x0e
    384e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3850:	8c 84       	ldd	r8, Y+12	; 0x0c
    3852:	9b 84       	ldd	r9, Y+11	; 0x0b
    3854:	aa 84       	ldd	r10, Y+10	; 0x0a
    3856:	b9 84       	ldd	r11, Y+9	; 0x09
    3858:	c8 84       	ldd	r12, Y+8	; 0x08
    385a:	df 80       	ldd	r13, Y+7	; 0x07
    385c:	ee 80       	ldd	r14, Y+6	; 0x06
    385e:	fd 80       	ldd	r15, Y+5	; 0x05
    3860:	0c 81       	ldd	r16, Y+4	; 0x04
    3862:	1b 81       	ldd	r17, Y+3	; 0x03
    3864:	aa 81       	ldd	r26, Y+2	; 0x02
    3866:	b9 81       	ldd	r27, Y+1	; 0x01
    3868:	ce 0f       	add	r28, r30
    386a:	d1 1d       	adc	r29, r1
    386c:	0f b6       	in	r0, 0x3f	; 63
    386e:	f8 94       	cli
    3870:	de bf       	out	0x3e, r29	; 62
    3872:	0f be       	out	0x3f, r0	; 63
    3874:	cd bf       	out	0x3d, r28	; 61
    3876:	ed 01       	movw	r28, r26
    3878:	08 95       	ret

0000387a <_exit>:
    387a:	f8 94       	cli

0000387c <__stop_program>:
    387c:	ff cf       	rjmp	.-2      	; 0x387c <__stop_program>
