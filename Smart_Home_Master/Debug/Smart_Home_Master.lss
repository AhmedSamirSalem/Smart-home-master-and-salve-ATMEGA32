
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000043a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000242  00800060  000043a6  0000443a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000017  008002a2  008002a2  0000467c  2**0
                  ALLOC
  3 .stab         00004d04  00000000  00000000  0000467c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000227e  00000000  00000000  00009380  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b5fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b79e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b990  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000dd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000f121  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  000102f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  000104b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  000107ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001111c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 69 18 	jmp	0x30d2	; 0x30d2 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 36 18 	jmp	0x306c	; 0x306c <__vector_10>
      2c:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__vector_13>
      38:	0c 94 3f 1e 	jmp	0x3c7e	; 0x3c7e <__vector_14>
      3c:	0c 94 72 1e 	jmp	0x3ce4	; 0x3ce4 <__vector_15>
      40:	0c 94 b5 0d 	jmp	0x1b6a	; 0x1b6a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ea       	ldi	r30, 0xA6	; 166
      68:	f3 e4       	ldi	r31, 0x43	; 67
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3a       	cpi	r26, 0xA2	; 162
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a2 ea       	ldi	r26, 0xA2	; 162
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3b       	cpi	r26, 0xB9	; 185
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <main>
      8a:	0c 94 d1 21 	jmp	0x43a2	; 0x43a2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e7       	ldi	r26, 0x70	; 112
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 21 	jmp	0x4334	; 0x4334 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e7       	ldi	r24, 0x70	; 112
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 21 	jmp	0x436c	; 0x436c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e7       	ldi	r22, 0x70	; 112
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 21 	jmp	0x437c	; 0x437c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 21 	jmp	0x434c	; 0x434c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 21 	jmp	0x4384	; 0x4384 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 21 	jmp	0x4354	; 0x4354 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 21 	jmp	0x438c	; 0x438c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 21 	jmp	0x4344	; 0x4344 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 21 	jmp	0x437c	; 0x437c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 58       	subi	r30, 0x88	; 136
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <HKPD_charGetKey>:
#include "HKPD_private.h"
#include "HKPD_config.h"
#include "HKPD_interface.h"

char HKPD_charGetKey(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	65 97       	sbiw	r28, 0x15	; 21
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	u8 L_u8Row,L_u8Col,L_u8Debounce=0;
     e42:	19 8a       	std	Y+17, r1	; 0x11
	MDIO_StderrSetPortDirection(HKPD_PORT,0xF0);
     e44:	82 e0       	ldi	r24, 0x02	; 2
     e46:	60 ef       	ldi	r22, 0xF0	; 240
     e48:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(HKPD_PORT,0x0F);
     e4c:	82 e0       	ldi	r24, 0x02	; 2
     e4e:	6f e0       	ldi	r22, 0x0F	; 15
     e50:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <MDIO_StderrSetPortValue>
	do
	{
		MDIO_StderrGetPortValue(&L_u8Row,HKPD_PORT);
     e54:	ce 01       	movw	r24, r28
     e56:	0f 96       	adiw	r24, 0x0f	; 15
     e58:	62 e0       	ldi	r22, 0x02	; 2
     e5a:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <MDIO_StderrGetPortValue>
		L_u8Row=(~L_u8Row)&0X0F;
     e5e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e60:	80 95       	com	r24
     e62:	8f 70       	andi	r24, 0x0F	; 15
     e64:	8f 87       	std	Y+15, r24	; 0x0f
	}while(L_u8Row==0X00);
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	88 23       	and	r24, r24
     e6a:	a1 f3       	breq	.-24     	; 0xe54 <HKPD_charGetKey+0x26>
	MDIO_StderrSetPortDirection(HKPD_PORT,0x0F);
     e6c:	82 e0       	ldi	r24, 0x02	; 2
     e6e:	6f e0       	ldi	r22, 0x0F	; 15
     e70:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(HKPD_PORT,0xF0);
     e74:	82 e0       	ldi	r24, 0x02	; 2
     e76:	60 ef       	ldi	r22, 0xF0	; 240
     e78:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <MDIO_StderrSetPortValue>
	MDIO_StderrGetPortValue(&L_u8Col,HKPD_PORT);
     e7c:	ce 01       	movw	r24, r28
     e7e:	40 96       	adiw	r24, 0x10	; 16
     e80:	62 e0       	ldi	r22, 0x02	; 2
     e82:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <MDIO_StderrGetPortValue>
	L_u8Col=(((~L_u8Col)&0XF0)>>4);
     e86:	88 89       	ldd	r24, Y+16	; 0x10
     e88:	88 2f       	mov	r24, r24
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	80 95       	com	r24
     e8e:	90 95       	com	r25
     e90:	80 7f       	andi	r24, 0xF0	; 240
     e92:	90 70       	andi	r25, 0x00	; 0
     e94:	95 95       	asr	r25
     e96:	87 95       	ror	r24
     e98:	95 95       	asr	r25
     e9a:	87 95       	ror	r24
     e9c:	95 95       	asr	r25
     e9e:	87 95       	ror	r24
     ea0:	95 95       	asr	r25
     ea2:	87 95       	ror	r24
     ea4:	88 8b       	std	Y+16, r24	; 0x10
     ea6:	05 c0       	rjmp	.+10     	; 0xeb2 <HKPD_charGetKey+0x84>
	while(L_u8Debounce!=0xF0)
	{
		MDIO_StderrGetPortValue(&L_u8Debounce,HKPD_PORT);
     ea8:	ce 01       	movw	r24, r28
     eaa:	41 96       	adiw	r24, 0x11	; 17
     eac:	62 e0       	ldi	r22, 0x02	; 2
     eae:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <MDIO_StderrGetPortValue>
	}while(L_u8Row==0X00);
	MDIO_StderrSetPortDirection(HKPD_PORT,0x0F);
	MDIO_StderrSetPortValue(HKPD_PORT,0xF0);
	MDIO_StderrGetPortValue(&L_u8Col,HKPD_PORT);
	L_u8Col=(((~L_u8Col)&0XF0)>>4);
	while(L_u8Debounce!=0xF0)
     eb2:	89 89       	ldd	r24, Y+17	; 0x11
     eb4:	80 3f       	cpi	r24, 0xF0	; 240
     eb6:	c1 f7       	brne	.-16     	; 0xea8 <HKPD_charGetKey+0x7a>
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e2       	ldi	r26, 0x20	; 32
     ebe:	b1 e4       	ldi	r27, 0x41	; 65
     ec0:	8b 87       	std	Y+11, r24	; 0x0b
     ec2:	9c 87       	std	Y+12, r25	; 0x0c
     ec4:	ad 87       	std	Y+13, r26	; 0x0d
     ec6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	4a ef       	ldi	r20, 0xFA	; 250
     ed6:	54 e4       	ldi	r21, 0x44	; 68
     ed8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     edc:	dc 01       	movw	r26, r24
     ede:	cb 01       	movw	r24, r22
     ee0:	8f 83       	std	Y+7, r24	; 0x07
     ee2:	98 87       	std	Y+8, r25	; 0x08
     ee4:	a9 87       	std	Y+9, r26	; 0x09
     ee6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ee8:	6f 81       	ldd	r22, Y+7	; 0x07
     eea:	78 85       	ldd	r23, Y+8	; 0x08
     eec:	89 85       	ldd	r24, Y+9	; 0x09
     eee:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e8       	ldi	r20, 0x80	; 128
     ef6:	5f e3       	ldi	r21, 0x3F	; 63
     ef8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     efc:	88 23       	and	r24, r24
     efe:	2c f4       	brge	.+10     	; 0xf0a <HKPD_charGetKey+0xdc>
		__ticks = 1;
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	9e 83       	std	Y+6, r25	; 0x06
     f06:	8d 83       	std	Y+5, r24	; 0x05
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <HKPD_charGetKey+0x15a>
	else if (__tmp > 65535)
     f0a:	6f 81       	ldd	r22, Y+7	; 0x07
     f0c:	78 85       	ldd	r23, Y+8	; 0x08
     f0e:	89 85       	ldd	r24, Y+9	; 0x09
     f10:	9a 85       	ldd	r25, Y+10	; 0x0a
     f12:	20 e0       	ldi	r18, 0x00	; 0
     f14:	3f ef       	ldi	r19, 0xFF	; 255
     f16:	4f e7       	ldi	r20, 0x7F	; 127
     f18:	57 e4       	ldi	r21, 0x47	; 71
     f1a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f1e:	18 16       	cp	r1, r24
     f20:	4c f5       	brge	.+82     	; 0xf74 <HKPD_charGetKey+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f22:	6b 85       	ldd	r22, Y+11	; 0x0b
     f24:	7c 85       	ldd	r23, Y+12	; 0x0c
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	51 e4       	ldi	r21, 0x41	; 65
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	bc 01       	movw	r22, r24
     f3c:	cd 01       	movw	r24, r26
     f3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	0f c0       	rjmp	.+30     	; 0xf6a <HKPD_charGetKey+0x13c>
     f4c:	88 ec       	ldi	r24, 0xC8	; 200
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9c 83       	std	Y+4, r25	; 0x04
     f52:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f54:	8b 81       	ldd	r24, Y+3	; 0x03
     f56:	9c 81       	ldd	r25, Y+4	; 0x04
     f58:	01 97       	sbiw	r24, 0x01	; 1
     f5a:	f1 f7       	brne	.-4      	; 0xf58 <HKPD_charGetKey+0x12a>
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f60:	8d 81       	ldd	r24, Y+5	; 0x05
     f62:	9e 81       	ldd	r25, Y+6	; 0x06
     f64:	01 97       	sbiw	r24, 0x01	; 1
     f66:	9e 83       	std	Y+6, r25	; 0x06
     f68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	00 97       	sbiw	r24, 0x00	; 0
     f70:	69 f7       	brne	.-38     	; 0xf4c <HKPD_charGetKey+0x11e>
     f72:	14 c0       	rjmp	.+40     	; 0xf9c <HKPD_charGetKey+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f74:	6f 81       	ldd	r22, Y+7	; 0x07
     f76:	78 85       	ldd	r23, Y+8	; 0x08
     f78:	89 85       	ldd	r24, Y+9	; 0x09
     f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f80:	dc 01       	movw	r26, r24
     f82:	cb 01       	movw	r24, r22
     f84:	9e 83       	std	Y+6, r25	; 0x06
     f86:	8d 83       	std	Y+5, r24	; 0x05
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	9a 83       	std	Y+2, r25	; 0x02
     f8e:	89 83       	std	Y+1, r24	; 0x01
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	9a 81       	ldd	r25, Y+2	; 0x02
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <HKPD_charGetKey+0x166>
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
	{
		MDIO_StderrGetPortValue(&L_u8Debounce,HKPD_PORT);
		//HLCD_voidSendNumber(L_u8Debounce);
	}
	_delay_ms(10);
	switch(L_u8Row)
     f9c:	8f 85       	ldd	r24, Y+15	; 0x0f
     f9e:	28 2f       	mov	r18, r24
     fa0:	30 e0       	ldi	r19, 0x00	; 0
     fa2:	3d 8b       	std	Y+21, r19	; 0x15
     fa4:	2c 8b       	std	Y+20, r18	; 0x14
     fa6:	8c 89       	ldd	r24, Y+20	; 0x14
     fa8:	9d 89       	ldd	r25, Y+21	; 0x15
     faa:	82 30       	cpi	r24, 0x02	; 2
     fac:	91 05       	cpc	r25, r1
     fae:	c1 f0       	breq	.+48     	; 0xfe0 <HKPD_charGetKey+0x1b2>
     fb0:	2c 89       	ldd	r18, Y+20	; 0x14
     fb2:	3d 89       	ldd	r19, Y+21	; 0x15
     fb4:	23 30       	cpi	r18, 0x03	; 3
     fb6:	31 05       	cpc	r19, r1
     fb8:	34 f4       	brge	.+12     	; 0xfc6 <HKPD_charGetKey+0x198>
     fba:	8c 89       	ldd	r24, Y+20	; 0x14
     fbc:	9d 89       	ldd	r25, Y+21	; 0x15
     fbe:	81 30       	cpi	r24, 0x01	; 1
     fc0:	91 05       	cpc	r25, r1
     fc2:	61 f0       	breq	.+24     	; 0xfdc <HKPD_charGetKey+0x1ae>
     fc4:	15 c0       	rjmp	.+42     	; 0xff0 <HKPD_charGetKey+0x1c2>
     fc6:	2c 89       	ldd	r18, Y+20	; 0x14
     fc8:	3d 89       	ldd	r19, Y+21	; 0x15
     fca:	24 30       	cpi	r18, 0x04	; 4
     fcc:	31 05       	cpc	r19, r1
     fce:	59 f0       	breq	.+22     	; 0xfe6 <HKPD_charGetKey+0x1b8>
     fd0:	8c 89       	ldd	r24, Y+20	; 0x14
     fd2:	9d 89       	ldd	r25, Y+21	; 0x15
     fd4:	88 30       	cpi	r24, 0x08	; 8
     fd6:	91 05       	cpc	r25, r1
     fd8:	49 f0       	breq	.+18     	; 0xfec <HKPD_charGetKey+0x1be>
     fda:	0a c0       	rjmp	.+20     	; 0xff0 <HKPD_charGetKey+0x1c2>
	{
		case 1:L_u8Row=0;break;
     fdc:	1f 86       	std	Y+15, r1	; 0x0f
     fde:	08 c0       	rjmp	.+16     	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 2:L_u8Row=1;break;
     fe0:	81 e0       	ldi	r24, 0x01	; 1
     fe2:	8f 87       	std	Y+15, r24	; 0x0f
     fe4:	05 c0       	rjmp	.+10     	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 4:L_u8Row=2;break;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	8f 87       	std	Y+15, r24	; 0x0f
     fea:	02 c0       	rjmp	.+4      	; 0xff0 <HKPD_charGetKey+0x1c2>
		case 8:L_u8Row=3;break;
     fec:	83 e0       	ldi	r24, 0x03	; 3
     fee:	8f 87       	std	Y+15, r24	; 0x0f
		default:break;//do nothing
	}
	switch(L_u8Col)
     ff0:	88 89       	ldd	r24, Y+16	; 0x10
     ff2:	28 2f       	mov	r18, r24
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	3b 8b       	std	Y+19, r19	; 0x13
     ff8:	2a 8b       	std	Y+18, r18	; 0x12
     ffa:	8a 89       	ldd	r24, Y+18	; 0x12
     ffc:	9b 89       	ldd	r25, Y+19	; 0x13
     ffe:	82 30       	cpi	r24, 0x02	; 2
    1000:	91 05       	cpc	r25, r1
    1002:	c1 f0       	breq	.+48     	; 0x1034 <HKPD_charGetKey+0x206>
    1004:	2a 89       	ldd	r18, Y+18	; 0x12
    1006:	3b 89       	ldd	r19, Y+19	; 0x13
    1008:	23 30       	cpi	r18, 0x03	; 3
    100a:	31 05       	cpc	r19, r1
    100c:	34 f4       	brge	.+12     	; 0x101a <HKPD_charGetKey+0x1ec>
    100e:	8a 89       	ldd	r24, Y+18	; 0x12
    1010:	9b 89       	ldd	r25, Y+19	; 0x13
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	91 05       	cpc	r25, r1
    1016:	61 f0       	breq	.+24     	; 0x1030 <HKPD_charGetKey+0x202>
    1018:	15 c0       	rjmp	.+42     	; 0x1044 <HKPD_charGetKey+0x216>
    101a:	2a 89       	ldd	r18, Y+18	; 0x12
    101c:	3b 89       	ldd	r19, Y+19	; 0x13
    101e:	24 30       	cpi	r18, 0x04	; 4
    1020:	31 05       	cpc	r19, r1
    1022:	59 f0       	breq	.+22     	; 0x103a <HKPD_charGetKey+0x20c>
    1024:	8a 89       	ldd	r24, Y+18	; 0x12
    1026:	9b 89       	ldd	r25, Y+19	; 0x13
    1028:	88 30       	cpi	r24, 0x08	; 8
    102a:	91 05       	cpc	r25, r1
    102c:	49 f0       	breq	.+18     	; 0x1040 <HKPD_charGetKey+0x212>
    102e:	0a c0       	rjmp	.+20     	; 0x1044 <HKPD_charGetKey+0x216>
	{
		case 1:L_u8Col=0;break;
    1030:	18 8a       	std	Y+16, r1	; 0x10
    1032:	08 c0       	rjmp	.+16     	; 0x1044 <HKPD_charGetKey+0x216>
		case 2:L_u8Col=1;break;
    1034:	81 e0       	ldi	r24, 0x01	; 1
    1036:	88 8b       	std	Y+16, r24	; 0x10
    1038:	05 c0       	rjmp	.+10     	; 0x1044 <HKPD_charGetKey+0x216>
		case 4:L_u8Col=2;break;
    103a:	82 e0       	ldi	r24, 0x02	; 2
    103c:	88 8b       	std	Y+16, r24	; 0x10
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <HKPD_charGetKey+0x216>
		case 8:L_u8Col=3;break;
    1040:	83 e0       	ldi	r24, 0x03	; 3
    1042:	88 8b       	std	Y+16, r24	; 0x10
		default:break;//do nothing
	}
	return HKPD_charKeypad[L_u8Row][L_u8Col];
    1044:	8f 85       	ldd	r24, Y+15	; 0x0f
    1046:	48 2f       	mov	r20, r24
    1048:	50 e0       	ldi	r21, 0x00	; 0
    104a:	88 89       	ldd	r24, Y+16	; 0x10
    104c:	28 2f       	mov	r18, r24
    104e:	30 e0       	ldi	r19, 0x00	; 0
    1050:	ca 01       	movw	r24, r20
    1052:	88 0f       	add	r24, r24
    1054:	99 1f       	adc	r25, r25
    1056:	88 0f       	add	r24, r24
    1058:	99 1f       	adc	r25, r25
    105a:	82 0f       	add	r24, r18
    105c:	93 1f       	adc	r25, r19
    105e:	fc 01       	movw	r30, r24
    1060:	e8 58       	subi	r30, 0x88	; 136
    1062:	fd 4f       	sbci	r31, 0xFD	; 253
    1064:	80 81       	ld	r24, Z


}
    1066:	65 96       	adiw	r28, 0x15	; 21
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
    1072:	cf 91       	pop	r28
    1074:	df 91       	pop	r29
    1076:	08 95       	ret

00001078 <HLCD_voidinit>:
#include "HLCD_config.h"
#include "HLCD_interface.h"


void HLCD_voidinit(void)
{
    1078:	df 93       	push	r29
    107a:	cf 93       	push	r28
    107c:	cd b7       	in	r28, 0x3d	; 61
    107e:	de b7       	in	r29, 0x3e	; 62

#if HLCD_MODE==HLCD_8BIT_MODE
	MDIO_StderrSetPortDirection(HLCD_DATA_PORT,0xFF);
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	6f ef       	ldi	r22, 0xFF	; 255
    1084:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_OUTPUT);
    1088:	84 e0       	ldi	r24, 0x04	; 4
    108a:	60 e0       	ldi	r22, 0x00	; 0
    108c:	41 e0       	ldi	r20, 0x01	; 1
    108e:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_OUTPUT);
    1092:	84 e0       	ldi	r24, 0x04	; 4
    1094:	62 e0       	ldi	r22, 0x02	; 2
    1096:	41 e0       	ldi	r20, 0x01	; 1
    1098:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	MDIO_StderrSetPinDirection(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_OUTPUT);
    109c:	84 e0       	ldi	r24, 0x04	; 4
    109e:	63 e0       	ldi	r22, 0x03	; 3
    10a0:	41 e0       	ldi	r20, 0x01	; 1
    10a2:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	HLCD_voidSendCommand(HLCD_FUNCTION_SET);
    10a6:	8c e3       	ldi	r24, 0x3C	; 60
    10a8:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(1);
    10ac:	81 e0       	ldi	r24, 0x01	; 1
    10ae:	90 e0       	ldi	r25, 0x00	; 0
    10b0:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	HLCD_voidSendCommand(HLCD_DISPLAY_ON_OFF);
    10b4:	8f e0       	ldi	r24, 0x0F	; 15
    10b6:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(1);
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	HLCD_voidSendCommand(HLCD_CLEAR);
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	MTIM_voidBusyWaitDlay(2);
    10c8:	82 e0       	ldi	r24, 0x02	; 2
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	_delay_us(50);
	HLCD_voidSendCommand(HLCD_CLEAR);
	_delay_ms(2);

#endif
}
    10d0:	cf 91       	pop	r28
    10d2:	df 91       	pop	r29
    10d4:	08 95       	ret

000010d6 <HLCD_voidSendChar>:
void HLCD_voidSendChar(u8 ARG_u8Data)
{
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	0f 92       	push	r0
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    10e0:	89 83       	std	Y+1, r24	; 0x01
#if HLCD_MODE==HLCD_8BIT_MODE
	/* control*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_HIGH);
    10e2:	84 e0       	ldi	r24, 0x04	; 4
    10e4:	60 e0       	ldi	r22, 0x00	; 0
    10e6:	41 e0       	ldi	r20, 0x01	; 1
    10e8:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_LOW);
    10ec:	84 e0       	ldi	r24, 0x04	; 4
    10ee:	62 e0       	ldi	r22, 0x02	; 2
    10f0:	40 e0       	ldi	r20, 0x00	; 0
    10f2:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPortValue(HLCD_DATA_PORT,ARG_u8Data);
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	69 81       	ldd	r22, Y+1	; 0x01
    10fa:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <MDIO_StderrSetPortValue>
	/* enable cycle*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    10fe:	84 e0       	ldi	r24, 0x04	; 4
    1100:	63 e0       	ldi	r22, 0x03	; 3
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
    1108:	84 e0       	ldi	r24, 0x04	; 4
    110a:	63 e0       	ldi	r22, 0x03	; 3
    110c:	41 e0       	ldi	r20, 0x01	; 1
    110e:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MTIM_voidBusyWaitDlay(2);
    1112:	82 e0       	ldi	r24, 0x02	; 2
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    111a:	84 e0       	ldi	r24, 0x04	; 4
    111c:	63 e0       	ldi	r22, 0x03	; 3
    111e:	40 e0       	ldi	r20, 0x00	; 0
    1120:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
	_delay_ms(2);
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
#endif

}
    1124:	0f 90       	pop	r0
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <HLCD_voidSendCommand>:
void HLCD_voidSendCommand(u8 ARG_u8Cmd)
{
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	0f 92       	push	r0
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	89 83       	std	Y+1, r24	; 0x01
#if HLCD_MODE==HLCD_8BIT_MODE
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RS_PIN,MDIO_PIN_LOW);
    1138:	84 e0       	ldi	r24, 0x04	; 4
    113a:	60 e0       	ldi	r22, 0x00	; 0
    113c:	40 e0       	ldi	r20, 0x00	; 0
    113e:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_RW_PIN,MDIO_PIN_LOW);
    1142:	84 e0       	ldi	r24, 0x04	; 4
    1144:	62 e0       	ldi	r22, 0x02	; 2
    1146:	40 e0       	ldi	r20, 0x00	; 0
    1148:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPortValue(HLCD_DATA_PORT,ARG_u8Cmd);
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	69 81       	ldd	r22, Y+1	; 0x01
    1150:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <MDIO_StderrSetPortValue>
	/* enable cycle*/
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    1154:	84 e0       	ldi	r24, 0x04	; 4
    1156:	63 e0       	ldi	r22, 0x03	; 3
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_HIGH);
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	63 e0       	ldi	r22, 0x03	; 3
    1162:	41 e0       	ldi	r20, 0x01	; 1
    1164:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	MTIM_voidBusyWaitDlay(2);
    1168:	82 e0       	ldi	r24, 0x02	; 2
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);
    1170:	84 e0       	ldi	r24, 0x04	; 4
    1172:	63 e0       	ldi	r22, 0x03	; 3
    1174:	40 e0       	ldi	r20, 0x00	; 0
    1176:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	_delay_ms(2);
	MDIO_StderrSetPinValue(HLCD_CTRL_PORT,HLCD_E_PIN,MDIO_PIN_LOW);


#endif
}
    117a:	0f 90       	pop	r0
    117c:	cf 91       	pop	r28
    117e:	df 91       	pop	r29
    1180:	08 95       	ret

00001182 <HLCD_voidSendString>:
void HLCD_voidSendString(const char * ARG_charpString)
{
    1182:	df 93       	push	r29
    1184:	cf 93       	push	r28
    1186:	00 d0       	rcall	.+0      	; 0x1188 <HLCD_voidSendString+0x6>
    1188:	0f 92       	push	r0
    118a:	cd b7       	in	r28, 0x3d	; 61
    118c:	de b7       	in	r29, 0x3e	; 62
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Counter=0;
    1192:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_charpString!=NULL)
    1194:	8a 81       	ldd	r24, Y+2	; 0x02
    1196:	9b 81       	ldd	r25, Y+3	; 0x03
    1198:	00 97       	sbiw	r24, 0x00	; 0
    119a:	09 f1       	breq	.+66     	; 0x11de <HLCD_voidSendString+0x5c>
    119c:	15 c0       	rjmp	.+42     	; 0x11c8 <HLCD_voidSendString+0x46>
	{
		while(ARG_charpString[Local_u8Counter]!='\0')
		{
			HLCD_voidSendChar(ARG_charpString[Local_u8Counter]);
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8a 81       	ldd	r24, Y+2	; 0x02
    11a6:	9b 81       	ldd	r25, Y+3	; 0x03
    11a8:	fc 01       	movw	r30, r24
    11aa:	e2 0f       	add	r30, r18
    11ac:	f3 1f       	adc	r31, r19
    11ae:	80 81       	ld	r24, Z
    11b0:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
			Local_u8Counter++;
    11b4:	89 81       	ldd	r24, Y+1	; 0x01
    11b6:	8f 5f       	subi	r24, 0xFF	; 255
    11b8:	89 83       	std	Y+1, r24	; 0x01
			if(Local_u8Counter==16)
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	80 31       	cpi	r24, 0x10	; 16
    11be:	21 f4       	brne	.+8      	; 0x11c8 <HLCD_voidSendString+0x46>
			{
				HLCD_voidGoToXY(1,0);
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
void HLCD_voidSendString(const char * ARG_charpString)
{
	u8 Local_u8Counter=0;
	if(ARG_charpString!=NULL)
	{
		while(ARG_charpString[Local_u8Counter]!='\0')
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
    11ca:	28 2f       	mov	r18, r24
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	8a 81       	ldd	r24, Y+2	; 0x02
    11d0:	9b 81       	ldd	r25, Y+3	; 0x03
    11d2:	fc 01       	movw	r30, r24
    11d4:	e2 0f       	add	r30, r18
    11d6:	f3 1f       	adc	r31, r19
    11d8:	80 81       	ld	r24, Z
    11da:	88 23       	and	r24, r24
    11dc:	01 f7       	brne	.-64     	; 0x119e <HLCD_voidSendString+0x1c>
	}
	else
	{
		// do nothing
	}
}
    11de:	0f 90       	pop	r0
    11e0:	0f 90       	pop	r0
    11e2:	0f 90       	pop	r0
    11e4:	cf 91       	pop	r28
    11e6:	df 91       	pop	r29
    11e8:	08 95       	ret

000011ea <HLCD_voidSendNumber>:

void HLCD_voidSendNumber(s32 ARG_s32Number)
{
    11ea:	0f 93       	push	r16
    11ec:	1f 93       	push	r17
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
    11f6:	2f 97       	sbiw	r28, 0x0f	; 15
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	6c 87       	std	Y+12, r22	; 0x0c
    1204:	7d 87       	std	Y+13, r23	; 0x0d
    1206:	8e 87       	std	Y+14, r24	; 0x0e
    1208:	9f 87       	std	Y+15, r25	; 0x0f
	u8 Local_u8Arr[10],Local_u8Counter=0;
    120a:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_s32Number<0)
    120c:	8c 85       	ldd	r24, Y+12	; 0x0c
    120e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1210:	ae 85       	ldd	r26, Y+14	; 0x0e
    1212:	bf 85       	ldd	r27, Y+15	; 0x0f
    1214:	bb 23       	and	r27, r27
    1216:	9c f4       	brge	.+38     	; 0x123e <HLCD_voidSendNumber+0x54>
	{
		HLCD_voidSendChar('-');
    1218:	8d e2       	ldi	r24, 0x2D	; 45
    121a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
		ARG_s32Number*=-1;
    121e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1220:	9d 85       	ldd	r25, Y+13	; 0x0d
    1222:	ae 85       	ldd	r26, Y+14	; 0x0e
    1224:	bf 85       	ldd	r27, Y+15	; 0x0f
    1226:	b0 95       	com	r27
    1228:	a0 95       	com	r26
    122a:	90 95       	com	r25
    122c:	81 95       	neg	r24
    122e:	9f 4f       	sbci	r25, 0xFF	; 255
    1230:	af 4f       	sbci	r26, 0xFF	; 255
    1232:	bf 4f       	sbci	r27, 0xFF	; 255
    1234:	8c 87       	std	Y+12, r24	; 0x0c
    1236:	9d 87       	std	Y+13, r25	; 0x0d
    1238:	ae 87       	std	Y+14, r26	; 0x0e
    123a:	bf 87       	std	Y+15, r27	; 0x0f
    123c:	39 c0       	rjmp	.+114    	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	}
	else if(0==ARG_s32Number)
    123e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1240:	9d 85       	ldd	r25, Y+13	; 0x0d
    1242:	ae 85       	ldd	r26, Y+14	; 0x0e
    1244:	bf 85       	ldd	r27, Y+15	; 0x0f
    1246:	00 97       	sbiw	r24, 0x00	; 0
    1248:	a1 05       	cpc	r26, r1
    124a:	b1 05       	cpc	r27, r1
    124c:	89 f5       	brne	.+98     	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	{
		HLCD_voidSendChar('0');
    124e:	80 e3       	ldi	r24, 0x30	; 48
    1250:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
    1254:	2d c0       	rjmp	.+90     	; 0x12b0 <HLCD_voidSendNumber+0xc6>
	{
		// do nothing
	}
	while(ARG_s32Number)
	{
		Local_u8Arr[Local_u8Counter]=ARG_s32Number%10;
    1256:	89 81       	ldd	r24, Y+1	; 0x01
    1258:	08 2f       	mov	r16, r24
    125a:	10 e0       	ldi	r17, 0x00	; 0
    125c:	8c 85       	ldd	r24, Y+12	; 0x0c
    125e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1260:	ae 85       	ldd	r26, Y+14	; 0x0e
    1262:	bf 85       	ldd	r27, Y+15	; 0x0f
    1264:	2a e0       	ldi	r18, 0x0A	; 10
    1266:	30 e0       	ldi	r19, 0x00	; 0
    1268:	40 e0       	ldi	r20, 0x00	; 0
    126a:	50 e0       	ldi	r21, 0x00	; 0
    126c:	bc 01       	movw	r22, r24
    126e:	cd 01       	movw	r24, r26
    1270:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__divmodsi4>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	28 2f       	mov	r18, r24
    127a:	ce 01       	movw	r24, r28
    127c:	02 96       	adiw	r24, 0x02	; 2
    127e:	fc 01       	movw	r30, r24
    1280:	e0 0f       	add	r30, r16
    1282:	f1 1f       	adc	r31, r17
    1284:	20 83       	st	Z, r18
		ARG_s32Number/=10;
    1286:	8c 85       	ldd	r24, Y+12	; 0x0c
    1288:	9d 85       	ldd	r25, Y+13	; 0x0d
    128a:	ae 85       	ldd	r26, Y+14	; 0x0e
    128c:	bf 85       	ldd	r27, Y+15	; 0x0f
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e0       	ldi	r20, 0x00	; 0
    1294:	50 e0       	ldi	r21, 0x00	; 0
    1296:	bc 01       	movw	r22, r24
    1298:	cd 01       	movw	r24, r26
    129a:	0e 94 7f 21 	call	0x42fe	; 0x42fe <__divmodsi4>
    129e:	da 01       	movw	r26, r20
    12a0:	c9 01       	movw	r24, r18
    12a2:	8c 87       	std	Y+12, r24	; 0x0c
    12a4:	9d 87       	std	Y+13, r25	; 0x0d
    12a6:	ae 87       	std	Y+14, r26	; 0x0e
    12a8:	bf 87       	std	Y+15, r27	; 0x0f
		Local_u8Counter++;
    12aa:	89 81       	ldd	r24, Y+1	; 0x01
    12ac:	8f 5f       	subi	r24, 0xFF	; 255
    12ae:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// do nothing
	}
	while(ARG_s32Number)
    12b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    12b2:	9d 85       	ldd	r25, Y+13	; 0x0d
    12b4:	ae 85       	ldd	r26, Y+14	; 0x0e
    12b6:	bf 85       	ldd	r27, Y+15	; 0x0f
    12b8:	00 97       	sbiw	r24, 0x00	; 0
    12ba:	a1 05       	cpc	r26, r1
    12bc:	b1 05       	cpc	r27, r1
    12be:	59 f6       	brne	.-106    	; 0x1256 <HLCD_voidSendNumber+0x6c>
    12c0:	0f c0       	rjmp	.+30     	; 0x12e0 <HLCD_voidSendNumber+0xf6>
		ARG_s32Number/=10;
		Local_u8Counter++;
	}
	while(Local_u8Counter>0)
	{
		Local_u8Counter--;
    12c2:	89 81       	ldd	r24, Y+1	; 0x01
    12c4:	81 50       	subi	r24, 0x01	; 1
    12c6:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendChar('0'+Local_u8Arr[Local_u8Counter]);
    12c8:	89 81       	ldd	r24, Y+1	; 0x01
    12ca:	28 2f       	mov	r18, r24
    12cc:	30 e0       	ldi	r19, 0x00	; 0
    12ce:	ce 01       	movw	r24, r28
    12d0:	02 96       	adiw	r24, 0x02	; 2
    12d2:	fc 01       	movw	r30, r24
    12d4:	e2 0f       	add	r30, r18
    12d6:	f3 1f       	adc	r31, r19
    12d8:	80 81       	ld	r24, Z
    12da:	80 5d       	subi	r24, 0xD0	; 208
    12dc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
	{
		Local_u8Arr[Local_u8Counter]=ARG_s32Number%10;
		ARG_s32Number/=10;
		Local_u8Counter++;
	}
	while(Local_u8Counter>0)
    12e0:	89 81       	ldd	r24, Y+1	; 0x01
    12e2:	88 23       	and	r24, r24
    12e4:	71 f7       	brne	.-36     	; 0x12c2 <HLCD_voidSendNumber+0xd8>
	{
		Local_u8Counter--;
		HLCD_voidSendChar('0'+Local_u8Arr[Local_u8Counter]);
	}
}
    12e6:	2f 96       	adiw	r28, 0x0f	; 15
    12e8:	0f b6       	in	r0, 0x3f	; 63
    12ea:	f8 94       	cli
    12ec:	de bf       	out	0x3e, r29	; 62
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	cd bf       	out	0x3d, r28	; 61
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	1f 91       	pop	r17
    12f8:	0f 91       	pop	r16
    12fa:	08 95       	ret

000012fc <HLCD_voidGoToXY>:
void HLCD_voidGoToXY(u8 ARG_u8X,u8 ARG_u8Y)
{
    12fc:	df 93       	push	r29
    12fe:	cf 93       	push	r28
    1300:	00 d0       	rcall	.+0      	; 0x1302 <HLCD_voidGoToXY+0x6>
    1302:	0f 92       	push	r0
    1304:	cd b7       	in	r28, 0x3d	; 61
    1306:	de b7       	in	r29, 0x3e	; 62
    1308:	8a 83       	std	Y+2, r24	; 0x02
    130a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Addres;
	if(0==ARG_u8X)
    130c:	8a 81       	ldd	r24, Y+2	; 0x02
    130e:	88 23       	and	r24, r24
    1310:	19 f4       	brne	.+6      	; 0x1318 <HLCD_voidGoToXY+0x1c>
	{
		Local_u8Addres=ARG_u8Y;
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	06 c0       	rjmp	.+12     	; 0x1324 <HLCD_voidGoToXY+0x28>
	}
	else if(1==ARG_u8X)
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	19 f4       	brne	.+6      	; 0x1324 <HLCD_voidGoToXY+0x28>
	{
		Local_u8Addres=ARG_u8Y+DDRAM_ROW_OFFSET; // offset of the ddram addres
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	80 5c       	subi	r24, 0xC0	; 192
    1322:	89 83       	std	Y+1, r24	; 0x01
	}
	else
	{
		// Report an error
	}
	HLCD_voidSendCommand(Local_u8Addres+DDRAM_ADDRESS_OFFSET);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
    1324:	89 81       	ldd	r24, Y+1	; 0x01
    1326:	80 58       	subi	r24, 0x80	; 128
    1328:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>

}
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	cf 91       	pop	r28
    1334:	df 91       	pop	r29
    1336:	08 95       	ret

00001338 <HLCD_voidCustomChar>:
void HLCD_voidCustomChar(u8 * ARG_u8pCustomChar,u8 ARG_u8CustomCharNum)
{
    1338:	df 93       	push	r29
    133a:	cf 93       	push	r28
    133c:	00 d0       	rcall	.+0      	; 0x133e <HLCD_voidCustomChar+0x6>
    133e:	00 d0       	rcall	.+0      	; 0x1340 <HLCD_voidCustomChar+0x8>
    1340:	0f 92       	push	r0
    1342:	cd b7       	in	r28, 0x3d	; 61
    1344:	de b7       	in	r29, 0x3e	; 62
    1346:	9c 83       	std	Y+4, r25	; 0x04
    1348:	8b 83       	std	Y+3, r24	; 0x03
    134a:	6d 83       	std	Y+5, r22	; 0x05
	u8 Local_u8Counter;
	// seeting the address of the cgram to save the custom character
	u8 Local_u8CGRAMAddres=ARG_u8CustomCharNum*8;
    134c:	8d 81       	ldd	r24, Y+5	; 0x05
    134e:	88 2f       	mov	r24, r24
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	88 0f       	add	r24, r24
    1354:	99 1f       	adc	r25, r25
    1356:	88 0f       	add	r24, r24
    1358:	99 1f       	adc	r25, r25
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	89 83       	std	Y+1, r24	; 0x01
	HLCD_voidSendCommand(Local_u8CGRAMAddres+64);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
    1360:	89 81       	ldd	r24, Y+1	; 0x01
    1362:	80 5c       	subi	r24, 0xC0	; 192
    1364:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1368:	1a 82       	std	Y+2, r1	; 0x02
    136a:	0e c0       	rjmp	.+28     	; 0x1388 <HLCD_voidCustomChar+0x50>
	{
		HLCD_voidSendChar(ARG_u8pCustomChar[Local_u8Counter]);
    136c:	8a 81       	ldd	r24, Y+2	; 0x02
    136e:	28 2f       	mov	r18, r24
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	fc 01       	movw	r30, r24
    1378:	e2 0f       	add	r30, r18
    137a:	f3 1f       	adc	r31, r19
    137c:	80 81       	ld	r24, Z
    137e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
{
	u8 Local_u8Counter;
	// seeting the address of the cgram to save the custom character
	u8 Local_u8CGRAMAddres=ARG_u8CustomCharNum*8;
	HLCD_voidSendCommand(Local_u8CGRAMAddres+64);// for setting ddram addres send(1 d6 d5 d4 d3 d2 d1 d0) or 128+the postion you want
	for(Local_u8Counter=0;Local_u8Counter<8;Local_u8Counter++)
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	8a 83       	std	Y+2, r24	; 0x02
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	88 30       	cpi	r24, 0x08	; 8
    138c:	78 f3       	brcs	.-34     	; 0x136c <HLCD_voidCustomChar+0x34>
	{
		HLCD_voidSendChar(ARG_u8pCustomChar[Local_u8Counter]);
	}
	// get back to ddram
	HLCD_voidSendCommand(DDRAM_ADDRESS_OFFSET);
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>



}
    1394:	0f 90       	pop	r0
    1396:	0f 90       	pop	r0
    1398:	0f 90       	pop	r0
    139a:	0f 90       	pop	r0
    139c:	0f 90       	pop	r0
    139e:	cf 91       	pop	r28
    13a0:	df 91       	pop	r29
    13a2:	08 95       	ret

000013a4 <HLCD_voidSetCursor>:
void HLCD_voidSetCursor(u8 ARG_u8Row,u8 ARG_u8Col)
{
    13a4:	df 93       	push	r29
    13a6:	cf 93       	push	r28
    13a8:	00 d0       	rcall	.+0      	; 0x13aa <HLCD_voidSetCursor+0x6>
    13aa:	cd b7       	in	r28, 0x3d	; 61
    13ac:	de b7       	in	r29, 0x3e	; 62
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	6a 83       	std	Y+2, r22	; 0x02
	HLCD_voidSendCommand((((4*ARG_u8Row)<<4)+0x80+ARG_u8Col));
    13b2:	89 81       	ldd	r24, Y+1	; 0x01
    13b4:	88 2f       	mov	r24, r24
    13b6:	90 e0       	ldi	r25, 0x00	; 0
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	88 0f       	add	r24, r24
    13be:	99 1f       	adc	r25, r25
    13c0:	98 2f       	mov	r25, r24
    13c2:	92 95       	swap	r25
    13c4:	90 7f       	andi	r25, 0xF0	; 240
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	89 0f       	add	r24, r25
    13ca:	80 58       	subi	r24, 0x80	; 128
    13cc:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
}
    13d0:	0f 90       	pop	r0
    13d2:	0f 90       	pop	r0
    13d4:	cf 91       	pop	r28
    13d6:	df 91       	pop	r29
    13d8:	08 95       	ret

000013da <HNVM_stderrInit>:
#include"HNVM_private.h"
#include"HNVM_interface.h"
#include"HNVM_config.h"

STD_error_t HNVM_stderrInit(void)
{
    13da:	df 93       	push	r29
    13dc:	cf 93       	push	r28
    13de:	0f 92       	push	r0
    13e0:	cd b7       	in	r28, 0x3d	; 61
    13e2:	de b7       	in	r29, 0x3e	; 62
	STD_error_t L_stderrState=E_OK;
    13e4:	19 82       	std	Y+1, r1	; 0x01
	L_stderrState=MTWI_stderrInit(HNVM_BIT_RATE,HNVM_PRE_SCALER);
    13e6:	60 e5       	ldi	r22, 0x50	; 80
    13e8:	73 ec       	ldi	r23, 0xC3	; 195
    13ea:	80 e0       	ldi	r24, 0x00	; 0
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	43 e0       	ldi	r20, 0x03	; 3
    13f0:	0e 94 6c 19 	call	0x32d8	; 0x32d8 <MTWI_stderrInit>
    13f4:	89 83       	std	Y+1, r24	; 0x01
	MTWI_voidEnable();
    13f6:	0e 94 32 1a 	call	0x3464	; 0x3464 <MTWI_voidEnable>
	return L_stderrState;
    13fa:	89 81       	ldd	r24, Y+1	; 0x01

}
    13fc:	0f 90       	pop	r0
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <HNVM_voidWriteByte>:

// another approch is to make input block and location
void HNVM_voidWriteByte(u16 ARG_u16Address,u8 ARG_u8Data)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	63 97       	sbiw	r28, 0x13	; 19
    140e:	0f b6       	in	r0, 0x3f	; 63
    1410:	f8 94       	cli
    1412:	de bf       	out	0x3e, r29	; 62
    1414:	0f be       	out	0x3f, r0	; 63
    1416:	cd bf       	out	0x3d, r28	; 61
    1418:	9a 8b       	std	Y+18, r25	; 0x12
    141a:	89 8b       	std	Y+17, r24	; 0x11
    141c:	6b 8b       	std	Y+19, r22	; 0x13
	u8 L_u8SlaveAddress;
	u8 L_u8Block;
	L_u8Block=(ARG_u16Address>>8);
    141e:	89 89       	ldd	r24, Y+17	; 0x11
    1420:	9a 89       	ldd	r25, Y+18	; 0x12
    1422:	89 2f       	mov	r24, r25
    1424:	99 27       	eor	r25, r25
    1426:	8f 87       	std	Y+15, r24	; 0x0f
	L_u8SlaveAddress=0b1010000|(L_u8Block);
    1428:	8f 85       	ldd	r24, Y+15	; 0x0f
    142a:	80 65       	ori	r24, 0x50	; 80
    142c:	88 8b       	std	Y+16, r24	; 0x10
	// send start condition ,clear the flag and wait for it to be set again to make sure the operation is done
	MTWI_voidSendStartCondition();
    142e:	0e 94 87 1a 	call	0x350e	; 0x350e <MTWI_voidSendStartCondition>
	//Clear the flag
	MTWI_voidClearFlag();
    1432:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
	//poll the flag
	MTWI_voidFlagPolling();
    1436:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
	// check the status code
	if(MTWI_STATUS_MASTER_START_CONDITION==MTIM_twistatusCheckStatus())
    143a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    143e:	88 30       	cpi	r24, 0x08	; 8
    1440:	49 f5       	brne	.+82     	; 0x1494 <HNVM_voidWriteByte+0x90>
	{
		// the start condition is send sccuessfuly send the address of the slave
		// slave is 7 bit and the mask is to clear the first bit(write)
		MTWI_voidLoadTWDR(((((L_u8SlaveAddress<<1)&(0xFE))|(0))));
    1442:	88 89       	ldd	r24, Y+16	; 0x10
    1444:	88 2f       	mov	r24, r24
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	88 0f       	add	r24, r24
    144a:	99 1f       	adc	r25, r25
    144c:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
		//clear the flag
		MTWI_voidClearFlag();
    1450:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		//poll the flag
		MTWI_voidFlagPolling();
    1454:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
		// check the status code
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK==MTIM_twistatusCheckStatus())
    1458:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    145c:	88 31       	cpi	r24, 0x18	; 24
    145e:	d1 f4       	brne	.+52     	; 0x1494 <HNVM_voidWriteByte+0x90>
		{
			// loction of the choosen block
			MTWI_voidLoadTWDR((u8)ARG_u16Address);
    1460:	89 89       	ldd	r24, Y+17	; 0x11
    1462:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
			//clear the flag
			MTWI_voidClearFlag();
    1466:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
			//poll the flag
			MTWI_voidFlagPolling();
    146a:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
			// check the status code
			if(MTWI_STATUS_MASTER_TX_DATA_ACK==MTIM_twistatusCheckStatus())
    146e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    1472:	88 32       	cpi	r24, 0x28	; 40
    1474:	79 f4       	brne	.+30     	; 0x1494 <HNVM_voidWriteByte+0x90>
			{
				MTWI_voidLoadTWDR(ARG_u8Data);
    1476:	8b 89       	ldd	r24, Y+19	; 0x13
    1478:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
				//clear the flag
				MTWI_voidClearFlag();
    147c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
				//poll the flag
				MTWI_voidFlagPolling();
    1480:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
				// check the status code
				if(MTWI_STATUS_MASTER_TX_DATA_ACK==MTIM_twistatusCheckStatus())
    1484:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    1488:	88 32       	cpi	r24, 0x28	; 40
    148a:	21 f4       	brne	.+8      	; 0x1494 <HNVM_voidWriteByte+0x90>
				{
					MTWI_voidClearFlag();
    148c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
					MTWI_voidSendStopCondition();
    1490:	0e 94 95 1a 	call	0x352a	; 0x352a <MTWI_voidSendStopCondition>
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	a0 e2       	ldi	r26, 0x20	; 32
    149a:	b1 e4       	ldi	r27, 0x41	; 65
    149c:	8b 87       	std	Y+11, r24	; 0x0b
    149e:	9c 87       	std	Y+12, r25	; 0x0c
    14a0:	ad 87       	std	Y+13, r26	; 0x0d
    14a2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    14ac:	20 e0       	ldi	r18, 0x00	; 0
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	4a ef       	ldi	r20, 0xFA	; 250
    14b2:	54 e4       	ldi	r21, 0x44	; 68
    14b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	8f 83       	std	Y+7, r24	; 0x07
    14be:	98 87       	std	Y+8, r25	; 0x08
    14c0:	a9 87       	std	Y+9, r26	; 0x09
    14c2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14c4:	6f 81       	ldd	r22, Y+7	; 0x07
    14c6:	78 85       	ldd	r23, Y+8	; 0x08
    14c8:	89 85       	ldd	r24, Y+9	; 0x09
    14ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    14cc:	20 e0       	ldi	r18, 0x00	; 0
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	40 e8       	ldi	r20, 0x80	; 128
    14d2:	5f e3       	ldi	r21, 0x3F	; 63
    14d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    14d8:	88 23       	and	r24, r24
    14da:	2c f4       	brge	.+10     	; 0x14e6 <HNVM_voidWriteByte+0xe2>
		__ticks = 1;
    14dc:	81 e0       	ldi	r24, 0x01	; 1
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	9e 83       	std	Y+6, r25	; 0x06
    14e2:	8d 83       	std	Y+5, r24	; 0x05
    14e4:	3f c0       	rjmp	.+126    	; 0x1564 <HNVM_voidWriteByte+0x160>
	else if (__tmp > 65535)
    14e6:	6f 81       	ldd	r22, Y+7	; 0x07
    14e8:	78 85       	ldd	r23, Y+8	; 0x08
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	20 e0       	ldi	r18, 0x00	; 0
    14f0:	3f ef       	ldi	r19, 0xFF	; 255
    14f2:	4f e7       	ldi	r20, 0x7F	; 127
    14f4:	57 e4       	ldi	r21, 0x47	; 71
    14f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14fa:	18 16       	cp	r1, r24
    14fc:	4c f5       	brge	.+82     	; 0x1550 <HNVM_voidWriteByte+0x14c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1500:	7c 85       	ldd	r23, Y+12	; 0x0c
    1502:	8d 85       	ldd	r24, Y+13	; 0x0d
    1504:	9e 85       	ldd	r25, Y+14	; 0x0e
    1506:	20 e0       	ldi	r18, 0x00	; 0
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	40 e2       	ldi	r20, 0x20	; 32
    150c:	51 e4       	ldi	r21, 0x41	; 65
    150e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	bc 01       	movw	r22, r24
    1518:	cd 01       	movw	r24, r26
    151a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	9e 83       	std	Y+6, r25	; 0x06
    1524:	8d 83       	std	Y+5, r24	; 0x05
    1526:	0f c0       	rjmp	.+30     	; 0x1546 <HNVM_voidWriteByte+0x142>
    1528:	88 ec       	ldi	r24, 0xC8	; 200
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9c 83       	std	Y+4, r25	; 0x04
    152e:	8b 83       	std	Y+3, r24	; 0x03
    1530:	8b 81       	ldd	r24, Y+3	; 0x03
    1532:	9c 81       	ldd	r25, Y+4	; 0x04
    1534:	01 97       	sbiw	r24, 0x01	; 1
    1536:	f1 f7       	brne	.-4      	; 0x1534 <HNVM_voidWriteByte+0x130>
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    153c:	8d 81       	ldd	r24, Y+5	; 0x05
    153e:	9e 81       	ldd	r25, Y+6	; 0x06
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9e 83       	std	Y+6, r25	; 0x06
    1544:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1546:	8d 81       	ldd	r24, Y+5	; 0x05
    1548:	9e 81       	ldd	r25, Y+6	; 0x06
    154a:	00 97       	sbiw	r24, 0x00	; 0
    154c:	69 f7       	brne	.-38     	; 0x1528 <HNVM_voidWriteByte+0x124>
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <HNVM_voidWriteByte+0x174>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1550:	6f 81       	ldd	r22, Y+7	; 0x07
    1552:	78 85       	ldd	r23, Y+8	; 0x08
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155c:	dc 01       	movw	r26, r24
    155e:	cb 01       	movw	r24, r22
    1560:	9e 83       	std	Y+6, r25	; 0x06
    1562:	8d 83       	std	Y+5, r24	; 0x05
    1564:	8d 81       	ldd	r24, Y+5	; 0x05
    1566:	9e 81       	ldd	r25, Y+6	; 0x06
    1568:	9a 83       	std	Y+2, r25	; 0x02
    156a:	89 83       	std	Y+1, r24	; 0x01
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	9a 81       	ldd	r25, Y+2	; 0x02
    1570:	01 97       	sbiw	r24, 0x01	; 1
    1572:	f1 f7       	brne	.-4      	; 0x1570 <HNVM_voidWriteByte+0x16c>
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	{

	}
	_delay_ms(10);

}
    1578:	63 96       	adiw	r28, 0x13	; 19
    157a:	0f b6       	in	r0, 0x3f	; 63
    157c:	f8 94       	cli
    157e:	de bf       	out	0x3e, r29	; 62
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	cd bf       	out	0x3d, r28	; 61
    1584:	cf 91       	pop	r28
    1586:	df 91       	pop	r29
    1588:	08 95       	ret

0000158a <HNVM_u8ReadByte>:
u8 HNVM_u8ReadByte(u16 ARG_u16Address)
{
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
    1592:	63 97       	sbiw	r28, 0x13	; 19
    1594:	0f b6       	in	r0, 0x3f	; 63
    1596:	f8 94       	cli
    1598:	de bf       	out	0x3e, r29	; 62
    159a:	0f be       	out	0x3f, r0	; 63
    159c:	cd bf       	out	0x3d, r28	; 61
    159e:	9b 8b       	std	Y+19, r25	; 0x13
    15a0:	8a 8b       	std	Y+18, r24	; 0x12
	u8 L_u8Data;
	u8 L_u8SlaveAddress;
	u8 L_u8Block;
	L_u8Block=(ARG_u16Address>>8);
    15a2:	8a 89       	ldd	r24, Y+18	; 0x12
    15a4:	9b 89       	ldd	r25, Y+19	; 0x13
    15a6:	89 2f       	mov	r24, r25
    15a8:	99 27       	eor	r25, r25
    15aa:	8f 87       	std	Y+15, r24	; 0x0f
	L_u8SlaveAddress=0b1010000|(L_u8Block);
    15ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    15ae:	80 65       	ori	r24, 0x50	; 80
    15b0:	88 8b       	std	Y+16, r24	; 0x10
	// send start condition ,clear the flag and wait for it to be set again to make sure the operation is done
	MTWI_voidSendStartCondition();
    15b2:	0e 94 87 1a 	call	0x350e	; 0x350e <MTWI_voidSendStartCondition>
	MTWI_voidClearFlag();
    15b6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
	MTWI_voidFlagPolling();
    15ba:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
	// check the status code
	if(MTWI_STATUS_MASTER_START_CONDITION==MTIM_twistatusCheckStatus())
    15be:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <HNVM_u8ReadByte+0x3e>
    15c6:	43 c0       	rjmp	.+134    	; 0x164e <HNVM_u8ReadByte+0xc4>
	{
		// the start condition is send sccuessfuly send the address of the slave
		// slave is 7 bit and the mask is to clear the first bit(write)
		MTWI_voidLoadTWDR(((((L_u8SlaveAddress<<1)&(0xFE))|(0))));
    15c8:	88 89       	ldd	r24, Y+16	; 0x10
    15ca:	88 2f       	mov	r24, r24
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
		MTWI_voidClearFlag();
    15d6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		MTWI_voidFlagPolling();
    15da:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
		// check the status code
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK==MTIM_twistatusCheckStatus())
    15de:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    15e2:	88 31       	cpi	r24, 0x18	; 24
    15e4:	a1 f5       	brne	.+104    	; 0x164e <HNVM_u8ReadByte+0xc4>
		{
			// Load the TWDR with the address of the chossen block
			MTWI_voidLoadTWDR((u8)ARG_u16Address);
    15e6:	8a 89       	ldd	r24, Y+18	; 0x12
    15e8:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
			MTWI_voidClearFlag();
    15ec:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
			MTWI_voidFlagPolling();
    15f0:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
			// check the status code
			if(MTWI_STATUS_MASTER_TX_DATA_ACK==MTIM_twistatusCheckStatus())
    15f4:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    15f8:	88 32       	cpi	r24, 0x28	; 40
    15fa:	49 f5       	brne	.+82     	; 0x164e <HNVM_u8ReadByte+0xc4>
			{
				// send repeated start to make read opertion
				MTWI_voidSendStartCondition();
    15fc:	0e 94 87 1a 	call	0x350e	; 0x350e <MTWI_voidSendStartCondition>
				MTWI_voidClearFlag();
    1600:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
				MTWI_voidFlagPolling();
    1604:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
				// check the status code
				if(MTWI_STATUS_MASTER_RSTART_CONDITION==MTIM_twistatusCheckStatus())
    1608:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    160c:	80 31       	cpi	r24, 0x10	; 16
    160e:	f9 f4       	brne	.+62     	; 0x164e <HNVM_u8ReadByte+0xc4>
				{
					MTWI_voidLoadTWDR(((((L_u8SlaveAddress<<1)&(0xFE))|(1))));
    1610:	88 89       	ldd	r24, Y+16	; 0x10
    1612:	88 2f       	mov	r24, r24
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	81 60       	ori	r24, 0x01	; 1
    161c:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
					MTWI_voidClearFlag();
    1620:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
					MTWI_voidFlagPolling();
    1624:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
					// check the status code
					if(MTWI_STATUS_MASTER_RX_SLA_R_ACK==MTIM_twistatusCheckStatus())
    1628:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    162c:	80 34       	cpi	r24, 0x40	; 64
    162e:	79 f4       	brne	.+30     	; 0x164e <HNVM_u8ReadByte+0xc4>
					{
						// wait until the data is recieved
						MTWI_voidClearFlag();
    1630:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
						MTWI_voidFlagPolling();
    1634:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
						if(MTWI_STATUS_MASTER_RX_DATA_NACK==MTIM_twistatusCheckStatus())
    1638:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    163c:	88 35       	cpi	r24, 0x58	; 88
    163e:	39 f4       	brne	.+14     	; 0x164e <HNVM_u8ReadByte+0xc4>
						{
							L_u8Data=MTWI_charReadTWDR();
    1640:	0e 94 27 1b 	call	0x364e	; 0x364e <MTWI_charReadTWDR>
    1644:	89 8b       	std	Y+17, r24	; 0x11
							MTWI_voidClearFlag();
    1646:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
							MTWI_voidSendStopCondition();
    164a:	0e 94 95 1a 	call	0x352a	; 0x352a <MTWI_voidSendStopCondition>
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	a0 e2       	ldi	r26, 0x20	; 32
    1654:	b1 e4       	ldi	r27, 0x41	; 65
    1656:	8b 87       	std	Y+11, r24	; 0x0b
    1658:	9c 87       	std	Y+12, r25	; 0x0c
    165a:	ad 87       	std	Y+13, r26	; 0x0d
    165c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    165e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1660:	7c 85       	ldd	r23, Y+12	; 0x0c
    1662:	8d 85       	ldd	r24, Y+13	; 0x0d
    1664:	9e 85       	ldd	r25, Y+14	; 0x0e
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	4a ef       	ldi	r20, 0xFA	; 250
    166c:	54 e4       	ldi	r21, 0x44	; 68
    166e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1672:	dc 01       	movw	r26, r24
    1674:	cb 01       	movw	r24, r22
    1676:	8f 83       	std	Y+7, r24	; 0x07
    1678:	98 87       	std	Y+8, r25	; 0x08
    167a:	a9 87       	std	Y+9, r26	; 0x09
    167c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    167e:	6f 81       	ldd	r22, Y+7	; 0x07
    1680:	78 85       	ldd	r23, Y+8	; 0x08
    1682:	89 85       	ldd	r24, Y+9	; 0x09
    1684:	9a 85       	ldd	r25, Y+10	; 0x0a
    1686:	20 e0       	ldi	r18, 0x00	; 0
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	40 e8       	ldi	r20, 0x80	; 128
    168c:	5f e3       	ldi	r21, 0x3F	; 63
    168e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1692:	88 23       	and	r24, r24
    1694:	2c f4       	brge	.+10     	; 0x16a0 <HNVM_u8ReadByte+0x116>
		__ticks = 1;
    1696:	81 e0       	ldi	r24, 0x01	; 1
    1698:	90 e0       	ldi	r25, 0x00	; 0
    169a:	9e 83       	std	Y+6, r25	; 0x06
    169c:	8d 83       	std	Y+5, r24	; 0x05
    169e:	3f c0       	rjmp	.+126    	; 0x171e <HNVM_u8ReadByte+0x194>
	else if (__tmp > 65535)
    16a0:	6f 81       	ldd	r22, Y+7	; 0x07
    16a2:	78 85       	ldd	r23, Y+8	; 0x08
    16a4:	89 85       	ldd	r24, Y+9	; 0x09
    16a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	3f ef       	ldi	r19, 0xFF	; 255
    16ac:	4f e7       	ldi	r20, 0x7F	; 127
    16ae:	57 e4       	ldi	r21, 0x47	; 71
    16b0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    16b4:	18 16       	cp	r1, r24
    16b6:	4c f5       	brge	.+82     	; 0x170a <HNVM_u8ReadByte+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    16bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    16be:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	40 e2       	ldi	r20, 0x20	; 32
    16c6:	51 e4       	ldi	r21, 0x41	; 65
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	bc 01       	movw	r22, r24
    16d2:	cd 01       	movw	r24, r26
    16d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d8:	dc 01       	movw	r26, r24
    16da:	cb 01       	movw	r24, r22
    16dc:	9e 83       	std	Y+6, r25	; 0x06
    16de:	8d 83       	std	Y+5, r24	; 0x05
    16e0:	0f c0       	rjmp	.+30     	; 0x1700 <HNVM_u8ReadByte+0x176>
    16e2:	88 ec       	ldi	r24, 0xC8	; 200
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	9c 83       	std	Y+4, r25	; 0x04
    16e8:	8b 83       	std	Y+3, r24	; 0x03
    16ea:	8b 81       	ldd	r24, Y+3	; 0x03
    16ec:	9c 81       	ldd	r25, Y+4	; 0x04
    16ee:	01 97       	sbiw	r24, 0x01	; 1
    16f0:	f1 f7       	brne	.-4      	; 0x16ee <HNVM_u8ReadByte+0x164>
    16f2:	9c 83       	std	Y+4, r25	; 0x04
    16f4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	9e 81       	ldd	r25, Y+6	; 0x06
    16fa:	01 97       	sbiw	r24, 0x01	; 1
    16fc:	9e 83       	std	Y+6, r25	; 0x06
    16fe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1700:	8d 81       	ldd	r24, Y+5	; 0x05
    1702:	9e 81       	ldd	r25, Y+6	; 0x06
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	69 f7       	brne	.-38     	; 0x16e2 <HNVM_u8ReadByte+0x158>
    1708:	14 c0       	rjmp	.+40     	; 0x1732 <HNVM_u8ReadByte+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    170a:	6f 81       	ldd	r22, Y+7	; 0x07
    170c:	78 85       	ldd	r23, Y+8	; 0x08
    170e:	89 85       	ldd	r24, Y+9	; 0x09
    1710:	9a 85       	ldd	r25, Y+10	; 0x0a
    1712:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1716:	dc 01       	movw	r26, r24
    1718:	cb 01       	movw	r24, r22
    171a:	9e 83       	std	Y+6, r25	; 0x06
    171c:	8d 83       	std	Y+5, r24	; 0x05
    171e:	8d 81       	ldd	r24, Y+5	; 0x05
    1720:	9e 81       	ldd	r25, Y+6	; 0x06
    1722:	9a 83       	std	Y+2, r25	; 0x02
    1724:	89 83       	std	Y+1, r24	; 0x01
    1726:	89 81       	ldd	r24, Y+1	; 0x01
    1728:	9a 81       	ldd	r25, Y+2	; 0x02
    172a:	01 97       	sbiw	r24, 0x01	; 1
    172c:	f1 f7       	brne	.-4      	; 0x172a <HNVM_u8ReadByte+0x1a0>
    172e:	9a 83       	std	Y+2, r25	; 0x02
    1730:	89 83       	std	Y+1, r24	; 0x01
	else
	{

	}
	_delay_ms(10);
	return L_u8Data;
    1732:	89 89       	ldd	r24, Y+17	; 0x11

}
    1734:	63 96       	adiw	r28, 0x13	; 19
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	cf 91       	pop	r28
    1742:	df 91       	pop	r29
    1744:	08 95       	ret

00001746 <KEYPAD_u8GetPressedKey>:
#include "KEYPAD_private.h"
#include "KEYPAD_config.h"
#include "util/delay.h"

u8 KEYPAD_u8GetPressedKey(void)
{
    1746:	df 93       	push	r29
    1748:	cf 93       	push	r28
    174a:	cd b7       	in	r28, 0x3d	; 61
    174c:	de b7       	in	r29, 0x3e	; 62
    174e:	62 97       	sbiw	r28, 0x12	; 18
    1750:	0f b6       	in	r0, 0x3f	; 63
    1752:	f8 94       	cli
    1754:	de bf       	out	0x3e, r29	; 62
    1756:	0f be       	out	0x3f, r0	; 63
    1758:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey=KEYPAD_NoPressedKey;
    175a:	8f ef       	ldi	r24, 0xFF	; 255
    175c:	89 8b       	std	Y+17, r24	; 0x11
	static u8 Local_u8colArr[Keypad_colno]={KEYPAD_Col0Pin,KEYPAD_Col1Pin,KEYPAD_Col2Pin,KEYPAD_Col3Pin};
	static u8 Local_u8rowArr[Keypad_rowno]={KEYPAD_Row0Pin,KEYPAD_Row1Pin,KEYPAD_Row2Pin,KEYPAD_Row3Pin};

	static u8 Local_u8KEYPADArr[Keypad_rowno][Keypad_colno]=KEYPAD_Arr;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
    175e:	18 8a       	std	Y+16, r1	; 0x10
    1760:	c6 c0       	rjmp	.+396    	; 0x18ee <KEYPAD_u8GetPressedKey+0x1a8>
	{
		/*actve current colum*/
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_LOW);
    1762:	88 89       	ldd	r24, Y+16	; 0x10
    1764:	88 2f       	mov	r24, r24
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	fc 01       	movw	r30, r24
    176a:	e4 56       	subi	r30, 0x64	; 100
    176c:	fd 4f       	sbci	r31, 0xFD	; 253
    176e:	90 81       	ld	r25, Z
    1770:	82 e0       	ldi	r24, 0x02	; 2
    1772:	69 2f       	mov	r22, r25
    1774:	40 e0       	ldi	r20, 0x00	; 0
    1776:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
		for(Local_u8rowIndex=0;Local_u8rowIndex<Keypad_rowno;Local_u8rowIndex++)
    177a:	1f 86       	std	Y+15, r1	; 0x0f
    177c:	a5 c0       	rjmp	.+330    	; 0x18c8 <KEYPAD_u8GetPressedKey+0x182>
		{
			if(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0)
    177e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1780:	88 2f       	mov	r24, r24
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	fc 01       	movw	r30, r24
    1786:	e8 56       	subi	r30, 0x68	; 104
    1788:	fd 4f       	sbci	r31, 0xFD	; 253
    178a:	90 81       	ld	r25, Z
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	69 2f       	mov	r22, r25
    1790:	0e 94 88 13 	call	0x2710	; 0x2710 <DIO_u8GetPinValue>
    1794:	88 23       	and	r24, r24
    1796:	09 f0       	breq	.+2      	; 0x179a <KEYPAD_u8GetPressedKey+0x54>
    1798:	94 c0       	rjmp	.+296    	; 0x18c2 <KEYPAD_u8GetPressedKey+0x17c>
			{
				Local_u8PressedKey=Local_u8KEYPADArr[Local_u8rowIndex][Local_u8ColumnIndex];
    179a:	8f 85       	ldd	r24, Y+15	; 0x0f
    179c:	48 2f       	mov	r20, r24
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	88 89       	ldd	r24, Y+16	; 0x10
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	ca 01       	movw	r24, r20
    17a8:	88 0f       	add	r24, r24
    17aa:	99 1f       	adc	r25, r25
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	82 0f       	add	r24, r18
    17b2:	93 1f       	adc	r25, r19
    17b4:	fc 01       	movw	r30, r24
    17b6:	e8 57       	subi	r30, 0x78	; 120
    17b8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ba:	80 81       	ld	r24, Z
    17bc:	89 8b       	std	Y+17, r24	; 0x11
				while(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0){}
    17be:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c0:	88 2f       	mov	r24, r24
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	fc 01       	movw	r30, r24
    17c6:	e8 56       	subi	r30, 0x68	; 104
    17c8:	fd 4f       	sbci	r31, 0xFD	; 253
    17ca:	90 81       	ld	r25, Z
    17cc:	82 e0       	ldi	r24, 0x02	; 2
    17ce:	69 2f       	mov	r22, r25
    17d0:	0e 94 88 13 	call	0x2710	; 0x2710 <DIO_u8GetPinValue>
    17d4:	88 23       	and	r24, r24
    17d6:	99 f3       	breq	.-26     	; 0x17be <KEYPAD_u8GetPressedKey+0x78>
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 ea       	ldi	r26, 0xA0	; 160
    17de:	b0 e4       	ldi	r27, 0x40	; 64
    17e0:	8b 87       	std	Y+11, r24	; 0x0b
    17e2:	9c 87       	std	Y+12, r25	; 0x0c
    17e4:	ad 87       	std	Y+13, r26	; 0x0d
    17e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    17ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    17ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    17ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8f 83       	std	Y+7, r24	; 0x07
    1802:	98 87       	std	Y+8, r25	; 0x08
    1804:	a9 87       	std	Y+9, r26	; 0x09
    1806:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1808:	6f 81       	ldd	r22, Y+7	; 0x07
    180a:	78 85       	ldd	r23, Y+8	; 0x08
    180c:	89 85       	ldd	r24, Y+9	; 0x09
    180e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <KEYPAD_u8GetPressedKey+0xe4>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <KEYPAD_u8GetPressedKey+0x162>
	else if (__tmp > 65535)
    182a:	6f 81       	ldd	r22, Y+7	; 0x07
    182c:	78 85       	ldd	r23, Y+8	; 0x08
    182e:	89 85       	ldd	r24, Y+9	; 0x09
    1830:	9a 85       	ldd	r25, Y+10	; 0x0a
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <KEYPAD_u8GetPressedKey+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	6b 85       	ldd	r22, Y+11	; 0x0b
    1844:	7c 85       	ldd	r23, Y+12	; 0x0c
    1846:	8d 85       	ldd	r24, Y+13	; 0x0d
    1848:	9e 85       	ldd	r25, Y+14	; 0x0e
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9e 83       	std	Y+6, r25	; 0x06
    1868:	8d 83       	std	Y+5, r24	; 0x05
    186a:	0f c0       	rjmp	.+30     	; 0x188a <KEYPAD_u8GetPressedKey+0x144>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9c 83       	std	Y+4, r25	; 0x04
    1872:	8b 83       	std	Y+3, r24	; 0x03
    1874:	8b 81       	ldd	r24, Y+3	; 0x03
    1876:	9c 81       	ldd	r25, Y+4	; 0x04
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <KEYPAD_u8GetPressedKey+0x132>
    187c:	9c 83       	std	Y+4, r25	; 0x04
    187e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9e 83       	std	Y+6, r25	; 0x06
    1888:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8d 81       	ldd	r24, Y+5	; 0x05
    188c:	9e 81       	ldd	r25, Y+6	; 0x06
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <KEYPAD_u8GetPressedKey+0x126>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <KEYPAD_u8GetPressedKey+0x176>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6f 81       	ldd	r22, Y+7	; 0x07
    1896:	78 85       	ldd	r23, Y+8	; 0x08
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	9a 85       	ldd	r25, Y+10	; 0x0a
    189c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9e 83       	std	Y+6, r25	; 0x06
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	8d 81       	ldd	r24, Y+5	; 0x05
    18aa:	9e 81       	ldd	r25, Y+6	; 0x06
    18ac:	9a 83       	std	Y+2, r25	; 0x02
    18ae:	89 83       	std	Y+1, r24	; 0x01
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	9a 81       	ldd	r25, Y+2	; 0x02
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <KEYPAD_u8GetPressedKey+0x16e>
    18b8:	9a 83       	std	Y+2, r25	; 0x02
    18ba:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(5);
				return Local_u8PressedKey;
    18bc:	89 89       	ldd	r24, Y+17	; 0x11
    18be:	8a 8b       	std	Y+18, r24	; 0x12
    18c0:	1c c0       	rjmp	.+56     	; 0x18fa <KEYPAD_u8GetPressedKey+0x1b4>

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
	{
		/*actve current colum*/
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_LOW);
		for(Local_u8rowIndex=0;Local_u8rowIndex<Keypad_rowno;Local_u8rowIndex++)
    18c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    18c4:	8f 5f       	subi	r24, 0xFF	; 255
    18c6:	8f 87       	std	Y+15, r24	; 0x0f
    18c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ca:	84 30       	cpi	r24, 0x04	; 4
    18cc:	08 f4       	brcc	.+2      	; 0x18d0 <KEYPAD_u8GetPressedKey+0x18a>
    18ce:	57 cf       	rjmp	.-338    	; 0x177e <KEYPAD_u8GetPressedKey+0x38>
				while(DIO_u8GetPinValue(KEYPAD_Port,Local_u8rowArr[Local_u8rowIndex])==0){}
				_delay_ms(5);
				return Local_u8PressedKey;
			}
		}
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_HIGH);
    18d0:	88 89       	ldd	r24, Y+16	; 0x10
    18d2:	88 2f       	mov	r24, r24
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	fc 01       	movw	r30, r24
    18d8:	e4 56       	subi	r30, 0x64	; 100
    18da:	fd 4f       	sbci	r31, 0xFD	; 253
    18dc:	90 81       	ld	r25, Z
    18de:	82 e0       	ldi	r24, 0x02	; 2
    18e0:	69 2f       	mov	r22, r25
    18e2:	41 e0       	ldi	r20, 0x01	; 1
    18e4:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
	static u8 Local_u8colArr[Keypad_colno]={KEYPAD_Col0Pin,KEYPAD_Col1Pin,KEYPAD_Col2Pin,KEYPAD_Col3Pin};
	static u8 Local_u8rowArr[Keypad_rowno]={KEYPAD_Row0Pin,KEYPAD_Row1Pin,KEYPAD_Row2Pin,KEYPAD_Row3Pin};

	static u8 Local_u8KEYPADArr[Keypad_rowno][Keypad_colno]=KEYPAD_Arr;

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<Keypad_colno;Local_u8ColumnIndex++)
    18e8:	88 89       	ldd	r24, Y+16	; 0x10
    18ea:	8f 5f       	subi	r24, 0xFF	; 255
    18ec:	88 8b       	std	Y+16, r24	; 0x10
    18ee:	88 89       	ldd	r24, Y+16	; 0x10
    18f0:	84 30       	cpi	r24, 0x04	; 4
    18f2:	08 f4       	brcc	.+2      	; 0x18f6 <KEYPAD_u8GetPressedKey+0x1b0>
    18f4:	36 cf       	rjmp	.-404    	; 0x1762 <KEYPAD_u8GetPressedKey+0x1c>
		}
		MDIO_StderrSetPinValue(KEYPAD_Port,Local_u8colArr[Local_u8ColumnIndex],MDIO_PIN_HIGH);
	}


	return Local_u8PressedKey;
    18f6:	89 89       	ldd	r24, Y+17	; 0x11
    18f8:	8a 8b       	std	Y+18, r24	; 0x12
    18fa:	8a 89       	ldd	r24, Y+18	; 0x12

}
    18fc:	62 96       	adiw	r28, 0x12	; 18
    18fe:	0f b6       	in	r0, 0x3f	; 63
    1900:	f8 94       	cli
    1902:	de bf       	out	0x3e, r29	; 62
    1904:	0f be       	out	0x3f, r0	; 63
    1906:	cd bf       	out	0x3d, r28	; 61
    1908:	cf 91       	pop	r28
    190a:	df 91       	pop	r29
    190c:	08 95       	ret

0000190e <MADC_stderrInit>:
#include"MADC_interface.h"

static u8 MADC_State=MADC_NOTBUSY;
static void (*MADC_pvoidfIntFunc)(void)=NULL;
STD_error_t MADC_stderrInit(u8 ARG_u8VrefSelect,u8 ARG_uPreScalerSelect)
{
    190e:	df 93       	push	r29
    1910:	cf 93       	push	r28
    1912:	00 d0       	rcall	.+0      	; 0x1914 <MADC_stderrInit+0x6>
    1914:	0f 92       	push	r0
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	8a 83       	std	Y+2, r24	; 0x02
    191c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrErrorState=E_OK;
    191e:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_uPreScalerSelect<=MADC_PRESCALER_128 &&(ARG_u8VrefSelect<=MADC_VREF_AVCC || MADC_VREF_2_56V==ARG_u8VrefSelect))
    1920:	8b 81       	ldd	r24, Y+3	; 0x03
    1922:	88 30       	cpi	r24, 0x08	; 8
    1924:	68 f5       	brcc	.+90     	; 0x1980 <MADC_stderrInit+0x72>
    1926:	8a 81       	ldd	r24, Y+2	; 0x02
    1928:	82 30       	cpi	r24, 0x02	; 2
    192a:	18 f0       	brcs	.+6      	; 0x1932 <MADC_stderrInit+0x24>
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	83 30       	cpi	r24, 0x03	; 3
    1930:	39 f5       	brne	.+78     	; 0x1980 <MADC_stderrInit+0x72>
	{
		ADMUX=((ADMUX&ADMUX_VREF_MASK)|(ARG_u8VrefSelect<<REFS0));
    1932:	a7 e2       	ldi	r26, 0x27	; 39
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e7 e2       	ldi	r30, 0x27	; 39
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	2f 73       	andi	r18, 0x3F	; 63
    1940:	8a 81       	ldd	r24, Y+2	; 0x02
    1942:	88 2f       	mov	r24, r24
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	00 24       	eor	r0, r0
    1948:	96 95       	lsr	r25
    194a:	87 95       	ror	r24
    194c:	07 94       	ror	r0
    194e:	96 95       	lsr	r25
    1950:	87 95       	ror	r24
    1952:	07 94       	ror	r0
    1954:	98 2f       	mov	r25, r24
    1956:	80 2d       	mov	r24, r0
    1958:	82 2b       	or	r24, r18
    195a:	8c 93       	st	X, r24
	#if LEFT_ADJUST_ENABLE==1
		SET_BIT(ADMUX,ADLAR);
    195c:	a7 e2       	ldi	r26, 0x27	; 39
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e7 e2       	ldi	r30, 0x27	; 39
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	80 62       	ori	r24, 0x20	; 32
    1968:	8c 93       	st	X, r24
	#elif LEFT_ADJUST_ENABLE==2
		CLEAR_BIT(ADMUX,ADLAR);
	#else
		#error"Wrong ADLAR choice"
	#endif
		ADCSRA=((ADCSRA&ADCSRA_PRESCALER_MASK)|ARG_uPreScalerSelect);
    196a:	a6 e2       	ldi	r26, 0x26	; 38
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e6 e2       	ldi	r30, 0x26	; 38
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	98 2f       	mov	r25, r24
    1976:	98 7f       	andi	r25, 0xF8	; 248
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	89 2b       	or	r24, r25
    197c:	8c 93       	st	X, r24
    197e:	02 c0       	rjmp	.+4      	; 0x1984 <MADC_stderrInit+0x76>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;	
    1984:	89 81       	ldd	r24, Y+1	; 0x01
}
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <MADC_stderrStartConversion>:

STD_error_t MADC_stderrStartConversion(u8 ARG_u8Channel)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <MADC_stderrStartConversion+0x6>
    1998:	cd b7       	in	r28, 0x3d	; 61
    199a:	de b7       	in	r29, 0x3e	; 62
    199c:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    199e:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8Channel<=MADC_CHANNEL_ADC7)
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	88 30       	cpi	r24, 0x08	; 8
    19a4:	90 f4       	brcc	.+36     	; 0x19ca <MADC_stderrStartConversion+0x38>
	{
		ADMUX=((ADMUX&ADMUX_CHANNEL_MASK)|ARG_u8Channel);
    19a6:	a7 e2       	ldi	r26, 0x27	; 39
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e7 e2       	ldi	r30, 0x27	; 39
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	98 2f       	mov	r25, r24
    19b2:	90 7e       	andi	r25, 0xE0	; 224
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	89 2b       	or	r24, r25
    19b8:	8c 93       	st	X, r24
		SET_BIT(ADCSRA,ADSC);
    19ba:	a6 e2       	ldi	r26, 0x26	; 38
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e6 e2       	ldi	r30, 0x26	; 38
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	80 64       	ori	r24, 0x40	; 64
    19c6:	8c 93       	st	X, r24
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <MADC_stderrStartConversion+0x3c>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    19ca:	81 e0       	ldi	r24, 0x01	; 1
    19cc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
}
    19d0:	0f 90       	pop	r0
    19d2:	0f 90       	pop	r0
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	08 95       	ret

000019da <MADC_voidAdcEnable>:
void MADC_voidAdcEnable(void)
{
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADEN);
    19e2:	a6 e2       	ldi	r26, 0x26	; 38
    19e4:	b0 e0       	ldi	r27, 0x00	; 0
    19e6:	e6 e2       	ldi	r30, 0x26	; 38
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 81       	ld	r24, Z
    19ec:	80 68       	ori	r24, 0x80	; 128
    19ee:	8c 93       	st	X, r24
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	08 95       	ret

000019f6 <MADC_voidAdcDisable>:
void MADC_voidAdcDisable(void)
{
    19f6:	df 93       	push	r29
    19f8:	cf 93       	push	r28
    19fa:	cd b7       	in	r28, 0x3d	; 61
    19fc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADEN);
    19fe:	a6 e2       	ldi	r26, 0x26	; 38
    1a00:	b0 e0       	ldi	r27, 0x00	; 0
    1a02:	e6 e2       	ldi	r30, 0x26	; 38
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	8f 77       	andi	r24, 0x7F	; 127
    1a0a:	8c 93       	st	X, r24
}
    1a0c:	cf 91       	pop	r28
    1a0e:	df 91       	pop	r29
    1a10:	08 95       	ret

00001a12 <MADC_voidWaitFlag>:
void MADC_voidWaitFlag(void)
{
    1a12:	df 93       	push	r29
    1a14:	cf 93       	push	r28
    1a16:	cd b7       	in	r28, 0x3d	; 61
    1a18:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(ADCSRA,ADIF));
    1a1a:	e6 e2       	ldi	r30, 0x26	; 38
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	82 95       	swap	r24
    1a22:	8f 70       	andi	r24, 0x0F	; 15
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	81 70       	andi	r24, 0x01	; 1
    1a2a:	90 70       	andi	r25, 0x00	; 0
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	a9 f3       	breq	.-22     	; 0x1a1a <MADC_voidWaitFlag+0x8>
}
    1a30:	cf 91       	pop	r28
    1a32:	df 91       	pop	r29
    1a34:	08 95       	ret

00001a36 <MADC_voidClearFlag>:
void MADC_voidClearFlag(void)
{
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIF);
    1a3e:	a6 e2       	ldi	r26, 0x26	; 38
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e6 e2       	ldi	r30, 0x26	; 38
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	80 61       	ori	r24, 0x10	; 16
    1a4a:	8c 93       	st	X, r24
}
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	08 95       	ret

00001a52 <MADC_voidAdcEnableInt>:

void MADC_voidAdcEnableInt(void)
{
    1a52:	df 93       	push	r29
    1a54:	cf 93       	push	r28
    1a56:	cd b7       	in	r28, 0x3d	; 61
    1a58:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADCSRA,ADIE);
    1a5a:	a6 e2       	ldi	r26, 0x26	; 38
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e6 e2       	ldi	r30, 0x26	; 38
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	88 60       	ori	r24, 0x08	; 8
    1a66:	8c 93       	st	X, r24
}
    1a68:	cf 91       	pop	r28
    1a6a:	df 91       	pop	r29
    1a6c:	08 95       	ret

00001a6e <MADC_voidAdcDisableInt>:
void MADC_voidAdcDisableInt(void)
{
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADCSRA,ADIE);
    1a76:	a6 e2       	ldi	r26, 0x26	; 38
    1a78:	b0 e0       	ldi	r27, 0x00	; 0
    1a7a:	e6 e2       	ldi	r30, 0x26	; 38
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	80 81       	ld	r24, Z
    1a80:	87 7f       	andi	r24, 0xF7	; 247
    1a82:	8c 93       	st	X, r24
}
    1a84:	cf 91       	pop	r28
    1a86:	df 91       	pop	r29
    1a88:	08 95       	ret

00001a8a <MADC_stderrRead>:
STD_error_t MADC_stderrRead(u16 * ARG_u16pReading,u8 ARG_u8Channel)
{
    1a8a:	df 93       	push	r29
    1a8c:	cf 93       	push	r28
    1a8e:	00 d0       	rcall	.+0      	; 0x1a90 <MADC_stderrRead+0x6>
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <MADC_stderrRead+0x8>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9b 83       	std	Y+3, r25	; 0x03
    1a98:	8a 83       	std	Y+2, r24	; 0x02
    1a9a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrErrorState=E_OK;
    1a9c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u16pReading!=NULL)
    1a9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	91 f0       	breq	.+36     	; 0x1aca <MADC_stderrRead+0x40>
	{
		L_stderrErrorState=MADC_stderrStartConversion(ARG_u8Channel);
    1aa6:	8c 81       	ldd	r24, Y+4	; 0x04
    1aa8:	0e 94 c9 0c 	call	0x1992	; 0x1992 <MADC_stderrStartConversion>
    1aac:	89 83       	std	Y+1, r24	; 0x01
		MADC_voidWaitFlag();
    1aae:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <MADC_voidWaitFlag>
		MADC_voidClearFlag();
    1ab2:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <MADC_voidClearFlag>
		#if LEFT_ADJUST_ENABLE==1
		*ARG_u16pReading=ADCH;
    1ab6:	e5 e2       	ldi	r30, 0x25	; 37
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	80 81       	ld	r24, Z
    1abc:	88 2f       	mov	r24, r24
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	ea 81       	ldd	r30, Y+2	; 0x02
    1ac2:	fb 81       	ldd	r31, Y+3	; 0x03
    1ac4:	91 83       	std	Z+1, r25	; 0x01
    1ac6:	80 83       	st	Z, r24
    1ac8:	02 c0       	rjmp	.+4      	; 0x1ace <MADC_stderrRead+0x44>
		*ARG_u16pReading=(u16)ADCL;
		#endif
	}
	else
	{
		L_stderrErrorState=E_NULL_POINTER;
    1aca:	82 e0       	ldi	r24, 0x02	; 2
    1acc:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    1ace:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <MADC_stderrReadAsynch>:


STD_error_t MADC_stderrReadAsynch(u8 ARG_u8Channel)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <MADC_stderrReadAsynch+0x6>
    1ae4:	cd b7       	in	r28, 0x3d	; 61
    1ae6:	de b7       	in	r29, 0x3e	; 62
    1ae8:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    1aea:	19 82       	std	Y+1, r1	; 0x01
	if(MADC_State==MADC_NOTBUSY)
    1aec:	80 91 a0 02 	lds	r24, 0x02A0
    1af0:	82 30       	cpi	r24, 0x02	; 2
    1af2:	51 f4       	brne	.+20     	; 0x1b08 <MADC_stderrReadAsynch+0x2a>
	{
		MADC_State=MADC_BUSY;
    1af4:	81 e0       	ldi	r24, 0x01	; 1
    1af6:	80 93 a0 02 	sts	0x02A0, r24
		MADC_voidAdcEnableInt();
    1afa:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <MADC_voidAdcEnableInt>
		L_stderrErrorState=MADC_stderrStartConversion(ARG_u8Channel);
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	0e 94 c9 0c 	call	0x1992	; 0x1992 <MADC_stderrStartConversion>
    1b04:	89 83       	std	Y+1, r24	; 0x01
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <MADC_stderrReadAsynch+0x2e>
	}
	else
	{
		L_stderrErrorState=E_NOK;
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    1b0c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b0e:	0f 90       	pop	r0
    1b10:	0f 90       	pop	r0
    1b12:	cf 91       	pop	r28
    1b14:	df 91       	pop	r29
    1b16:	08 95       	ret

00001b18 <MADC_u16Reading>:
u16 MADC_u16Reading(void)
{
    1b18:	df 93       	push	r29
    1b1a:	cf 93       	push	r28
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
	#if LEFT_ADJUST_ENABLE==1
	return ADCH;
    1b20:	e5 e2       	ldi	r30, 0x25	; 37
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	80 81       	ld	r24, Z
    1b26:	88 2f       	mov	r24, r24
    1b28:	90 e0       	ldi	r25, 0x00	; 0
	#elif LEFT_ADJUST_ENABLE==2
	return (ADCL);
	#endif
}
    1b2a:	cf 91       	pop	r28
    1b2c:	df 91       	pop	r29
    1b2e:	08 95       	ret

00001b30 <MADC_stderrSetCallBack>:

STD_error_t MADC_stderrSetCallBack(void (*ARG_pvoidfIsrFunc)(void))
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <MADC_stderrSetCallBack+0x6>
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	9b 83       	std	Y+3, r25	; 0x03
    1b3e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrErrorState=E_OK;
    1b40:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfIsrFunc!=NULL)
    1b42:	8a 81       	ldd	r24, Y+2	; 0x02
    1b44:	9b 81       	ldd	r25, Y+3	; 0x03
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	39 f0       	breq	.+14     	; 0x1b58 <MADC_stderrSetCallBack+0x28>
	{
		MADC_pvoidfIntFunc=ARG_pvoidfIsrFunc;
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1b4e:	90 93 a3 02 	sts	0x02A3, r25
    1b52:	80 93 a2 02 	sts	0x02A2, r24
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <MADC_stderrSetCallBack+0x2c>
	}
	else
	{
		L_stderrErrorState=E_NULL_POINTER;
    1b58:	82 e0       	ldi	r24, 0x02	; 2
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrErrorState;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <__vector_16>:
void __vector_16(void) __attribute__((signal));

void __vector_16(void)
{
    1b6a:	1f 92       	push	r1
    1b6c:	0f 92       	push	r0
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	0f 92       	push	r0
    1b72:	11 24       	eor	r1, r1
    1b74:	2f 93       	push	r18
    1b76:	3f 93       	push	r19
    1b78:	4f 93       	push	r20
    1b7a:	5f 93       	push	r21
    1b7c:	6f 93       	push	r22
    1b7e:	7f 93       	push	r23
    1b80:	8f 93       	push	r24
    1b82:	9f 93       	push	r25
    1b84:	af 93       	push	r26
    1b86:	bf 93       	push	r27
    1b88:	ef 93       	push	r30
    1b8a:	ff 93       	push	r31
    1b8c:	df 93       	push	r29
    1b8e:	cf 93       	push	r28
    1b90:	cd b7       	in	r28, 0x3d	; 61
    1b92:	de b7       	in	r29, 0x3e	; 62
	if(MADC_pvoidfIntFunc!=NULL)
    1b94:	80 91 a2 02 	lds	r24, 0x02A2
    1b98:	90 91 a3 02 	lds	r25, 0x02A3
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	41 f0       	breq	.+16     	; 0x1bb0 <__vector_16+0x46>
	{
		MADC_State=MADC_NOTBUSY;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	80 93 a0 02 	sts	0x02A0, r24
		MADC_pvoidfIntFunc();
    1ba6:	e0 91 a2 02 	lds	r30, 0x02A2
    1baa:	f0 91 a3 02 	lds	r31, 0x02A3
    1bae:	09 95       	icall
	}
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	0f 90       	pop	r0
    1bd2:	1f 90       	pop	r1
    1bd4:	18 95       	reti

00001bd6 <MADC_voidInit>:
// my functions 
void MADC_voidInit(void)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
	// Vref
	#if MADC_VREF_AREF==MADC_VREF_CHOICE
		CLEAR_BIT(ADMUX,REFS0);
		CLEAR_BIT(ADMUX,REFS1);	
	#elif MADC_VREF_AVCC==MADC_VREF_CHOICE
		SET_BIT(ADMUX,REFS0);
    1bde:	a7 e2       	ldi	r26, 0x27	; 39
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e7 e2       	ldi	r30, 0x27	; 39
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	80 64       	ori	r24, 0x40	; 64
    1bea:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,REFS1);
    1bec:	a7 e2       	ldi	r26, 0x27	; 39
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e7 e2       	ldi	r30, 0x27	; 39
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	8f 77       	andi	r24, 0x7F	; 127
    1bf8:	8c 93       	st	X, r24
	#else 
		#error"Wrong Vref choice"
	#endif
	//Pre scaler
	#if MADC_PRESCALER_2==MADC_PRESCALER_CHOICE
		SET_BIT(ADCSRA,ADPS0);
    1bfa:	a6 e2       	ldi	r26, 0x26	; 38
    1bfc:	b0 e0       	ldi	r27, 0x00	; 0
    1bfe:	e6 e2       	ldi	r30, 0x26	; 38
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	80 81       	ld	r24, Z
    1c04:	81 60       	ori	r24, 0x01	; 1
    1c06:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS1);
    1c08:	a6 e2       	ldi	r26, 0x26	; 38
    1c0a:	b0 e0       	ldi	r27, 0x00	; 0
    1c0c:	e6 e2       	ldi	r30, 0x26	; 38
    1c0e:	f0 e0       	ldi	r31, 0x00	; 0
    1c10:	80 81       	ld	r24, Z
    1c12:	8d 7f       	andi	r24, 0xFD	; 253
    1c14:	8c 93       	st	X, r24
		CLEAR_BIT(ADCSRA,ADPS2);		
    1c16:	a6 e2       	ldi	r26, 0x26	; 38
    1c18:	b0 e0       	ldi	r27, 0x00	; 0
    1c1a:	e6 e2       	ldi	r30, 0x26	; 38
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	80 81       	ld	r24, Z
    1c20:	8b 7f       	andi	r24, 0xFB	; 251
    1c22:	8c 93       	st	X, r24
	#else 
		#error"Wrong pre scaler choice"
	#endif
	
	#if LEFT_ADJUST_ENABLE==1
		SET_BIT(ADMUX,ADLAR);
    1c24:	a7 e2       	ldi	r26, 0x27	; 39
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	e7 e2       	ldi	r30, 0x27	; 39
    1c2a:	f0 e0       	ldi	r31, 0x00	; 0
    1c2c:	80 81       	ld	r24, Z
    1c2e:	80 62       	ori	r24, 0x20	; 32
    1c30:	8c 93       	st	X, r24
		CLEAR_BIT(ADMUX,ADLAR);
	#else 
		#error"Wrong ADLAR choice"
	#endif
	
}
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <MADC_u8StartConversionSynch>:
u8 MADC_u8StartConversionSynch(u8 ARG_u8Channel)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	0f 92       	push	r0
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
	// enable ADC 
	SET_BIT(ADCSRA,ADEN);
    1c44:	a6 e2       	ldi	r26, 0x26	; 38
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e6 e2       	ldi	r30, 0x26	; 38
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	80 68       	ori	r24, 0x80	; 128
    1c50:	8c 93       	st	X, r24
	// set channel;
	ADMUX&=ADMUX_CHANNEL_MASK;
    1c52:	a7 e2       	ldi	r26, 0x27	; 39
    1c54:	b0 e0       	ldi	r27, 0x00	; 0
    1c56:	e7 e2       	ldi	r30, 0x27	; 39
    1c58:	f0 e0       	ldi	r31, 0x00	; 0
    1c5a:	80 81       	ld	r24, Z
    1c5c:	80 7e       	andi	r24, 0xE0	; 224
    1c5e:	8c 93       	st	X, r24
	ADMUX|=ARG_u8Channel;
    1c60:	a7 e2       	ldi	r26, 0x27	; 39
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e7 e2       	ldi	r30, 0x27	; 39
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	90 81       	ld	r25, Z
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	89 2b       	or	r24, r25
    1c6e:	8c 93       	st	X, r24
	// Start conversion
	SET_BIT(ADCSRA,ADSC);
    1c70:	a6 e2       	ldi	r26, 0x26	; 38
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e6 e2       	ldi	r30, 0x26	; 38
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	80 64       	ori	r24, 0x40	; 64
    1c7c:	8c 93       	st	X, r24
	// wait for the flag to be set
	while(!GET_BIT(ADCSRA,ADIF));
    1c7e:	e6 e2       	ldi	r30, 0x26	; 38
    1c80:	f0 e0       	ldi	r31, 0x00	; 0
    1c82:	80 81       	ld	r24, Z
    1c84:	82 95       	swap	r24
    1c86:	8f 70       	andi	r24, 0x0F	; 15
    1c88:	88 2f       	mov	r24, r24
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	81 70       	andi	r24, 0x01	; 1
    1c8e:	90 70       	andi	r25, 0x00	; 0
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	a9 f3       	breq	.-22     	; 0x1c7e <MADC_u8StartConversionSynch+0x46>
	// clear the flag
	SET_BIT(ADCSRA,ADIF);
    1c94:	a6 e2       	ldi	r26, 0x26	; 38
    1c96:	b0 e0       	ldi	r27, 0x00	; 0
    1c98:	e6 e2       	ldi	r30, 0x26	; 38
    1c9a:	f0 e0       	ldi	r31, 0x00	; 0
    1c9c:	80 81       	ld	r24, Z
    1c9e:	80 61       	ori	r24, 0x10	; 16
    1ca0:	8c 93       	st	X, r24
	// return the result
	return ADCH;
    1ca2:	e5 e2       	ldi	r30, 0x25	; 37
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
	
}
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	08 95       	ret

00001cb0 <MDIO_StderrSetPortDirection>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrSetPortDirection(u8 ARG_u8Port, u8 ARG_u8Direction)
{
    1cb0:	df 93       	push	r29
    1cb2:	cf 93       	push	r28
    1cb4:	00 d0       	rcall	.+0      	; 0x1cb6 <MDIO_StderrSetPortDirection+0x6>
    1cb6:	00 d0       	rcall	.+0      	; 0x1cb8 <MDIO_StderrSetPortDirection+0x8>
    1cb8:	0f 92       	push	r0
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
    1cc0:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    1cc2:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	28 2f       	mov	r18, r24
    1cc8:	30 e0       	ldi	r19, 0x00	; 0
    1cca:	3d 83       	std	Y+5, r19	; 0x05
    1ccc:	2c 83       	std	Y+4, r18	; 0x04
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1cd2:	82 30       	cpi	r24, 0x02	; 2
    1cd4:	91 05       	cpc	r25, r1
    1cd6:	d9 f0       	breq	.+54     	; 0x1d0e <MDIO_StderrSetPortDirection+0x5e>
    1cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1cda:	3d 81       	ldd	r19, Y+5	; 0x05
    1cdc:	23 30       	cpi	r18, 0x03	; 3
    1cde:	31 05       	cpc	r19, r1
    1ce0:	34 f4       	brge	.+12     	; 0x1cee <MDIO_StderrSetPortDirection+0x3e>
    1ce2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce6:	81 30       	cpi	r24, 0x01	; 1
    1ce8:	91 05       	cpc	r25, r1
    1cea:	61 f0       	breq	.+24     	; 0x1d04 <MDIO_StderrSetPortDirection+0x54>
    1cec:	1f c0       	rjmp	.+62     	; 0x1d2c <MDIO_StderrSetPortDirection+0x7c>
    1cee:	2c 81       	ldd	r18, Y+4	; 0x04
    1cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    1cf2:	23 30       	cpi	r18, 0x03	; 3
    1cf4:	31 05       	cpc	r19, r1
    1cf6:	81 f0       	breq	.+32     	; 0x1d18 <MDIO_StderrSetPortDirection+0x68>
    1cf8:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfa:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfc:	84 30       	cpi	r24, 0x04	; 4
    1cfe:	91 05       	cpc	r25, r1
    1d00:	81 f0       	breq	.+32     	; 0x1d22 <MDIO_StderrSetPortDirection+0x72>
    1d02:	14 c0       	rjmp	.+40     	; 0x1d2c <MDIO_StderrSetPortDirection+0x7c>
	{
		case MDIO_PORTA:GPIOA -> DDR=ARG_u8Direction;break;
    1d04:	e9 e3       	ldi	r30, 0x39	; 57
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	81 83       	std	Z+1, r24	; 0x01
    1d0c:	11 c0       	rjmp	.+34     	; 0x1d30 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTB:GPIOB -> DDR=ARG_u8Direction;break;
    1d0e:	e6 e3       	ldi	r30, 0x36	; 54
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	81 83       	std	Z+1, r24	; 0x01
    1d16:	0c c0       	rjmp	.+24     	; 0x1d30 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTC:GPIOC -> DDR=ARG_u8Direction;break;
    1d18:	e3 e3       	ldi	r30, 0x33	; 51
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	81 83       	std	Z+1, r24	; 0x01
    1d20:	07 c0       	rjmp	.+14     	; 0x1d30 <MDIO_StderrSetPortDirection+0x80>
		case MDIO_PORTD:GPIOD -> DDR=ARG_u8Direction;break;
    1d22:	e0 e3       	ldi	r30, 0x30	; 48
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	8b 81       	ldd	r24, Y+3	; 0x03
    1d28:	81 83       	std	Z+1, r24	; 0x01
    1d2a:	02 c0       	rjmp	.+4      	; 0x1d30 <MDIO_StderrSetPortDirection+0x80>
		default:L_StderrError=E_NOK;break;/*Report an Error */
    1d2c:	81 e0       	ldi	r24, 0x01	; 1
    1d2e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	0f 90       	pop	r0
    1d3a:	0f 90       	pop	r0
    1d3c:	cf 91       	pop	r28
    1d3e:	df 91       	pop	r29
    1d40:	08 95       	ret

00001d42 <MDIO_StderrSetPortValue>:
*[out]: N/A
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrSetPortValue(u8 ARG_u8Port, u8 ARG_u8Value)
{
    1d42:	df 93       	push	r29
    1d44:	cf 93       	push	r28
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <MDIO_StderrSetPortValue+0x6>
    1d48:	00 d0       	rcall	.+0      	; 0x1d4a <MDIO_StderrSetPortValue+0x8>
    1d4a:	0f 92       	push	r0
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	8a 83       	std	Y+2, r24	; 0x02
    1d52:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    1d54:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8Port)
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	28 2f       	mov	r18, r24
    1d5a:	30 e0       	ldi	r19, 0x00	; 0
    1d5c:	3d 83       	std	Y+5, r19	; 0x05
    1d5e:	2c 83       	std	Y+4, r18	; 0x04
    1d60:	8c 81       	ldd	r24, Y+4	; 0x04
    1d62:	9d 81       	ldd	r25, Y+5	; 0x05
    1d64:	82 30       	cpi	r24, 0x02	; 2
    1d66:	91 05       	cpc	r25, r1
    1d68:	d9 f0       	breq	.+54     	; 0x1da0 <MDIO_StderrSetPortValue+0x5e>
    1d6a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d6c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d6e:	23 30       	cpi	r18, 0x03	; 3
    1d70:	31 05       	cpc	r19, r1
    1d72:	34 f4       	brge	.+12     	; 0x1d80 <MDIO_StderrSetPortValue+0x3e>
    1d74:	8c 81       	ldd	r24, Y+4	; 0x04
    1d76:	9d 81       	ldd	r25, Y+5	; 0x05
    1d78:	81 30       	cpi	r24, 0x01	; 1
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	61 f0       	breq	.+24     	; 0x1d96 <MDIO_StderrSetPortValue+0x54>
    1d7e:	1f c0       	rjmp	.+62     	; 0x1dbe <MDIO_StderrSetPortValue+0x7c>
    1d80:	2c 81       	ldd	r18, Y+4	; 0x04
    1d82:	3d 81       	ldd	r19, Y+5	; 0x05
    1d84:	23 30       	cpi	r18, 0x03	; 3
    1d86:	31 05       	cpc	r19, r1
    1d88:	81 f0       	breq	.+32     	; 0x1daa <MDIO_StderrSetPortValue+0x68>
    1d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d8c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d8e:	84 30       	cpi	r24, 0x04	; 4
    1d90:	91 05       	cpc	r25, r1
    1d92:	81 f0       	breq	.+32     	; 0x1db4 <MDIO_StderrSetPortValue+0x72>
    1d94:	14 c0       	rjmp	.+40     	; 0x1dbe <MDIO_StderrSetPortValue+0x7c>
	{
		case MDIO_PORTA:GPIOA -> PORT=ARG_u8Value;break;
    1d96:	e9 e3       	ldi	r30, 0x39	; 57
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9c:	82 83       	std	Z+2, r24	; 0x02
    1d9e:	11 c0       	rjmp	.+34     	; 0x1dc2 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTB:GPIOB -> PORT=ARG_u8Value;break;
    1da0:	e6 e3       	ldi	r30, 0x36	; 54
    1da2:	f0 e0       	ldi	r31, 0x00	; 0
    1da4:	8b 81       	ldd	r24, Y+3	; 0x03
    1da6:	82 83       	std	Z+2, r24	; 0x02
    1da8:	0c c0       	rjmp	.+24     	; 0x1dc2 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTC:GPIOC -> PORT=ARG_u8Value;break;
    1daa:	e3 e3       	ldi	r30, 0x33	; 51
    1dac:	f0 e0       	ldi	r31, 0x00	; 0
    1dae:	8b 81       	ldd	r24, Y+3	; 0x03
    1db0:	82 83       	std	Z+2, r24	; 0x02
    1db2:	07 c0       	rjmp	.+14     	; 0x1dc2 <MDIO_StderrSetPortValue+0x80>
		case MDIO_PORTD:GPIOD -> PORT=ARG_u8Value;break;
    1db4:	e0 e3       	ldi	r30, 0x30	; 48
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dba:	82 83       	std	Z+2, r24	; 0x02
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <MDIO_StderrSetPortValue+0x80>
		default:L_StderrError=E_NOK;break;/*Report an Error */
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc4:	0f 90       	pop	r0
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <MDIO_StderrGetPortValue>:
*[out]:	u8 * ARG_u8pValue :     This Argument used to return value in pin register
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrGetPortValue(u8 * ARG_u8pValue,u8 ARG_u8Port)
{
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <MDIO_StderrGetPortValue+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <MDIO_StderrGetPortValue+0x8>
    1ddc:	00 d0       	rcall	.+0      	; 0x1dde <MDIO_StderrGetPortValue+0xa>
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	9b 83       	std	Y+3, r25	; 0x03
    1de4:	8a 83       	std	Y+2, r24	; 0x02
    1de6:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_StderrError=E_OK;
    1de8:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==ARG_u8pValue)
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	00 97       	sbiw	r24, 0x00	; 0
    1df0:	19 f4       	brne	.+6      	; 0x1df8 <MDIO_StderrGetPortValue+0x24>
	{
		L_StderrError=E_NULL_POINTER;
    1df2:	82 e0       	ldi	r24, 0x02	; 2
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	3e c0       	rjmp	.+124    	; 0x1e74 <MDIO_StderrGetPortValue+0xa0>
	}
	else
	{
		switch(ARG_u8Port)
    1df8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3e 83       	std	Y+6, r19	; 0x06
    1e00:	2d 83       	std	Y+5, r18	; 0x05
    1e02:	8d 81       	ldd	r24, Y+5	; 0x05
    1e04:	9e 81       	ldd	r25, Y+6	; 0x06
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	91 05       	cpc	r25, r1
    1e0a:	e9 f0       	breq	.+58     	; 0x1e46 <MDIO_StderrGetPortValue+0x72>
    1e0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1e0e:	3e 81       	ldd	r19, Y+6	; 0x06
    1e10:	23 30       	cpi	r18, 0x03	; 3
    1e12:	31 05       	cpc	r19, r1
    1e14:	34 f4       	brge	.+12     	; 0x1e22 <MDIO_StderrGetPortValue+0x4e>
    1e16:	8d 81       	ldd	r24, Y+5	; 0x05
    1e18:	9e 81       	ldd	r25, Y+6	; 0x06
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	61 f0       	breq	.+24     	; 0x1e38 <MDIO_StderrGetPortValue+0x64>
    1e20:	27 c0       	rjmp	.+78     	; 0x1e70 <MDIO_StderrGetPortValue+0x9c>
    1e22:	2d 81       	ldd	r18, Y+5	; 0x05
    1e24:	3e 81       	ldd	r19, Y+6	; 0x06
    1e26:	23 30       	cpi	r18, 0x03	; 3
    1e28:	31 05       	cpc	r19, r1
    1e2a:	a1 f0       	breq	.+40     	; 0x1e54 <MDIO_StderrGetPortValue+0x80>
    1e2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	91 05       	cpc	r25, r1
    1e34:	b1 f0       	breq	.+44     	; 0x1e62 <MDIO_StderrGetPortValue+0x8e>
    1e36:	1c c0       	rjmp	.+56     	; 0x1e70 <MDIO_StderrGetPortValue+0x9c>
		{
			case MDIO_PORTA:*ARG_u8pValue=GPIOA -> PIN;break;
    1e38:	e9 e3       	ldi	r30, 0x39	; 57
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	80 81       	ld	r24, Z
    1e3e:	ea 81       	ldd	r30, Y+2	; 0x02
    1e40:	fb 81       	ldd	r31, Y+3	; 0x03
    1e42:	80 83       	st	Z, r24
    1e44:	17 c0       	rjmp	.+46     	; 0x1e74 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTB:*ARG_u8pValue=GPIOB ->  PIN;break;
    1e46:	e6 e3       	ldi	r30, 0x36	; 54
    1e48:	f0 e0       	ldi	r31, 0x00	; 0
    1e4a:	80 81       	ld	r24, Z
    1e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    1e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    1e50:	80 83       	st	Z, r24
    1e52:	10 c0       	rjmp	.+32     	; 0x1e74 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTC:*ARG_u8pValue=GPIOC ->PIN ;break;
    1e54:	e3 e3       	ldi	r30, 0x33	; 51
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	ea 81       	ldd	r30, Y+2	; 0x02
    1e5c:	fb 81       	ldd	r31, Y+3	; 0x03
    1e5e:	80 83       	st	Z, r24
    1e60:	09 c0       	rjmp	.+18     	; 0x1e74 <MDIO_StderrGetPortValue+0xa0>
			case MDIO_PORTD:*ARG_u8pValue=GPIOD ->PIN ;break;
    1e62:	e0 e3       	ldi	r30, 0x30	; 48
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	ea 81       	ldd	r30, Y+2	; 0x02
    1e6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1e6c:	80 83       	st	Z, r24
    1e6e:	02 c0       	rjmp	.+4      	; 0x1e74 <MDIO_StderrGetPortValue+0xa0>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    1e70:	81 e0       	ldi	r24, 0x01	; 1
    1e72:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return L_StderrError;
    1e74:	89 81       	ldd	r24, Y+1	; 0x01

}
    1e76:	26 96       	adiw	r28, 0x06	; 6
    1e78:	0f b6       	in	r0, 0x3f	; 63
    1e7a:	f8 94       	cli
    1e7c:	de bf       	out	0x3e, r29	; 62
    1e7e:	0f be       	out	0x3f, r0	; 63
    1e80:	cd bf       	out	0x3d, r28	; 61
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	08 95       	ret

00001e88 <MDIO_StderrSetPinDirection>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrSetPinDirection(u8 ARG_u8Port,u8 ARG_u8Pin, u8 ARG_u8Direction)
{
    1e88:	df 93       	push	r29
    1e8a:	cf 93       	push	r28
    1e8c:	cd b7       	in	r28, 0x3d	; 61
    1e8e:	de b7       	in	r29, 0x3e	; 62
    1e90:	2a 97       	sbiw	r28, 0x0a	; 10
    1e92:	0f b6       	in	r0, 0x3f	; 63
    1e94:	f8 94       	cli
    1e96:	de bf       	out	0x3e, r29	; 62
    1e98:	0f be       	out	0x3f, r0	; 63
    1e9a:	cd bf       	out	0x3d, r28	; 61
    1e9c:	8a 83       	std	Y+2, r24	; 0x02
    1e9e:	6b 83       	std	Y+3, r22	; 0x03
    1ea0:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_StderrError=E_OK;
    1ea2:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    1ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea6:	88 30       	cpi	r24, 0x08	; 8
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <MDIO_StderrSetPinDirection+0x24>
    1eaa:	d9 c1       	rjmp	.+946    	; 0x225e <MDIO_StderrSetPinDirection+0x3d6>
	{
		if(MDIO_PIN_OUTPUT==ARG_u8Direction)
    1eac:	8c 81       	ldd	r24, Y+4	; 0x04
    1eae:	81 30       	cpi	r24, 0x01	; 1
    1eb0:	09 f0       	breq	.+2      	; 0x1eb4 <MDIO_StderrSetPinDirection+0x2c>
    1eb2:	7c c0       	rjmp	.+248    	; 0x1fac <MDIO_StderrSetPinDirection+0x124>
		{
			switch(ARG_u8Port)
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	28 2f       	mov	r18, r24
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	3a 87       	std	Y+10, r19	; 0x0a
    1ebc:	29 87       	std	Y+9, r18	; 0x09
    1ebe:	89 85       	ldd	r24, Y+9	; 0x09
    1ec0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec2:	82 30       	cpi	r24, 0x02	; 2
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	69 f1       	breq	.+90     	; 0x1f22 <MDIO_StderrSetPinDirection+0x9a>
    1ec8:	29 85       	ldd	r18, Y+9	; 0x09
    1eca:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ecc:	23 30       	cpi	r18, 0x03	; 3
    1ece:	31 05       	cpc	r19, r1
    1ed0:	34 f4       	brge	.+12     	; 0x1ede <MDIO_StderrSetPinDirection+0x56>
    1ed2:	89 85       	ldd	r24, Y+9	; 0x09
    1ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed6:	81 30       	cpi	r24, 0x01	; 1
    1ed8:	91 05       	cpc	r25, r1
    1eda:	69 f0       	breq	.+26     	; 0x1ef6 <MDIO_StderrSetPinDirection+0x6e>
    1edc:	64 c0       	rjmp	.+200    	; 0x1fa6 <MDIO_StderrSetPinDirection+0x11e>
    1ede:	29 85       	ldd	r18, Y+9	; 0x09
    1ee0:	3a 85       	ldd	r19, Y+10	; 0x0a
    1ee2:	23 30       	cpi	r18, 0x03	; 3
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	99 f1       	breq	.+102    	; 0x1f4e <MDIO_StderrSetPinDirection+0xc6>
    1ee8:	89 85       	ldd	r24, Y+9	; 0x09
    1eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eec:	84 30       	cpi	r24, 0x04	; 4
    1eee:	91 05       	cpc	r25, r1
    1ef0:	09 f4       	brne	.+2      	; 0x1ef4 <MDIO_StderrSetPinDirection+0x6c>
    1ef2:	43 c0       	rjmp	.+134    	; 0x1f7a <MDIO_StderrSetPinDirection+0xf2>
    1ef4:	58 c0       	rjmp	.+176    	; 0x1fa6 <MDIO_StderrSetPinDirection+0x11e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA -> DDR,ARG_u8Pin);break;
    1ef6:	a9 e3       	ldi	r26, 0x39	; 57
    1ef8:	b0 e0       	ldi	r27, 0x00	; 0
    1efa:	e9 e3       	ldi	r30, 0x39	; 57
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	81 81       	ldd	r24, Z+1	; 0x01
    1f00:	48 2f       	mov	r20, r24
    1f02:	8b 81       	ldd	r24, Y+3	; 0x03
    1f04:	28 2f       	mov	r18, r24
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	90 e0       	ldi	r25, 0x00	; 0
    1f0c:	02 2e       	mov	r0, r18
    1f0e:	02 c0       	rjmp	.+4      	; 0x1f14 <MDIO_StderrSetPinDirection+0x8c>
    1f10:	88 0f       	add	r24, r24
    1f12:	99 1f       	adc	r25, r25
    1f14:	0a 94       	dec	r0
    1f16:	e2 f7       	brpl	.-8      	; 0x1f10 <MDIO_StderrSetPinDirection+0x88>
    1f18:	84 2b       	or	r24, r20
    1f1a:	11 96       	adiw	r26, 0x01	; 1
    1f1c:	8c 93       	st	X, r24
    1f1e:	11 97       	sbiw	r26, 0x01	; 1
    1f20:	a0 c1       	rjmp	.+832    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:SET_BIT(GPIOB -> DDR,ARG_u8Pin);break;
    1f22:	a6 e3       	ldi	r26, 0x36	; 54
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	e6 e3       	ldi	r30, 0x36	; 54
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	81 81       	ldd	r24, Z+1	; 0x01
    1f2c:	48 2f       	mov	r20, r24
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	28 2f       	mov	r18, r24
    1f32:	30 e0       	ldi	r19, 0x00	; 0
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	02 2e       	mov	r0, r18
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <MDIO_StderrSetPinDirection+0xb8>
    1f3c:	88 0f       	add	r24, r24
    1f3e:	99 1f       	adc	r25, r25
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <MDIO_StderrSetPinDirection+0xb4>
    1f44:	84 2b       	or	r24, r20
    1f46:	11 96       	adiw	r26, 0x01	; 1
    1f48:	8c 93       	st	X, r24
    1f4a:	11 97       	sbiw	r26, 0x01	; 1
    1f4c:	8a c1       	rjmp	.+788    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:SET_BIT(GPIOC -> DDR,ARG_u8Pin);break;
    1f4e:	a3 e3       	ldi	r26, 0x33	; 51
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e3 e3       	ldi	r30, 0x33	; 51
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	81 81       	ldd	r24, Z+1	; 0x01
    1f58:	48 2f       	mov	r20, r24
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	28 2f       	mov	r18, r24
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	02 2e       	mov	r0, r18
    1f66:	02 c0       	rjmp	.+4      	; 0x1f6c <MDIO_StderrSetPinDirection+0xe4>
    1f68:	88 0f       	add	r24, r24
    1f6a:	99 1f       	adc	r25, r25
    1f6c:	0a 94       	dec	r0
    1f6e:	e2 f7       	brpl	.-8      	; 0x1f68 <MDIO_StderrSetPinDirection+0xe0>
    1f70:	84 2b       	or	r24, r20
    1f72:	11 96       	adiw	r26, 0x01	; 1
    1f74:	8c 93       	st	X, r24
    1f76:	11 97       	sbiw	r26, 0x01	; 1
    1f78:	74 c1       	rjmp	.+744    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:SET_BIT(GPIOD -> DDR,ARG_u8Pin);break;
    1f7a:	a0 e3       	ldi	r26, 0x30	; 48
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e0 e3       	ldi	r30, 0x30	; 48
    1f80:	f0 e0       	ldi	r31, 0x00	; 0
    1f82:	81 81       	ldd	r24, Z+1	; 0x01
    1f84:	48 2f       	mov	r20, r24
    1f86:	8b 81       	ldd	r24, Y+3	; 0x03
    1f88:	28 2f       	mov	r18, r24
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	02 2e       	mov	r0, r18
    1f92:	02 c0       	rjmp	.+4      	; 0x1f98 <MDIO_StderrSetPinDirection+0x110>
    1f94:	88 0f       	add	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	0a 94       	dec	r0
    1f9a:	e2 f7       	brpl	.-8      	; 0x1f94 <MDIO_StderrSetPinDirection+0x10c>
    1f9c:	84 2b       	or	r24, r20
    1f9e:	11 96       	adiw	r26, 0x01	; 1
    1fa0:	8c 93       	st	X, r24
    1fa2:	11 97       	sbiw	r26, 0x01	; 1
    1fa4:	5e c1       	rjmp	.+700    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	5b c1       	rjmp	.+694    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_PIN_INPUT==ARG_u8Direction)
    1fac:	8c 81       	ldd	r24, Y+4	; 0x04
    1fae:	82 30       	cpi	r24, 0x02	; 2
    1fb0:	09 f0       	breq	.+2      	; 0x1fb4 <MDIO_StderrSetPinDirection+0x12c>
    1fb2:	80 c0       	rjmp	.+256    	; 0x20b4 <MDIO_StderrSetPinDirection+0x22c>
		{
			switch(ARG_u8Port)
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	28 2f       	mov	r18, r24
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	38 87       	std	Y+8, r19	; 0x08
    1fbc:	2f 83       	std	Y+7, r18	; 0x07
    1fbe:	8f 81       	ldd	r24, Y+7	; 0x07
    1fc0:	98 85       	ldd	r25, Y+8	; 0x08
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	71 f1       	breq	.+92     	; 0x2024 <MDIO_StderrSetPinDirection+0x19c>
    1fc8:	2f 81       	ldd	r18, Y+7	; 0x07
    1fca:	38 85       	ldd	r19, Y+8	; 0x08
    1fcc:	23 30       	cpi	r18, 0x03	; 3
    1fce:	31 05       	cpc	r19, r1
    1fd0:	34 f4       	brge	.+12     	; 0x1fde <MDIO_StderrSetPinDirection+0x156>
    1fd2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fd4:	98 85       	ldd	r25, Y+8	; 0x08
    1fd6:	81 30       	cpi	r24, 0x01	; 1
    1fd8:	91 05       	cpc	r25, r1
    1fda:	69 f0       	breq	.+26     	; 0x1ff6 <MDIO_StderrSetPinDirection+0x16e>
    1fdc:	68 c0       	rjmp	.+208    	; 0x20ae <MDIO_StderrSetPinDirection+0x226>
    1fde:	2f 81       	ldd	r18, Y+7	; 0x07
    1fe0:	38 85       	ldd	r19, Y+8	; 0x08
    1fe2:	23 30       	cpi	r18, 0x03	; 3
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	a9 f1       	breq	.+106    	; 0x2052 <MDIO_StderrSetPinDirection+0x1ca>
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	98 85       	ldd	r25, Y+8	; 0x08
    1fec:	84 30       	cpi	r24, 0x04	; 4
    1fee:	91 05       	cpc	r25, r1
    1ff0:	09 f4       	brne	.+2      	; 0x1ff4 <MDIO_StderrSetPinDirection+0x16c>
    1ff2:	46 c0       	rjmp	.+140    	; 0x2080 <MDIO_StderrSetPinDirection+0x1f8>
    1ff4:	5c c0       	rjmp	.+184    	; 0x20ae <MDIO_StderrSetPinDirection+0x226>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> DDR,ARG_u8Pin);break;
    1ff6:	a9 e3       	ldi	r26, 0x39	; 57
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e9 e3       	ldi	r30, 0x39	; 57
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	81 81       	ldd	r24, Z+1	; 0x01
    2000:	48 2f       	mov	r20, r24
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	28 2f       	mov	r18, r24
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	02 2e       	mov	r0, r18
    200e:	02 c0       	rjmp	.+4      	; 0x2014 <MDIO_StderrSetPinDirection+0x18c>
    2010:	88 0f       	add	r24, r24
    2012:	99 1f       	adc	r25, r25
    2014:	0a 94       	dec	r0
    2016:	e2 f7       	brpl	.-8      	; 0x2010 <MDIO_StderrSetPinDirection+0x188>
    2018:	80 95       	com	r24
    201a:	84 23       	and	r24, r20
    201c:	11 96       	adiw	r26, 0x01	; 1
    201e:	8c 93       	st	X, r24
    2020:	11 97       	sbiw	r26, 0x01	; 1
    2022:	1f c1       	rjmp	.+574    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> DDR,ARG_u8Pin);break;
    2024:	a6 e3       	ldi	r26, 0x36	; 54
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e6 e3       	ldi	r30, 0x36	; 54
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	81 81       	ldd	r24, Z+1	; 0x01
    202e:	48 2f       	mov	r20, r24
    2030:	8b 81       	ldd	r24, Y+3	; 0x03
    2032:	28 2f       	mov	r18, r24
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	90 e0       	ldi	r25, 0x00	; 0
    203a:	02 2e       	mov	r0, r18
    203c:	02 c0       	rjmp	.+4      	; 0x2042 <MDIO_StderrSetPinDirection+0x1ba>
    203e:	88 0f       	add	r24, r24
    2040:	99 1f       	adc	r25, r25
    2042:	0a 94       	dec	r0
    2044:	e2 f7       	brpl	.-8      	; 0x203e <MDIO_StderrSetPinDirection+0x1b6>
    2046:	80 95       	com	r24
    2048:	84 23       	and	r24, r20
    204a:	11 96       	adiw	r26, 0x01	; 1
    204c:	8c 93       	st	X, r24
    204e:	11 97       	sbiw	r26, 0x01	; 1
    2050:	08 c1       	rjmp	.+528    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> DDR,ARG_u8Pin);break;
    2052:	a3 e3       	ldi	r26, 0x33	; 51
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e3 e3       	ldi	r30, 0x33	; 51
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	81 81       	ldd	r24, Z+1	; 0x01
    205c:	48 2f       	mov	r20, r24
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	28 2f       	mov	r18, r24
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	02 2e       	mov	r0, r18
    206a:	02 c0       	rjmp	.+4      	; 0x2070 <MDIO_StderrSetPinDirection+0x1e8>
    206c:	88 0f       	add	r24, r24
    206e:	99 1f       	adc	r25, r25
    2070:	0a 94       	dec	r0
    2072:	e2 f7       	brpl	.-8      	; 0x206c <MDIO_StderrSetPinDirection+0x1e4>
    2074:	80 95       	com	r24
    2076:	84 23       	and	r24, r20
    2078:	11 96       	adiw	r26, 0x01	; 1
    207a:	8c 93       	st	X, r24
    207c:	11 97       	sbiw	r26, 0x01	; 1
    207e:	f1 c0       	rjmp	.+482    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> DDR,ARG_u8Pin);break;
    2080:	a0 e3       	ldi	r26, 0x30	; 48
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e0 e3       	ldi	r30, 0x30	; 48
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	81 81       	ldd	r24, Z+1	; 0x01
    208a:	48 2f       	mov	r20, r24
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	28 2f       	mov	r18, r24
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	02 2e       	mov	r0, r18
    2098:	02 c0       	rjmp	.+4      	; 0x209e <MDIO_StderrSetPinDirection+0x216>
    209a:	88 0f       	add	r24, r24
    209c:	99 1f       	adc	r25, r25
    209e:	0a 94       	dec	r0
    20a0:	e2 f7       	brpl	.-8      	; 0x209a <MDIO_StderrSetPinDirection+0x212>
    20a2:	80 95       	com	r24
    20a4:	84 23       	and	r24, r20
    20a6:	11 96       	adiw	r26, 0x01	; 1
    20a8:	8c 93       	st	X, r24
    20aa:	11 97       	sbiw	r26, 0x01	; 1
    20ac:	da c0       	rjmp	.+436    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	89 83       	std	Y+1, r24	; 0x01
    20b2:	d7 c0       	rjmp	.+430    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else if(MDIO_PIN_PULLUP==ARG_u8Direction)
    20b4:	8c 81       	ldd	r24, Y+4	; 0x04
    20b6:	83 30       	cpi	r24, 0x03	; 3
    20b8:	09 f0       	breq	.+2      	; 0x20bc <MDIO_StderrSetPinDirection+0x234>
    20ba:	ce c0       	rjmp	.+412    	; 0x2258 <MDIO_StderrSetPinDirection+0x3d0>
		{
			switch(ARG_u8Port)
    20bc:	8a 81       	ldd	r24, Y+2	; 0x02
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	3e 83       	std	Y+6, r19	; 0x06
    20c4:	2d 83       	std	Y+5, r18	; 0x05
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	9e 81       	ldd	r25, Y+6	; 0x06
    20ca:	82 30       	cpi	r24, 0x02	; 2
    20cc:	91 05       	cpc	r25, r1
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <MDIO_StderrSetPinDirection+0x24a>
    20d0:	42 c0       	rjmp	.+132    	; 0x2156 <MDIO_StderrSetPinDirection+0x2ce>
    20d2:	2d 81       	ldd	r18, Y+5	; 0x05
    20d4:	3e 81       	ldd	r19, Y+6	; 0x06
    20d6:	23 30       	cpi	r18, 0x03	; 3
    20d8:	31 05       	cpc	r19, r1
    20da:	34 f4       	brge	.+12     	; 0x20e8 <MDIO_StderrSetPinDirection+0x260>
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	81 30       	cpi	r24, 0x01	; 1
    20e2:	91 05       	cpc	r25, r1
    20e4:	71 f0       	breq	.+28     	; 0x2102 <MDIO_StderrSetPinDirection+0x27a>
    20e6:	b5 c0       	rjmp	.+362    	; 0x2252 <MDIO_StderrSetPinDirection+0x3ca>
    20e8:	2d 81       	ldd	r18, Y+5	; 0x05
    20ea:	3e 81       	ldd	r19, Y+6	; 0x06
    20ec:	23 30       	cpi	r18, 0x03	; 3
    20ee:	31 05       	cpc	r19, r1
    20f0:	09 f4       	brne	.+2      	; 0x20f4 <MDIO_StderrSetPinDirection+0x26c>
    20f2:	5b c0       	rjmp	.+182    	; 0x21aa <MDIO_StderrSetPinDirection+0x322>
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	9e 81       	ldd	r25, Y+6	; 0x06
    20f8:	84 30       	cpi	r24, 0x04	; 4
    20fa:	91 05       	cpc	r25, r1
    20fc:	09 f4       	brne	.+2      	; 0x2100 <MDIO_StderrSetPinDirection+0x278>
    20fe:	7f c0       	rjmp	.+254    	; 0x21fe <MDIO_StderrSetPinDirection+0x376>
    2100:	a8 c0       	rjmp	.+336    	; 0x2252 <MDIO_StderrSetPinDirection+0x3ca>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> DDR,ARG_u8Pin);SET_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    2102:	a9 e3       	ldi	r26, 0x39	; 57
    2104:	b0 e0       	ldi	r27, 0x00	; 0
    2106:	e9 e3       	ldi	r30, 0x39	; 57
    2108:	f0 e0       	ldi	r31, 0x00	; 0
    210a:	81 81       	ldd	r24, Z+1	; 0x01
    210c:	48 2f       	mov	r20, r24
    210e:	8b 81       	ldd	r24, Y+3	; 0x03
    2110:	28 2f       	mov	r18, r24
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	81 e0       	ldi	r24, 0x01	; 1
    2116:	90 e0       	ldi	r25, 0x00	; 0
    2118:	02 c0       	rjmp	.+4      	; 0x211e <MDIO_StderrSetPinDirection+0x296>
    211a:	88 0f       	add	r24, r24
    211c:	99 1f       	adc	r25, r25
    211e:	2a 95       	dec	r18
    2120:	e2 f7       	brpl	.-8      	; 0x211a <MDIO_StderrSetPinDirection+0x292>
    2122:	80 95       	com	r24
    2124:	84 23       	and	r24, r20
    2126:	11 96       	adiw	r26, 0x01	; 1
    2128:	8c 93       	st	X, r24
    212a:	a9 e3       	ldi	r26, 0x39	; 57
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e9 e3       	ldi	r30, 0x39	; 57
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	82 81       	ldd	r24, Z+2	; 0x02
    2134:	48 2f       	mov	r20, r24
    2136:	8b 81       	ldd	r24, Y+3	; 0x03
    2138:	28 2f       	mov	r18, r24
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	02 2e       	mov	r0, r18
    2142:	02 c0       	rjmp	.+4      	; 0x2148 <MDIO_StderrSetPinDirection+0x2c0>
    2144:	88 0f       	add	r24, r24
    2146:	99 1f       	adc	r25, r25
    2148:	0a 94       	dec	r0
    214a:	e2 f7       	brpl	.-8      	; 0x2144 <MDIO_StderrSetPinDirection+0x2bc>
    214c:	84 2b       	or	r24, r20
    214e:	12 96       	adiw	r26, 0x02	; 2
    2150:	8c 93       	st	X, r24
    2152:	12 97       	sbiw	r26, 0x02	; 2
    2154:	86 c0       	rjmp	.+268    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> DDR,ARG_u8Pin);SET_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    2156:	a6 e3       	ldi	r26, 0x36	; 54
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	e6 e3       	ldi	r30, 0x36	; 54
    215c:	f0 e0       	ldi	r31, 0x00	; 0
    215e:	81 81       	ldd	r24, Z+1	; 0x01
    2160:	48 2f       	mov	r20, r24
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	28 2f       	mov	r18, r24
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	02 c0       	rjmp	.+4      	; 0x2172 <MDIO_StderrSetPinDirection+0x2ea>
    216e:	88 0f       	add	r24, r24
    2170:	99 1f       	adc	r25, r25
    2172:	2a 95       	dec	r18
    2174:	e2 f7       	brpl	.-8      	; 0x216e <MDIO_StderrSetPinDirection+0x2e6>
    2176:	80 95       	com	r24
    2178:	84 23       	and	r24, r20
    217a:	11 96       	adiw	r26, 0x01	; 1
    217c:	8c 93       	st	X, r24
    217e:	a6 e3       	ldi	r26, 0x36	; 54
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e3       	ldi	r30, 0x36	; 54
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	48 2f       	mov	r20, r24
    218a:	8b 81       	ldd	r24, Y+3	; 0x03
    218c:	28 2f       	mov	r18, r24
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	02 2e       	mov	r0, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <MDIO_StderrSetPinDirection+0x314>
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
    219c:	0a 94       	dec	r0
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <MDIO_StderrSetPinDirection+0x310>
    21a0:	84 2b       	or	r24, r20
    21a2:	12 96       	adiw	r26, 0x02	; 2
    21a4:	8c 93       	st	X, r24
    21a6:	12 97       	sbiw	r26, 0x02	; 2
    21a8:	5c c0       	rjmp	.+184    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> DDR,ARG_u8Pin);SET_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    21aa:	a3 e3       	ldi	r26, 0x33	; 51
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e3 e3       	ldi	r30, 0x33	; 51
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	81 81       	ldd	r24, Z+1	; 0x01
    21b4:	48 2f       	mov	r20, r24
    21b6:	8b 81       	ldd	r24, Y+3	; 0x03
    21b8:	28 2f       	mov	r18, r24
    21ba:	30 e0       	ldi	r19, 0x00	; 0
    21bc:	81 e0       	ldi	r24, 0x01	; 1
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	02 c0       	rjmp	.+4      	; 0x21c6 <MDIO_StderrSetPinDirection+0x33e>
    21c2:	88 0f       	add	r24, r24
    21c4:	99 1f       	adc	r25, r25
    21c6:	2a 95       	dec	r18
    21c8:	e2 f7       	brpl	.-8      	; 0x21c2 <MDIO_StderrSetPinDirection+0x33a>
    21ca:	80 95       	com	r24
    21cc:	84 23       	and	r24, r20
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8c 93       	st	X, r24
    21d2:	a3 e3       	ldi	r26, 0x33	; 51
    21d4:	b0 e0       	ldi	r27, 0x00	; 0
    21d6:	e3 e3       	ldi	r30, 0x33	; 51
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	82 81       	ldd	r24, Z+2	; 0x02
    21dc:	48 2f       	mov	r20, r24
    21de:	8b 81       	ldd	r24, Y+3	; 0x03
    21e0:	28 2f       	mov	r18, r24
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	02 2e       	mov	r0, r18
    21ea:	02 c0       	rjmp	.+4      	; 0x21f0 <MDIO_StderrSetPinDirection+0x368>
    21ec:	88 0f       	add	r24, r24
    21ee:	99 1f       	adc	r25, r25
    21f0:	0a 94       	dec	r0
    21f2:	e2 f7       	brpl	.-8      	; 0x21ec <MDIO_StderrSetPinDirection+0x364>
    21f4:	84 2b       	or	r24, r20
    21f6:	12 96       	adiw	r26, 0x02	; 2
    21f8:	8c 93       	st	X, r24
    21fa:	12 97       	sbiw	r26, 0x02	; 2
    21fc:	32 c0       	rjmp	.+100    	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> DDR,ARG_u8Pin);SET_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    21fe:	a0 e3       	ldi	r26, 0x30	; 48
    2200:	b0 e0       	ldi	r27, 0x00	; 0
    2202:	e0 e3       	ldi	r30, 0x30	; 48
    2204:	f0 e0       	ldi	r31, 0x00	; 0
    2206:	81 81       	ldd	r24, Z+1	; 0x01
    2208:	48 2f       	mov	r20, r24
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	02 c0       	rjmp	.+4      	; 0x221a <MDIO_StderrSetPinDirection+0x392>
    2216:	88 0f       	add	r24, r24
    2218:	99 1f       	adc	r25, r25
    221a:	2a 95       	dec	r18
    221c:	e2 f7       	brpl	.-8      	; 0x2216 <MDIO_StderrSetPinDirection+0x38e>
    221e:	80 95       	com	r24
    2220:	84 23       	and	r24, r20
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	8c 93       	st	X, r24
    2226:	a0 e3       	ldi	r26, 0x30	; 48
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e0 e3       	ldi	r30, 0x30	; 48
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	82 81       	ldd	r24, Z+2	; 0x02
    2230:	48 2f       	mov	r20, r24
    2232:	8b 81       	ldd	r24, Y+3	; 0x03
    2234:	28 2f       	mov	r18, r24
    2236:	30 e0       	ldi	r19, 0x00	; 0
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	02 2e       	mov	r0, r18
    223e:	02 c0       	rjmp	.+4      	; 0x2244 <MDIO_StderrSetPinDirection+0x3bc>
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	0a 94       	dec	r0
    2246:	e2 f7       	brpl	.-8      	; 0x2240 <MDIO_StderrSetPinDirection+0x3b8>
    2248:	84 2b       	or	r24, r20
    224a:	12 96       	adiw	r26, 0x02	; 2
    224c:	8c 93       	st	X, r24
    224e:	12 97       	sbiw	r26, 0x02	; 2
    2250:	08 c0       	rjmp	.+16     	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	89 83       	std	Y+1, r24	; 0x01
    2256:	05 c0       	rjmp	.+10     	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
			}
		}
		else
		{
			L_StderrError=E_NOK;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	02 c0       	rjmp	.+4      	; 0x2262 <MDIO_StderrSetPinDirection+0x3da>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    2262:	89 81       	ldd	r24, Y+1	; 0x01
}
    2264:	2a 96       	adiw	r28, 0x0a	; 10
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <MDIO_StderrSetPinValue>:
*[out]:	N/A
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrSetPinValue(u8 ARG_u8Port,u8 ARG_u8Pin, u8 ARG_u8Value)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
    227e:	28 97       	sbiw	r28, 0x08	; 8
    2280:	0f b6       	in	r0, 0x3f	; 63
    2282:	f8 94       	cli
    2284:	de bf       	out	0x3e, r29	; 62
    2286:	0f be       	out	0x3f, r0	; 63
    2288:	cd bf       	out	0x3d, r28	; 61
    228a:	8a 83       	std	Y+2, r24	; 0x02
    228c:	6b 83       	std	Y+3, r22	; 0x03
    228e:	4c 83       	std	Y+4, r20	; 0x04
	STD_error_t L_StderrError=E_OK;
    2290:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	88 30       	cpi	r24, 0x08	; 8
    2296:	08 f0       	brcs	.+2      	; 0x229a <MDIO_StderrSetPinValue+0x24>
    2298:	07 c1       	rjmp	.+526    	; 0x24a8 <MDIO_StderrSetPinValue+0x232>
	{
		if(MDIO_PIN_HIGH==ARG_u8Value)
    229a:	8c 81       	ldd	r24, Y+4	; 0x04
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	09 f0       	breq	.+2      	; 0x22a2 <MDIO_StderrSetPinValue+0x2c>
    22a0:	7c c0       	rjmp	.+248    	; 0x239a <MDIO_StderrSetPinValue+0x124>
		{
			switch(ARG_u8Port)
    22a2:	8a 81       	ldd	r24, Y+2	; 0x02
    22a4:	28 2f       	mov	r18, r24
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	38 87       	std	Y+8, r19	; 0x08
    22aa:	2f 83       	std	Y+7, r18	; 0x07
    22ac:	8f 81       	ldd	r24, Y+7	; 0x07
    22ae:	98 85       	ldd	r25, Y+8	; 0x08
    22b0:	82 30       	cpi	r24, 0x02	; 2
    22b2:	91 05       	cpc	r25, r1
    22b4:	69 f1       	breq	.+90     	; 0x2310 <MDIO_StderrSetPinValue+0x9a>
    22b6:	2f 81       	ldd	r18, Y+7	; 0x07
    22b8:	38 85       	ldd	r19, Y+8	; 0x08
    22ba:	23 30       	cpi	r18, 0x03	; 3
    22bc:	31 05       	cpc	r19, r1
    22be:	34 f4       	brge	.+12     	; 0x22cc <MDIO_StderrSetPinValue+0x56>
    22c0:	8f 81       	ldd	r24, Y+7	; 0x07
    22c2:	98 85       	ldd	r25, Y+8	; 0x08
    22c4:	81 30       	cpi	r24, 0x01	; 1
    22c6:	91 05       	cpc	r25, r1
    22c8:	69 f0       	breq	.+26     	; 0x22e4 <MDIO_StderrSetPinValue+0x6e>
    22ca:	64 c0       	rjmp	.+200    	; 0x2394 <MDIO_StderrSetPinValue+0x11e>
    22cc:	2f 81       	ldd	r18, Y+7	; 0x07
    22ce:	38 85       	ldd	r19, Y+8	; 0x08
    22d0:	23 30       	cpi	r18, 0x03	; 3
    22d2:	31 05       	cpc	r19, r1
    22d4:	99 f1       	breq	.+102    	; 0x233c <MDIO_StderrSetPinValue+0xc6>
    22d6:	8f 81       	ldd	r24, Y+7	; 0x07
    22d8:	98 85       	ldd	r25, Y+8	; 0x08
    22da:	84 30       	cpi	r24, 0x04	; 4
    22dc:	91 05       	cpc	r25, r1
    22de:	09 f4       	brne	.+2      	; 0x22e2 <MDIO_StderrSetPinValue+0x6c>
    22e0:	43 c0       	rjmp	.+134    	; 0x2368 <MDIO_StderrSetPinValue+0xf2>
    22e2:	58 c0       	rjmp	.+176    	; 0x2394 <MDIO_StderrSetPinValue+0x11e>
			{
				case MDIO_PORTA:SET_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    22e4:	a9 e3       	ldi	r26, 0x39	; 57
    22e6:	b0 e0       	ldi	r27, 0x00	; 0
    22e8:	e9 e3       	ldi	r30, 0x39	; 57
    22ea:	f0 e0       	ldi	r31, 0x00	; 0
    22ec:	82 81       	ldd	r24, Z+2	; 0x02
    22ee:	48 2f       	mov	r20, r24
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	28 2f       	mov	r18, r24
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	02 2e       	mov	r0, r18
    22fc:	02 c0       	rjmp	.+4      	; 0x2302 <MDIO_StderrSetPinValue+0x8c>
    22fe:	88 0f       	add	r24, r24
    2300:	99 1f       	adc	r25, r25
    2302:	0a 94       	dec	r0
    2304:	e2 f7       	brpl	.-8      	; 0x22fe <MDIO_StderrSetPinValue+0x88>
    2306:	84 2b       	or	r24, r20
    2308:	12 96       	adiw	r26, 0x02	; 2
    230a:	8c 93       	st	X, r24
    230c:	12 97       	sbiw	r26, 0x02	; 2
    230e:	ce c0       	rjmp	.+412    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTB:SET_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    2310:	a6 e3       	ldi	r26, 0x36	; 54
    2312:	b0 e0       	ldi	r27, 0x00	; 0
    2314:	e6 e3       	ldi	r30, 0x36	; 54
    2316:	f0 e0       	ldi	r31, 0x00	; 0
    2318:	82 81       	ldd	r24, Z+2	; 0x02
    231a:	48 2f       	mov	r20, r24
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	28 2f       	mov	r18, r24
    2320:	30 e0       	ldi	r19, 0x00	; 0
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	02 2e       	mov	r0, r18
    2328:	02 c0       	rjmp	.+4      	; 0x232e <MDIO_StderrSetPinValue+0xb8>
    232a:	88 0f       	add	r24, r24
    232c:	99 1f       	adc	r25, r25
    232e:	0a 94       	dec	r0
    2330:	e2 f7       	brpl	.-8      	; 0x232a <MDIO_StderrSetPinValue+0xb4>
    2332:	84 2b       	or	r24, r20
    2334:	12 96       	adiw	r26, 0x02	; 2
    2336:	8c 93       	st	X, r24
    2338:	12 97       	sbiw	r26, 0x02	; 2
    233a:	b8 c0       	rjmp	.+368    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTC:SET_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    233c:	a3 e3       	ldi	r26, 0x33	; 51
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e3 e3       	ldi	r30, 0x33	; 51
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	82 81       	ldd	r24, Z+2	; 0x02
    2346:	48 2f       	mov	r20, r24
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	28 2f       	mov	r18, r24
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	02 2e       	mov	r0, r18
    2354:	02 c0       	rjmp	.+4      	; 0x235a <MDIO_StderrSetPinValue+0xe4>
    2356:	88 0f       	add	r24, r24
    2358:	99 1f       	adc	r25, r25
    235a:	0a 94       	dec	r0
    235c:	e2 f7       	brpl	.-8      	; 0x2356 <MDIO_StderrSetPinValue+0xe0>
    235e:	84 2b       	or	r24, r20
    2360:	12 96       	adiw	r26, 0x02	; 2
    2362:	8c 93       	st	X, r24
    2364:	12 97       	sbiw	r26, 0x02	; 2
    2366:	a2 c0       	rjmp	.+324    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTD:SET_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    2368:	a0 e3       	ldi	r26, 0x30	; 48
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e0 e3       	ldi	r30, 0x30	; 48
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	82 81       	ldd	r24, Z+2	; 0x02
    2372:	48 2f       	mov	r20, r24
    2374:	8b 81       	ldd	r24, Y+3	; 0x03
    2376:	28 2f       	mov	r18, r24
    2378:	30 e0       	ldi	r19, 0x00	; 0
    237a:	81 e0       	ldi	r24, 0x01	; 1
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	02 2e       	mov	r0, r18
    2380:	02 c0       	rjmp	.+4      	; 0x2386 <MDIO_StderrSetPinValue+0x110>
    2382:	88 0f       	add	r24, r24
    2384:	99 1f       	adc	r25, r25
    2386:	0a 94       	dec	r0
    2388:	e2 f7       	brpl	.-8      	; 0x2382 <MDIO_StderrSetPinValue+0x10c>
    238a:	84 2b       	or	r24, r20
    238c:	12 96       	adiw	r26, 0x02	; 2
    238e:	8c 93       	st	X, r24
    2390:	12 97       	sbiw	r26, 0x02	; 2
    2392:	8c c0       	rjmp	.+280    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
    2398:	89 c0       	rjmp	.+274    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
			}
		}
		else if(MDIO_PIN_LOW==ARG_u8Value)
    239a:	8c 81       	ldd	r24, Y+4	; 0x04
    239c:	88 23       	and	r24, r24
    239e:	09 f0       	breq	.+2      	; 0x23a2 <MDIO_StderrSetPinValue+0x12c>
    23a0:	80 c0       	rjmp	.+256    	; 0x24a2 <MDIO_StderrSetPinValue+0x22c>
		{
			switch(ARG_u8Port)
    23a2:	8a 81       	ldd	r24, Y+2	; 0x02
    23a4:	28 2f       	mov	r18, r24
    23a6:	30 e0       	ldi	r19, 0x00	; 0
    23a8:	3e 83       	std	Y+6, r19	; 0x06
    23aa:	2d 83       	std	Y+5, r18	; 0x05
    23ac:	8d 81       	ldd	r24, Y+5	; 0x05
    23ae:	9e 81       	ldd	r25, Y+6	; 0x06
    23b0:	82 30       	cpi	r24, 0x02	; 2
    23b2:	91 05       	cpc	r25, r1
    23b4:	71 f1       	breq	.+92     	; 0x2412 <MDIO_StderrSetPinValue+0x19c>
    23b6:	2d 81       	ldd	r18, Y+5	; 0x05
    23b8:	3e 81       	ldd	r19, Y+6	; 0x06
    23ba:	23 30       	cpi	r18, 0x03	; 3
    23bc:	31 05       	cpc	r19, r1
    23be:	34 f4       	brge	.+12     	; 0x23cc <MDIO_StderrSetPinValue+0x156>
    23c0:	8d 81       	ldd	r24, Y+5	; 0x05
    23c2:	9e 81       	ldd	r25, Y+6	; 0x06
    23c4:	81 30       	cpi	r24, 0x01	; 1
    23c6:	91 05       	cpc	r25, r1
    23c8:	69 f0       	breq	.+26     	; 0x23e4 <MDIO_StderrSetPinValue+0x16e>
    23ca:	68 c0       	rjmp	.+208    	; 0x249c <MDIO_StderrSetPinValue+0x226>
    23cc:	2d 81       	ldd	r18, Y+5	; 0x05
    23ce:	3e 81       	ldd	r19, Y+6	; 0x06
    23d0:	23 30       	cpi	r18, 0x03	; 3
    23d2:	31 05       	cpc	r19, r1
    23d4:	a9 f1       	breq	.+106    	; 0x2440 <MDIO_StderrSetPinValue+0x1ca>
    23d6:	8d 81       	ldd	r24, Y+5	; 0x05
    23d8:	9e 81       	ldd	r25, Y+6	; 0x06
    23da:	84 30       	cpi	r24, 0x04	; 4
    23dc:	91 05       	cpc	r25, r1
    23de:	09 f4       	brne	.+2      	; 0x23e2 <MDIO_StderrSetPinValue+0x16c>
    23e0:	46 c0       	rjmp	.+140    	; 0x246e <MDIO_StderrSetPinValue+0x1f8>
    23e2:	5c c0       	rjmp	.+184    	; 0x249c <MDIO_StderrSetPinValue+0x226>
			{
				case MDIO_PORTA:CLEAR_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    23e4:	a9 e3       	ldi	r26, 0x39	; 57
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	e9 e3       	ldi	r30, 0x39	; 57
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	82 81       	ldd	r24, Z+2	; 0x02
    23ee:	48 2f       	mov	r20, r24
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	28 2f       	mov	r18, r24
    23f4:	30 e0       	ldi	r19, 0x00	; 0
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	02 2e       	mov	r0, r18
    23fc:	02 c0       	rjmp	.+4      	; 0x2402 <MDIO_StderrSetPinValue+0x18c>
    23fe:	88 0f       	add	r24, r24
    2400:	99 1f       	adc	r25, r25
    2402:	0a 94       	dec	r0
    2404:	e2 f7       	brpl	.-8      	; 0x23fe <MDIO_StderrSetPinValue+0x188>
    2406:	80 95       	com	r24
    2408:	84 23       	and	r24, r20
    240a:	12 96       	adiw	r26, 0x02	; 2
    240c:	8c 93       	st	X, r24
    240e:	12 97       	sbiw	r26, 0x02	; 2
    2410:	4d c0       	rjmp	.+154    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTB:CLEAR_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    2412:	a6 e3       	ldi	r26, 0x36	; 54
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e6 e3       	ldi	r30, 0x36	; 54
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	82 81       	ldd	r24, Z+2	; 0x02
    241c:	48 2f       	mov	r20, r24
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	28 2f       	mov	r18, r24
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	02 2e       	mov	r0, r18
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <MDIO_StderrSetPinValue+0x1ba>
    242c:	88 0f       	add	r24, r24
    242e:	99 1f       	adc	r25, r25
    2430:	0a 94       	dec	r0
    2432:	e2 f7       	brpl	.-8      	; 0x242c <MDIO_StderrSetPinValue+0x1b6>
    2434:	80 95       	com	r24
    2436:	84 23       	and	r24, r20
    2438:	12 96       	adiw	r26, 0x02	; 2
    243a:	8c 93       	st	X, r24
    243c:	12 97       	sbiw	r26, 0x02	; 2
    243e:	36 c0       	rjmp	.+108    	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTC:CLEAR_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    2440:	a3 e3       	ldi	r26, 0x33	; 51
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	e3 e3       	ldi	r30, 0x33	; 51
    2446:	f0 e0       	ldi	r31, 0x00	; 0
    2448:	82 81       	ldd	r24, Z+2	; 0x02
    244a:	48 2f       	mov	r20, r24
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	02 2e       	mov	r0, r18
    2458:	02 c0       	rjmp	.+4      	; 0x245e <MDIO_StderrSetPinValue+0x1e8>
    245a:	88 0f       	add	r24, r24
    245c:	99 1f       	adc	r25, r25
    245e:	0a 94       	dec	r0
    2460:	e2 f7       	brpl	.-8      	; 0x245a <MDIO_StderrSetPinValue+0x1e4>
    2462:	80 95       	com	r24
    2464:	84 23       	and	r24, r20
    2466:	12 96       	adiw	r26, 0x02	; 2
    2468:	8c 93       	st	X, r24
    246a:	12 97       	sbiw	r26, 0x02	; 2
    246c:	1f c0       	rjmp	.+62     	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				case MDIO_PORTD:CLEAR_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    246e:	a0 e3       	ldi	r26, 0x30	; 48
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	e0 e3       	ldi	r30, 0x30	; 48
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	82 81       	ldd	r24, Z+2	; 0x02
    2478:	48 2f       	mov	r20, r24
    247a:	8b 81       	ldd	r24, Y+3	; 0x03
    247c:	28 2f       	mov	r18, r24
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	02 2e       	mov	r0, r18
    2486:	02 c0       	rjmp	.+4      	; 0x248c <MDIO_StderrSetPinValue+0x216>
    2488:	88 0f       	add	r24, r24
    248a:	99 1f       	adc	r25, r25
    248c:	0a 94       	dec	r0
    248e:	e2 f7       	brpl	.-8      	; 0x2488 <MDIO_StderrSetPinValue+0x212>
    2490:	80 95       	com	r24
    2492:	84 23       	and	r24, r20
    2494:	12 96       	adiw	r26, 0x02	; 2
    2496:	8c 93       	st	X, r24
    2498:	12 97       	sbiw	r26, 0x02	; 2
    249a:	08 c0       	rjmp	.+16     	; 0x24ac <MDIO_StderrSetPinValue+0x236>
				default:L_StderrError=E_NOK;break;/*Report an Error */
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	05 c0       	rjmp	.+10     	; 0x24ac <MDIO_StderrSetPinValue+0x236>
			}
		}
		else
		{
			L_StderrError=E_NOK;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	89 83       	std	Y+1, r24	; 0x01
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <MDIO_StderrSetPinValue+0x236>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    24a8:	81 e0       	ldi	r24, 0x01	; 1
    24aa:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError;
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
}
    24ae:	28 96       	adiw	r28, 0x08	; 8
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	de bf       	out	0x3e, r29	; 62
    24b6:	0f be       	out	0x3f, r0	; 63
    24b8:	cd bf       	out	0x3d, r28	; 61
    24ba:	cf 91       	pop	r28
    24bc:	df 91       	pop	r29
    24be:	08 95       	ret

000024c0 <MDIO_StderrTogglePinValue>:
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/

STD_error_t MDIO_StderrTogglePinValue(u8 ARG_u8Port,u8 ARG_u8Pin)
{
    24c0:	df 93       	push	r29
    24c2:	cf 93       	push	r28
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <MDIO_StderrTogglePinValue+0x6>
    24c6:	00 d0       	rcall	.+0      	; 0x24c8 <MDIO_StderrTogglePinValue+0x8>
    24c8:	0f 92       	push	r0
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	8a 83       	std	Y+2, r24	; 0x02
    24d0:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_StderrError=E_OK;
    24d2:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8Pin>=0)&&(ARG_u8Pin<=7))
    24d4:	8b 81       	ldd	r24, Y+3	; 0x03
    24d6:	88 30       	cpi	r24, 0x08	; 8
    24d8:	08 f0       	brcs	.+2      	; 0x24dc <MDIO_StderrTogglePinValue+0x1c>
    24da:	7c c0       	rjmp	.+248    	; 0x25d4 <MDIO_StderrTogglePinValue+0x114>
	{
		switch(ARG_u8Port)
    24dc:	8a 81       	ldd	r24, Y+2	; 0x02
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	3d 83       	std	Y+5, r19	; 0x05
    24e4:	2c 83       	std	Y+4, r18	; 0x04
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	91 05       	cpc	r25, r1
    24ee:	69 f1       	breq	.+90     	; 0x254a <MDIO_StderrTogglePinValue+0x8a>
    24f0:	2c 81       	ldd	r18, Y+4	; 0x04
    24f2:	3d 81       	ldd	r19, Y+5	; 0x05
    24f4:	23 30       	cpi	r18, 0x03	; 3
    24f6:	31 05       	cpc	r19, r1
    24f8:	34 f4       	brge	.+12     	; 0x2506 <MDIO_StderrTogglePinValue+0x46>
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	9d 81       	ldd	r25, Y+5	; 0x05
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	91 05       	cpc	r25, r1
    2502:	69 f0       	breq	.+26     	; 0x251e <MDIO_StderrTogglePinValue+0x5e>
    2504:	64 c0       	rjmp	.+200    	; 0x25ce <MDIO_StderrTogglePinValue+0x10e>
    2506:	2c 81       	ldd	r18, Y+4	; 0x04
    2508:	3d 81       	ldd	r19, Y+5	; 0x05
    250a:	23 30       	cpi	r18, 0x03	; 3
    250c:	31 05       	cpc	r19, r1
    250e:	99 f1       	breq	.+102    	; 0x2576 <MDIO_StderrTogglePinValue+0xb6>
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	84 30       	cpi	r24, 0x04	; 4
    2516:	91 05       	cpc	r25, r1
    2518:	09 f4       	brne	.+2      	; 0x251c <MDIO_StderrTogglePinValue+0x5c>
    251a:	43 c0       	rjmp	.+134    	; 0x25a2 <MDIO_StderrTogglePinValue+0xe2>
    251c:	58 c0       	rjmp	.+176    	; 0x25ce <MDIO_StderrTogglePinValue+0x10e>
		{
			case MDIO_PORTA:TOGGLE_BIT(GPIOA -> PORT,ARG_u8Pin);break;
    251e:	a9 e3       	ldi	r26, 0x39	; 57
    2520:	b0 e0       	ldi	r27, 0x00	; 0
    2522:	e9 e3       	ldi	r30, 0x39	; 57
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	82 81       	ldd	r24, Z+2	; 0x02
    2528:	48 2f       	mov	r20, r24
    252a:	8b 81       	ldd	r24, Y+3	; 0x03
    252c:	28 2f       	mov	r18, r24
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	90 e0       	ldi	r25, 0x00	; 0
    2534:	02 2e       	mov	r0, r18
    2536:	02 c0       	rjmp	.+4      	; 0x253c <MDIO_StderrTogglePinValue+0x7c>
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	0a 94       	dec	r0
    253e:	e2 f7       	brpl	.-8      	; 0x2538 <MDIO_StderrTogglePinValue+0x78>
    2540:	84 27       	eor	r24, r20
    2542:	12 96       	adiw	r26, 0x02	; 2
    2544:	8c 93       	st	X, r24
    2546:	12 97       	sbiw	r26, 0x02	; 2
    2548:	47 c0       	rjmp	.+142    	; 0x25d8 <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTB:TOGGLE_BIT(GPIOB -> PORT,ARG_u8Pin);break;
    254a:	a6 e3       	ldi	r26, 0x36	; 54
    254c:	b0 e0       	ldi	r27, 0x00	; 0
    254e:	e6 e3       	ldi	r30, 0x36	; 54
    2550:	f0 e0       	ldi	r31, 0x00	; 0
    2552:	82 81       	ldd	r24, Z+2	; 0x02
    2554:	48 2f       	mov	r20, r24
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	28 2f       	mov	r18, r24
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	02 2e       	mov	r0, r18
    2562:	02 c0       	rjmp	.+4      	; 0x2568 <MDIO_StderrTogglePinValue+0xa8>
    2564:	88 0f       	add	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	0a 94       	dec	r0
    256a:	e2 f7       	brpl	.-8      	; 0x2564 <MDIO_StderrTogglePinValue+0xa4>
    256c:	84 27       	eor	r24, r20
    256e:	12 96       	adiw	r26, 0x02	; 2
    2570:	8c 93       	st	X, r24
    2572:	12 97       	sbiw	r26, 0x02	; 2
    2574:	31 c0       	rjmp	.+98     	; 0x25d8 <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTC:TOGGLE_BIT(GPIOC -> PORT,ARG_u8Pin);break;
    2576:	a3 e3       	ldi	r26, 0x33	; 51
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	e3 e3       	ldi	r30, 0x33	; 51
    257c:	f0 e0       	ldi	r31, 0x00	; 0
    257e:	82 81       	ldd	r24, Z+2	; 0x02
    2580:	48 2f       	mov	r20, r24
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	28 2f       	mov	r18, r24
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	81 e0       	ldi	r24, 0x01	; 1
    258a:	90 e0       	ldi	r25, 0x00	; 0
    258c:	02 2e       	mov	r0, r18
    258e:	02 c0       	rjmp	.+4      	; 0x2594 <MDIO_StderrTogglePinValue+0xd4>
    2590:	88 0f       	add	r24, r24
    2592:	99 1f       	adc	r25, r25
    2594:	0a 94       	dec	r0
    2596:	e2 f7       	brpl	.-8      	; 0x2590 <MDIO_StderrTogglePinValue+0xd0>
    2598:	84 27       	eor	r24, r20
    259a:	12 96       	adiw	r26, 0x02	; 2
    259c:	8c 93       	st	X, r24
    259e:	12 97       	sbiw	r26, 0x02	; 2
    25a0:	1b c0       	rjmp	.+54     	; 0x25d8 <MDIO_StderrTogglePinValue+0x118>
			case MDIO_PORTD:TOGGLE_BIT(GPIOD -> PORT,ARG_u8Pin);break;
    25a2:	a0 e3       	ldi	r26, 0x30	; 48
    25a4:	b0 e0       	ldi	r27, 0x00	; 0
    25a6:	e0 e3       	ldi	r30, 0x30	; 48
    25a8:	f0 e0       	ldi	r31, 0x00	; 0
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	48 2f       	mov	r20, r24
    25ae:	8b 81       	ldd	r24, Y+3	; 0x03
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	02 2e       	mov	r0, r18
    25ba:	02 c0       	rjmp	.+4      	; 0x25c0 <MDIO_StderrTogglePinValue+0x100>
    25bc:	88 0f       	add	r24, r24
    25be:	99 1f       	adc	r25, r25
    25c0:	0a 94       	dec	r0
    25c2:	e2 f7       	brpl	.-8      	; 0x25bc <MDIO_StderrTogglePinValue+0xfc>
    25c4:	84 27       	eor	r24, r20
    25c6:	12 96       	adiw	r26, 0x02	; 2
    25c8:	8c 93       	st	X, r24
    25ca:	12 97       	sbiw	r26, 0x02	; 2
    25cc:	05 c0       	rjmp	.+10     	; 0x25d8 <MDIO_StderrTogglePinValue+0x118>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	89 83       	std	Y+1, r24	; 0x01
    25d2:	02 c0       	rjmp	.+4      	; 0x25d8 <MDIO_StderrTogglePinValue+0x118>
		}
	}
	else
	{
		L_StderrError=E_NOK;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_StderrError; 	
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	cf 91       	pop	r28
    25e6:	df 91       	pop	r29
    25e8:	08 95       	ret

000025ea <MDIO_StderrGetPinValue>:
*[out]: u8 * ARG_u8pValue
*
*[Returns]: STD_error_t :Function returns Error code E_OK or E_NOK
--------------------------------------------------------------------------------------------------------------------*/
STD_error_t MDIO_StderrGetPinValue(u8 * ARG_u8pValue,u8 ARG_u8Port,u8 ARG_u8Pin)
{	
    25ea:	df 93       	push	r29
    25ec:	cf 93       	push	r28
    25ee:	cd b7       	in	r28, 0x3d	; 61
    25f0:	de b7       	in	r29, 0x3e	; 62
    25f2:	27 97       	sbiw	r28, 0x07	; 7
    25f4:	0f b6       	in	r0, 0x3f	; 63
    25f6:	f8 94       	cli
    25f8:	de bf       	out	0x3e, r29	; 62
    25fa:	0f be       	out	0x3f, r0	; 63
    25fc:	cd bf       	out	0x3d, r28	; 61
    25fe:	9b 83       	std	Y+3, r25	; 0x03
    2600:	8a 83       	std	Y+2, r24	; 0x02
    2602:	6c 83       	std	Y+4, r22	; 0x04
    2604:	4d 83       	std	Y+5, r20	; 0x05
	STD_error_t L_StderrError=E_OK;
    2606:	19 82       	std	Y+1, r1	; 0x01
	if(NULL==ARG_u8pValue)
    2608:	8a 81       	ldd	r24, Y+2	; 0x02
    260a:	9b 81       	ldd	r25, Y+3	; 0x03
    260c:	00 97       	sbiw	r24, 0x00	; 0
    260e:	19 f4       	brne	.+6      	; 0x2616 <MDIO_StderrGetPinValue+0x2c>
	{
		L_StderrError=E_NULL_POINTER;
    2610:	82 e0       	ldi	r24, 0x02	; 2
    2612:	89 83       	std	Y+1, r24	; 0x01
    2614:	73 c0       	rjmp	.+230    	; 0x26fc <MDIO_StderrGetPinValue+0x112>
	}
	else
	{
		switch(ARG_u8Port)
    2616:	8c 81       	ldd	r24, Y+4	; 0x04
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	3f 83       	std	Y+7, r19	; 0x07
    261e:	2e 83       	std	Y+6, r18	; 0x06
    2620:	4e 81       	ldd	r20, Y+6	; 0x06
    2622:	5f 81       	ldd	r21, Y+7	; 0x07
    2624:	42 30       	cpi	r20, 0x02	; 2
    2626:	51 05       	cpc	r21, r1
    2628:	59 f1       	breq	.+86     	; 0x2680 <MDIO_StderrGetPinValue+0x96>
    262a:	8e 81       	ldd	r24, Y+6	; 0x06
    262c:	9f 81       	ldd	r25, Y+7	; 0x07
    262e:	83 30       	cpi	r24, 0x03	; 3
    2630:	91 05       	cpc	r25, r1
    2632:	34 f4       	brge	.+12     	; 0x2640 <MDIO_StderrGetPinValue+0x56>
    2634:	2e 81       	ldd	r18, Y+6	; 0x06
    2636:	3f 81       	ldd	r19, Y+7	; 0x07
    2638:	21 30       	cpi	r18, 0x01	; 1
    263a:	31 05       	cpc	r19, r1
    263c:	69 f0       	breq	.+26     	; 0x2658 <MDIO_StderrGetPinValue+0x6e>
    263e:	5c c0       	rjmp	.+184    	; 0x26f8 <MDIO_StderrGetPinValue+0x10e>
    2640:	4e 81       	ldd	r20, Y+6	; 0x06
    2642:	5f 81       	ldd	r21, Y+7	; 0x07
    2644:	43 30       	cpi	r20, 0x03	; 3
    2646:	51 05       	cpc	r21, r1
    2648:	79 f1       	breq	.+94     	; 0x26a8 <MDIO_StderrGetPinValue+0xbe>
    264a:	8e 81       	ldd	r24, Y+6	; 0x06
    264c:	9f 81       	ldd	r25, Y+7	; 0x07
    264e:	84 30       	cpi	r24, 0x04	; 4
    2650:	91 05       	cpc	r25, r1
    2652:	09 f4       	brne	.+2      	; 0x2656 <MDIO_StderrGetPinValue+0x6c>
    2654:	3d c0       	rjmp	.+122    	; 0x26d0 <MDIO_StderrGetPinValue+0xe6>
    2656:	50 c0       	rjmp	.+160    	; 0x26f8 <MDIO_StderrGetPinValue+0x10e>
		{
			case MDIO_PORTA:*ARG_u8pValue=GET_BIT(GPIOA -> PIN,ARG_u8Pin);break;
    2658:	e9 e3       	ldi	r30, 0x39	; 57
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	28 2f       	mov	r18, r24
    2660:	30 e0       	ldi	r19, 0x00	; 0
    2662:	8d 81       	ldd	r24, Y+5	; 0x05
    2664:	88 2f       	mov	r24, r24
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	a9 01       	movw	r20, r18
    266a:	02 c0       	rjmp	.+4      	; 0x2670 <MDIO_StderrGetPinValue+0x86>
    266c:	55 95       	asr	r21
    266e:	47 95       	ror	r20
    2670:	8a 95       	dec	r24
    2672:	e2 f7       	brpl	.-8      	; 0x266c <MDIO_StderrGetPinValue+0x82>
    2674:	ca 01       	movw	r24, r20
    2676:	81 70       	andi	r24, 0x01	; 1
    2678:	ea 81       	ldd	r30, Y+2	; 0x02
    267a:	fb 81       	ldd	r31, Y+3	; 0x03
    267c:	80 83       	st	Z, r24
    267e:	3e c0       	rjmp	.+124    	; 0x26fc <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTB:*ARG_u8pValue=GET_BIT(GPIOB -> PIN,ARG_u8Pin);break;
    2680:	e6 e3       	ldi	r30, 0x36	; 54
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	80 81       	ld	r24, Z
    2686:	28 2f       	mov	r18, r24
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	8d 81       	ldd	r24, Y+5	; 0x05
    268c:	88 2f       	mov	r24, r24
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	a9 01       	movw	r20, r18
    2692:	02 c0       	rjmp	.+4      	; 0x2698 <MDIO_StderrGetPinValue+0xae>
    2694:	55 95       	asr	r21
    2696:	47 95       	ror	r20
    2698:	8a 95       	dec	r24
    269a:	e2 f7       	brpl	.-8      	; 0x2694 <MDIO_StderrGetPinValue+0xaa>
    269c:	ca 01       	movw	r24, r20
    269e:	81 70       	andi	r24, 0x01	; 1
    26a0:	ea 81       	ldd	r30, Y+2	; 0x02
    26a2:	fb 81       	ldd	r31, Y+3	; 0x03
    26a4:	80 83       	st	Z, r24
    26a6:	2a c0       	rjmp	.+84     	; 0x26fc <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTC:*ARG_u8pValue=GET_BIT(GPIOC -> PIN,ARG_u8Pin);break;
    26a8:	e3 e3       	ldi	r30, 0x33	; 51
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	28 2f       	mov	r18, r24
    26b0:	30 e0       	ldi	r19, 0x00	; 0
    26b2:	8d 81       	ldd	r24, Y+5	; 0x05
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	a9 01       	movw	r20, r18
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <MDIO_StderrGetPinValue+0xd6>
    26bc:	55 95       	asr	r21
    26be:	47 95       	ror	r20
    26c0:	8a 95       	dec	r24
    26c2:	e2 f7       	brpl	.-8      	; 0x26bc <MDIO_StderrGetPinValue+0xd2>
    26c4:	ca 01       	movw	r24, r20
    26c6:	81 70       	andi	r24, 0x01	; 1
    26c8:	ea 81       	ldd	r30, Y+2	; 0x02
    26ca:	fb 81       	ldd	r31, Y+3	; 0x03
    26cc:	80 83       	st	Z, r24
    26ce:	16 c0       	rjmp	.+44     	; 0x26fc <MDIO_StderrGetPinValue+0x112>
			case MDIO_PORTD:*ARG_u8pValue=GET_BIT(GPIOD -> PIN,ARG_u8Pin);break;
    26d0:	e0 e3       	ldi	r30, 0x30	; 48
    26d2:	f0 e0       	ldi	r31, 0x00	; 0
    26d4:	80 81       	ld	r24, Z
    26d6:	28 2f       	mov	r18, r24
    26d8:	30 e0       	ldi	r19, 0x00	; 0
    26da:	8d 81       	ldd	r24, Y+5	; 0x05
    26dc:	88 2f       	mov	r24, r24
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	a9 01       	movw	r20, r18
    26e2:	02 c0       	rjmp	.+4      	; 0x26e8 <MDIO_StderrGetPinValue+0xfe>
    26e4:	55 95       	asr	r21
    26e6:	47 95       	ror	r20
    26e8:	8a 95       	dec	r24
    26ea:	e2 f7       	brpl	.-8      	; 0x26e4 <MDIO_StderrGetPinValue+0xfa>
    26ec:	ca 01       	movw	r24, r20
    26ee:	81 70       	andi	r24, 0x01	; 1
    26f0:	ea 81       	ldd	r30, Y+2	; 0x02
    26f2:	fb 81       	ldd	r31, Y+3	; 0x03
    26f4:	80 83       	st	Z, r24
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <MDIO_StderrGetPinValue+0x112>
			default:L_StderrError=E_NOK;break;/*Report an Error */
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return L_StderrError;
    26fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    26fe:	27 96       	adiw	r28, 0x07	; 7
    2700:	0f b6       	in	r0, 0x3f	; 63
    2702:	f8 94       	cli
    2704:	de bf       	out	0x3e, r29	; 62
    2706:	0f be       	out	0x3f, r0	; 63
    2708:	cd bf       	out	0x3d, r28	; 61
    270a:	cf 91       	pop	r28
    270c:	df 91       	pop	r29
    270e:	08 95       	ret

00002710 <DIO_u8GetPinValue>:




u8 DIO_u8GetPinValue(u8 Copy_u8Port,u8 Copy_u8Pin)
{
    2710:	df 93       	push	r29
    2712:	cf 93       	push	r28
    2714:	00 d0       	rcall	.+0      	; 0x2716 <DIO_u8GetPinValue+0x6>
    2716:	00 d0       	rcall	.+0      	; 0x2718 <DIO_u8GetPinValue+0x8>
    2718:	0f 92       	push	r0
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	8a 83       	std	Y+2, r24	; 0x02
    2720:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_result;
	if(Copy_u8Pin<=MDIO_PIN7)
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	88 30       	cpi	r24, 0x08	; 8
    2726:	08 f0       	brcs	.+2      	; 0x272a <DIO_u8GetPinValue+0x1a>
    2728:	67 c0       	rjmp	.+206    	; 0x27f8 <DIO_u8GetPinValue+0xe8>
	{
		switch(Copy_u8Port)
    272a:	8a 81       	ldd	r24, Y+2	; 0x02
    272c:	28 2f       	mov	r18, r24
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	3d 83       	std	Y+5, r19	; 0x05
    2732:	2c 83       	std	Y+4, r18	; 0x04
    2734:	4c 81       	ldd	r20, Y+4	; 0x04
    2736:	5d 81       	ldd	r21, Y+5	; 0x05
    2738:	42 30       	cpi	r20, 0x02	; 2
    273a:	51 05       	cpc	r21, r1
    273c:	41 f1       	breq	.+80     	; 0x278e <DIO_u8GetPinValue+0x7e>
    273e:	8c 81       	ldd	r24, Y+4	; 0x04
    2740:	9d 81       	ldd	r25, Y+5	; 0x05
    2742:	83 30       	cpi	r24, 0x03	; 3
    2744:	91 05       	cpc	r25, r1
    2746:	34 f4       	brge	.+12     	; 0x2754 <DIO_u8GetPinValue+0x44>
    2748:	2c 81       	ldd	r18, Y+4	; 0x04
    274a:	3d 81       	ldd	r19, Y+5	; 0x05
    274c:	21 30       	cpi	r18, 0x01	; 1
    274e:	31 05       	cpc	r19, r1
    2750:	61 f0       	breq	.+24     	; 0x276a <DIO_u8GetPinValue+0x5a>
    2752:	52 c0       	rjmp	.+164    	; 0x27f8 <DIO_u8GetPinValue+0xe8>
    2754:	4c 81       	ldd	r20, Y+4	; 0x04
    2756:	5d 81       	ldd	r21, Y+5	; 0x05
    2758:	43 30       	cpi	r20, 0x03	; 3
    275a:	51 05       	cpc	r21, r1
    275c:	51 f1       	breq	.+84     	; 0x27b2 <DIO_u8GetPinValue+0xa2>
    275e:	8c 81       	ldd	r24, Y+4	; 0x04
    2760:	9d 81       	ldd	r25, Y+5	; 0x05
    2762:	84 30       	cpi	r24, 0x04	; 4
    2764:	91 05       	cpc	r25, r1
    2766:	b9 f1       	breq	.+110    	; 0x27d6 <DIO_u8GetPinValue+0xc6>
    2768:	47 c0       	rjmp	.+142    	; 0x27f8 <DIO_u8GetPinValue+0xe8>
		{
		case MDIO_PORTA:Local_result=GET_BIT(GPIOA -> PIN,Copy_u8Pin);break;
    276a:	e9 e3       	ldi	r30, 0x39	; 57
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	28 2f       	mov	r18, r24
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	8b 81       	ldd	r24, Y+3	; 0x03
    2776:	88 2f       	mov	r24, r24
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	a9 01       	movw	r20, r18
    277c:	02 c0       	rjmp	.+4      	; 0x2782 <DIO_u8GetPinValue+0x72>
    277e:	55 95       	asr	r21
    2780:	47 95       	ror	r20
    2782:	8a 95       	dec	r24
    2784:	e2 f7       	brpl	.-8      	; 0x277e <DIO_u8GetPinValue+0x6e>
    2786:	ca 01       	movw	r24, r20
    2788:	81 70       	andi	r24, 0x01	; 1
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	35 c0       	rjmp	.+106    	; 0x27f8 <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTB:Local_result=GET_BIT(GPIOB -> PIN,Copy_u8Pin);break;
    278e:	e6 e3       	ldi	r30, 0x36	; 54
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	8b 81       	ldd	r24, Y+3	; 0x03
    279a:	88 2f       	mov	r24, r24
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	a9 01       	movw	r20, r18
    27a0:	02 c0       	rjmp	.+4      	; 0x27a6 <DIO_u8GetPinValue+0x96>
    27a2:	55 95       	asr	r21
    27a4:	47 95       	ror	r20
    27a6:	8a 95       	dec	r24
    27a8:	e2 f7       	brpl	.-8      	; 0x27a2 <DIO_u8GetPinValue+0x92>
    27aa:	ca 01       	movw	r24, r20
    27ac:	81 70       	andi	r24, 0x01	; 1
    27ae:	89 83       	std	Y+1, r24	; 0x01
    27b0:	23 c0       	rjmp	.+70     	; 0x27f8 <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTC:Local_result=GET_BIT(GPIOC -> PIN,Copy_u8Pin);break;
    27b2:	e3 e3       	ldi	r30, 0x33	; 51
    27b4:	f0 e0       	ldi	r31, 0x00	; 0
    27b6:	80 81       	ld	r24, Z
    27b8:	28 2f       	mov	r18, r24
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	88 2f       	mov	r24, r24
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	a9 01       	movw	r20, r18
    27c4:	02 c0       	rjmp	.+4      	; 0x27ca <DIO_u8GetPinValue+0xba>
    27c6:	55 95       	asr	r21
    27c8:	47 95       	ror	r20
    27ca:	8a 95       	dec	r24
    27cc:	e2 f7       	brpl	.-8      	; 0x27c6 <DIO_u8GetPinValue+0xb6>
    27ce:	ca 01       	movw	r24, r20
    27d0:	81 70       	andi	r24, 0x01	; 1
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	11 c0       	rjmp	.+34     	; 0x27f8 <DIO_u8GetPinValue+0xe8>
		case MDIO_PORTD:Local_result=GET_BIT(GPIOD -> PIN,Copy_u8Pin);break;
    27d6:	e0 e3       	ldi	r30, 0x30	; 48
    27d8:	f0 e0       	ldi	r31, 0x00	; 0
    27da:	80 81       	ld	r24, Z
    27dc:	28 2f       	mov	r18, r24
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	8b 81       	ldd	r24, Y+3	; 0x03
    27e2:	88 2f       	mov	r24, r24
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	a9 01       	movw	r20, r18
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <DIO_u8GetPinValue+0xde>
    27ea:	55 95       	asr	r21
    27ec:	47 95       	ror	r20
    27ee:	8a 95       	dec	r24
    27f0:	e2 f7       	brpl	.-8      	; 0x27ea <DIO_u8GetPinValue+0xda>
    27f2:	ca 01       	movw	r24, r20
    27f4:	81 70       	andi	r24, 0x01	; 1
    27f6:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Local_result;
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    27fa:	0f 90       	pop	r0
    27fc:	0f 90       	pop	r0
    27fe:	0f 90       	pop	r0
    2800:	0f 90       	pop	r0
    2802:	0f 90       	pop	r0
    2804:	cf 91       	pop	r28
    2806:	df 91       	pop	r29
    2808:	08 95       	ret

0000280a <MGIE_voidEnable>:
#include "MGIE_private.h"
#include "MGIE_interface.h"


void MGIE_voidEnable(void)
{
    280a:	df 93       	push	r29
    280c:	cf 93       	push	r28
    280e:	cd b7       	in	r28, 0x3d	; 61
    2810:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    2812:	af e5       	ldi	r26, 0x5F	; 95
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	ef e5       	ldi	r30, 0x5F	; 95
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	80 68       	ori	r24, 0x80	; 128
    281e:	8c 93       	st	X, r24
}
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <MGIE_voidDisable>:
void MGIE_voidDisable(void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,I);
    282e:	af e5       	ldi	r26, 0x5F	; 95
    2830:	b0 e0       	ldi	r27, 0x00	; 0
    2832:	ef e5       	ldi	r30, 0x5F	; 95
    2834:	f0 e0       	ldi	r31, 0x00	; 0
    2836:	80 81       	ld	r24, Z
    2838:	8f 77       	andi	r24, 0x7F	; 127
    283a:	8c 93       	st	X, r24
}
    283c:	cf 91       	pop	r28
    283e:	df 91       	pop	r29
    2840:	08 95       	ret

00002842 <MTIM_stderrInit>:
volatile static u16 MTIM_u16Timer0OVFCount;
volatile static u8 MTIM_u8Timer0Preload;


STD_error_t MTIM_stderrInit(u8 ARG_u8TimerNo,u8 ARG_u8ClockSource,u8 ARG_u8Mode,u8 ARG_u8HWPinMode)
{
    2842:	df 93       	push	r29
    2844:	cf 93       	push	r28
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	2b 97       	sbiw	r28, 0x0b	; 11
    284c:	0f b6       	in	r0, 0x3f	; 63
    284e:	f8 94       	cli
    2850:	de bf       	out	0x3e, r29	; 62
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	cd bf       	out	0x3d, r28	; 61
    2856:	8a 83       	std	Y+2, r24	; 0x02
    2858:	6b 83       	std	Y+3, r22	; 0x03
    285a:	4c 83       	std	Y+4, r20	; 0x04
    285c:	2d 83       	std	Y+5, r18	; 0x05
	STD_error_t L_stderrState=E_OK;
    285e:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8TimerNo<=2)&&(ARG_u8ClockSource<=7)&&(ARG_u8Mode<=15)&&(ARG_u8HWPinMode<=3))
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	83 30       	cpi	r24, 0x03	; 3
    2864:	08 f0       	brcs	.+2      	; 0x2868 <MTIM_stderrInit+0x26>
    2866:	0a c1       	rjmp	.+532    	; 0x2a7c <MTIM_stderrInit+0x23a>
    2868:	8b 81       	ldd	r24, Y+3	; 0x03
    286a:	88 30       	cpi	r24, 0x08	; 8
    286c:	08 f0       	brcs	.+2      	; 0x2870 <MTIM_stderrInit+0x2e>
    286e:	06 c1       	rjmp	.+524    	; 0x2a7c <MTIM_stderrInit+0x23a>
    2870:	8c 81       	ldd	r24, Y+4	; 0x04
    2872:	80 31       	cpi	r24, 0x10	; 16
    2874:	08 f0       	brcs	.+2      	; 0x2878 <MTIM_stderrInit+0x36>
    2876:	02 c1       	rjmp	.+516    	; 0x2a7c <MTIM_stderrInit+0x23a>
    2878:	8d 81       	ldd	r24, Y+5	; 0x05
    287a:	84 30       	cpi	r24, 0x04	; 4
    287c:	08 f0       	brcs	.+2      	; 0x2880 <MTIM_stderrInit+0x3e>
    287e:	fe c0       	rjmp	.+508    	; 0x2a7c <MTIM_stderrInit+0x23a>
	{
		switch(ARG_u8TimerNo)
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	28 2f       	mov	r18, r24
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	3b 87       	std	Y+11, r19	; 0x0b
    2888:	2a 87       	std	Y+10, r18	; 0x0a
    288a:	8a 85       	ldd	r24, Y+10	; 0x0a
    288c:	9b 85       	ldd	r25, Y+11	; 0x0b
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	91 05       	cpc	r25, r1
    2892:	09 f4       	brne	.+2      	; 0x2896 <MTIM_stderrInit+0x54>
    2894:	7e c0       	rjmp	.+252    	; 0x2992 <MTIM_stderrInit+0x150>
    2896:	2a 85       	ldd	r18, Y+10	; 0x0a
    2898:	3b 85       	ldd	r19, Y+11	; 0x0b
    289a:	22 30       	cpi	r18, 0x02	; 2
    289c:	31 05       	cpc	r19, r1
    289e:	09 f4       	brne	.+2      	; 0x28a2 <MTIM_stderrInit+0x60>
    28a0:	ef c0       	rjmp	.+478    	; 0x2a80 <MTIM_stderrInit+0x23e>
    28a2:	8a 85       	ldd	r24, Y+10	; 0x0a
    28a4:	9b 85       	ldd	r25, Y+11	; 0x0b
    28a6:	00 97       	sbiw	r24, 0x00	; 0
    28a8:	09 f0       	breq	.+2      	; 0x28ac <MTIM_stderrInit+0x6a>
    28aa:	e5 c0       	rjmp	.+458    	; 0x2a76 <MTIM_stderrInit+0x234>
		{
		case MTIM_TIMER0:
		{
			switch(ARG_u8Mode)
    28ac:	8c 81       	ldd	r24, Y+4	; 0x04
    28ae:	28 2f       	mov	r18, r24
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	39 87       	std	Y+9, r19	; 0x09
    28b4:	28 87       	std	Y+8, r18	; 0x08
    28b6:	88 85       	ldd	r24, Y+8	; 0x08
    28b8:	99 85       	ldd	r25, Y+9	; 0x09
    28ba:	81 30       	cpi	r24, 0x01	; 1
    28bc:	91 05       	cpc	r25, r1
    28be:	21 f1       	breq	.+72     	; 0x2908 <MTIM_stderrInit+0xc6>
    28c0:	28 85       	ldd	r18, Y+8	; 0x08
    28c2:	39 85       	ldd	r19, Y+9	; 0x09
    28c4:	22 30       	cpi	r18, 0x02	; 2
    28c6:	31 05       	cpc	r19, r1
    28c8:	2c f4       	brge	.+10     	; 0x28d4 <MTIM_stderrInit+0x92>
    28ca:	88 85       	ldd	r24, Y+8	; 0x08
    28cc:	99 85       	ldd	r25, Y+9	; 0x09
    28ce:	00 97       	sbiw	r24, 0x00	; 0
    28d0:	61 f0       	breq	.+24     	; 0x28ea <MTIM_stderrInit+0xa8>
    28d2:	47 c0       	rjmp	.+142    	; 0x2962 <MTIM_stderrInit+0x120>
    28d4:	28 85       	ldd	r18, Y+8	; 0x08
    28d6:	39 85       	ldd	r19, Y+9	; 0x09
    28d8:	22 30       	cpi	r18, 0x02	; 2
    28da:	31 05       	cpc	r19, r1
    28dc:	21 f1       	breq	.+72     	; 0x2926 <MTIM_stderrInit+0xe4>
    28de:	88 85       	ldd	r24, Y+8	; 0x08
    28e0:	99 85       	ldd	r25, Y+9	; 0x09
    28e2:	83 30       	cpi	r24, 0x03	; 3
    28e4:	91 05       	cpc	r25, r1
    28e6:	71 f1       	breq	.+92     	; 0x2944 <MTIM_stderrInit+0x102>
    28e8:	3c c0       	rjmp	.+120    	; 0x2962 <MTIM_stderrInit+0x120>
			{
			case MTIM_MODE_NORMAL:
			{
				CLEAR_BIT(TCCR0,WGM00);
    28ea:	a3 e5       	ldi	r26, 0x53	; 83
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e3 e5       	ldi	r30, 0x53	; 83
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	8f 7b       	andi	r24, 0xBF	; 191
    28f6:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    28f8:	a3 e5       	ldi	r26, 0x53	; 83
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	e3 e5       	ldi	r30, 0x53	; 83
    28fe:	f0 e0       	ldi	r31, 0x00	; 0
    2900:	80 81       	ld	r24, Z
    2902:	87 7f       	andi	r24, 0xF7	; 247
    2904:	8c 93       	st	X, r24
    2906:	2f c0       	rjmp	.+94     	; 0x2966 <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_CTC:
			{
				CLEAR_BIT(TCCR0,WGM00);
    2908:	a3 e5       	ldi	r26, 0x53	; 83
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	e3 e5       	ldi	r30, 0x53	; 83
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8f 7b       	andi	r24, 0xBF	; 191
    2914:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    2916:	a3 e5       	ldi	r26, 0x53	; 83
    2918:	b0 e0       	ldi	r27, 0x00	; 0
    291a:	e3 e5       	ldi	r30, 0x53	; 83
    291c:	f0 e0       	ldi	r31, 0x00	; 0
    291e:	80 81       	ld	r24, Z
    2920:	88 60       	ori	r24, 0x08	; 8
    2922:	8c 93       	st	X, r24
    2924:	20 c0       	rjmp	.+64     	; 0x2966 <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_FASTPWM:
			{
				SET_BIT(TCCR0,WGM00);
    2926:	a3 e5       	ldi	r26, 0x53	; 83
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	e3 e5       	ldi	r30, 0x53	; 83
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	80 64       	ori	r24, 0x40	; 64
    2932:	8c 93       	st	X, r24
				SET_BIT(TCCR0,WGM01);
    2934:	a3 e5       	ldi	r26, 0x53	; 83
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	e3 e5       	ldi	r30, 0x53	; 83
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	88 60       	ori	r24, 0x08	; 8
    2940:	8c 93       	st	X, r24
    2942:	11 c0       	rjmp	.+34     	; 0x2966 <MTIM_stderrInit+0x124>
				break;
			}
			case MTIM_MODE_PHASECORRECTPWM:
			{
				SET_BIT(TCCR0,WGM00);
    2944:	a3 e5       	ldi	r26, 0x53	; 83
    2946:	b0 e0       	ldi	r27, 0x00	; 0
    2948:	e3 e5       	ldi	r30, 0x53	; 83
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	80 64       	ori	r24, 0x40	; 64
    2950:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR0,WGM01);
    2952:	a3 e5       	ldi	r26, 0x53	; 83
    2954:	b0 e0       	ldi	r27, 0x00	; 0
    2956:	e3 e5       	ldi	r30, 0x53	; 83
    2958:	f0 e0       	ldi	r31, 0x00	; 0
    295a:	80 81       	ld	r24, Z
    295c:	87 7f       	andi	r24, 0xF7	; 247
    295e:	8c 93       	st	X, r24
    2960:	02 c0       	rjmp	.+4      	; 0x2966 <MTIM_stderrInit+0x124>
				break;
			}
			default:L_stderrState=E_NOK;break;
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	89 83       	std	Y+1, r24	; 0x01
			}
			TCCR0=((TCCR0&0xCF)|(ARG_u8HWPinMode<<4));
    2966:	a3 e5       	ldi	r26, 0x53	; 83
    2968:	b0 e0       	ldi	r27, 0x00	; 0
    296a:	e3 e5       	ldi	r30, 0x53	; 83
    296c:	f0 e0       	ldi	r31, 0x00	; 0
    296e:	80 81       	ld	r24, Z
    2970:	28 2f       	mov	r18, r24
    2972:	2f 7c       	andi	r18, 0xCF	; 207
    2974:	8d 81       	ldd	r24, Y+5	; 0x05
    2976:	88 2f       	mov	r24, r24
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	82 95       	swap	r24
    297c:	92 95       	swap	r25
    297e:	90 7f       	andi	r25, 0xF0	; 240
    2980:	98 27       	eor	r25, r24
    2982:	80 7f       	andi	r24, 0xF0	; 240
    2984:	98 27       	eor	r25, r24
    2986:	82 2b       	or	r24, r18
    2988:	8c 93       	st	X, r24
			MTIM_u8Timer0Clock=ARG_u8ClockSource;
    298a:	8b 81       	ldd	r24, Y+3	; 0x03
    298c:	80 93 b8 02 	sts	0x02B8, r24
    2990:	77 c0       	rjmp	.+238    	; 0x2a80 <MTIM_stderrInit+0x23e>
			break;
		}
		case MTIM_TIMER1:
		{
			switch(ARG_u8Mode)
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	28 2f       	mov	r18, r24
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	3f 83       	std	Y+7, r19	; 0x07
    299a:	2e 83       	std	Y+6, r18	; 0x06
    299c:	8e 81       	ldd	r24, Y+6	; 0x06
    299e:	9f 81       	ldd	r25, Y+7	; 0x07
    29a0:	00 97       	sbiw	r24, 0x00	; 0
    29a2:	31 f0       	breq	.+12     	; 0x29b0 <MTIM_stderrInit+0x16e>
    29a4:	2e 81       	ldd	r18, Y+6	; 0x06
    29a6:	3f 81       	ldd	r19, Y+7	; 0x07
    29a8:	2e 30       	cpi	r18, 0x0E	; 14
    29aa:	31 05       	cpc	r19, r1
    29ac:	f1 f0       	breq	.+60     	; 0x29ea <MTIM_stderrInit+0x1a8>
    29ae:	3a c0       	rjmp	.+116    	; 0x2a24 <MTIM_stderrInit+0x1e2>
			{
			case MTIM_MODE_NORMAL:
			{
				CLEAR_BIT(TCCR1A,WGM10);
    29b0:	af e4       	ldi	r26, 0x4F	; 79
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	ef e4       	ldi	r30, 0x4F	; 79
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	8e 7f       	andi	r24, 0xFE	; 254
    29bc:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,WGM11);
    29be:	af e4       	ldi	r26, 0x4F	; 79
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	ef e4       	ldi	r30, 0x4F	; 79
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	8d 7f       	andi	r24, 0xFD	; 253
    29ca:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM12);
    29cc:	ae e4       	ldi	r26, 0x4E	; 78
    29ce:	b0 e0       	ldi	r27, 0x00	; 0
    29d0:	ee e4       	ldi	r30, 0x4E	; 78
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	87 7f       	andi	r24, 0xF7	; 247
    29d8:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1B,WGM13);
    29da:	ae e4       	ldi	r26, 0x4E	; 78
    29dc:	b0 e0       	ldi	r27, 0x00	; 0
    29de:	ee e4       	ldi	r30, 0x4E	; 78
    29e0:	f0 e0       	ldi	r31, 0x00	; 0
    29e2:	80 81       	ld	r24, Z
    29e4:	8f 7e       	andi	r24, 0xEF	; 239
    29e6:	8c 93       	st	X, r24
    29e8:	1f c0       	rjmp	.+62     	; 0x2a28 <MTIM_stderrInit+0x1e6>
				break;
			}
			case MTIM_MODE_FASTPWMCTRLTOP:
			{
				CLEAR_BIT(TCCR1A,WGM10);
    29ea:	af e4       	ldi	r26, 0x4F	; 79
    29ec:	b0 e0       	ldi	r27, 0x00	; 0
    29ee:	ef e4       	ldi	r30, 0x4F	; 79
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	80 81       	ld	r24, Z
    29f4:	8e 7f       	andi	r24, 0xFE	; 254
    29f6:	8c 93       	st	X, r24
				SET_BIT(TCCR1A,WGM11);
    29f8:	af e4       	ldi	r26, 0x4F	; 79
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	ef e4       	ldi	r30, 0x4F	; 79
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	82 60       	ori	r24, 0x02	; 2
    2a04:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM12);
    2a06:	ae e4       	ldi	r26, 0x4E	; 78
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ee e4       	ldi	r30, 0x4E	; 78
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	80 81       	ld	r24, Z
    2a10:	88 60       	ori	r24, 0x08	; 8
    2a12:	8c 93       	st	X, r24
				SET_BIT(TCCR1B,WGM13);
    2a14:	ae e4       	ldi	r26, 0x4E	; 78
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	ee e4       	ldi	r30, 0x4E	; 78
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	80 61       	ori	r24, 0x10	; 16
    2a20:	8c 93       	st	X, r24
    2a22:	02 c0       	rjmp	.+4      	; 0x2a28 <MTIM_stderrInit+0x1e6>
				break;
			}
			default:L_stderrState=E_NOK;break;
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	89 83       	std	Y+1, r24	; 0x01
			}
			if(ARG_u8HWPinMode==MTIM_HWPIN_DISCONNECTED)
    2a28:	8d 81       	ldd	r24, Y+5	; 0x05
    2a2a:	88 23       	and	r24, r24
    2a2c:	79 f4       	brne	.+30     	; 0x2a4c <MTIM_stderrInit+0x20a>
			{
				CLEAR_BIT(TCCR1A,COM1A1);
    2a2e:	af e4       	ldi	r26, 0x4F	; 79
    2a30:	b0 e0       	ldi	r27, 0x00	; 0
    2a32:	ef e4       	ldi	r30, 0x4F	; 79
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	80 81       	ld	r24, Z
    2a38:	8f 77       	andi	r24, 0x7F	; 127
    2a3a:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    2a3c:	af e4       	ldi	r26, 0x4F	; 79
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	ef e4       	ldi	r30, 0x4F	; 79
    2a42:	f0 e0       	ldi	r31, 0x00	; 0
    2a44:	80 81       	ld	r24, Z
    2a46:	8f 7b       	andi	r24, 0xBF	; 191
    2a48:	8c 93       	st	X, r24
    2a4a:	11 c0       	rjmp	.+34     	; 0x2a6e <MTIM_stderrInit+0x22c>
			}
			else if(ARG_u8HWPinMode==MTIM_HWPIN_NONINVERTING_PWM)
    2a4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a4e:	82 30       	cpi	r24, 0x02	; 2
    2a50:	71 f4       	brne	.+28     	; 0x2a6e <MTIM_stderrInit+0x22c>
			{
				SET_BIT(TCCR1A,COM1A1);
    2a52:	af e4       	ldi	r26, 0x4F	; 79
    2a54:	b0 e0       	ldi	r27, 0x00	; 0
    2a56:	ef e4       	ldi	r30, 0x4F	; 79
    2a58:	f0 e0       	ldi	r31, 0x00	; 0
    2a5a:	80 81       	ld	r24, Z
    2a5c:	80 68       	ori	r24, 0x80	; 128
    2a5e:	8c 93       	st	X, r24
				CLEAR_BIT(TCCR1A,COM1A0);
    2a60:	af e4       	ldi	r26, 0x4F	; 79
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	ef e4       	ldi	r30, 0x4F	; 79
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	8f 7b       	andi	r24, 0xBF	; 191
    2a6c:	8c 93       	st	X, r24
			}
			else
			{
				// add next options in the data sheet
			}
			MTIM_u8Timer1Clock=ARG_u8ClockSource;
    2a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a70:	80 93 b7 02 	sts	0x02B7, r24
    2a74:	05 c0       	rjmp	.+10     	; 0x2a80 <MTIM_stderrInit+0x23e>
		}
		case MTIM_TIMER2:
		{
			break;
		}
		default:L_stderrState=E_NOK;break;
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	89 83       	std	Y+1, r24	; 0x01
    2a7a:	02 c0       	rjmp	.+4      	; 0x2a80 <MTIM_stderrInit+0x23e>
		}
	}
	else
	{
		L_stderrState=E_NOK;
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a82:	2b 96       	adiw	r28, 0x0b	; 11
    2a84:	0f b6       	in	r0, 0x3f	; 63
    2a86:	f8 94       	cli
    2a88:	de bf       	out	0x3e, r29	; 62
    2a8a:	0f be       	out	0x3f, r0	; 63
    2a8c:	cd bf       	out	0x3d, r28	; 61
    2a8e:	cf 91       	pop	r28
    2a90:	df 91       	pop	r29
    2a92:	08 95       	ret

00002a94 <MTIM_voidForceOutputCompare>:
void MTIM_voidForceOutputCompare(void)
{
    2a94:	df 93       	push	r29
    2a96:	cf 93       	push	r28
    2a98:	cd b7       	in	r28, 0x3d	; 61
    2a9a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TCCR0,FOC0);
    2a9c:	a3 e5       	ldi	r26, 0x53	; 83
    2a9e:	b0 e0       	ldi	r27, 0x00	; 0
    2aa0:	e3 e5       	ldi	r30, 0x53	; 83
    2aa2:	f0 e0       	ldi	r31, 0x00	; 0
    2aa4:	80 81       	ld	r24, Z
    2aa6:	80 68       	ori	r24, 0x80	; 128
    2aa8:	8c 93       	st	X, r24
}
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <MTIM_stderrEnableInterrupt>:
STD_error_t MTIM_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	00 d0       	rcall	.+0      	; 0x2ab6 <MTIM_stderrEnableInterrupt+0x6>
    2ab6:	cd b7       	in	r28, 0x3d	; 61
    2ab8:	de b7       	in	r29, 0x3e	; 62
    2aba:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2abc:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	88 30       	cpi	r24, 0x08	; 8
    2ac2:	a0 f4       	brcc	.+40     	; 0x2aec <MTIM_stderrEnableInterrupt+0x3c>
	{
		SET_BIT(TIMSK,ARG_u8InterruptSource);
    2ac4:	a9 e5       	ldi	r26, 0x59	; 89
    2ac6:	b0 e0       	ldi	r27, 0x00	; 0
    2ac8:	e9 e5       	ldi	r30, 0x59	; 89
    2aca:	f0 e0       	ldi	r31, 0x00	; 0
    2acc:	80 81       	ld	r24, Z
    2ace:	48 2f       	mov	r20, r24
    2ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad2:	28 2f       	mov	r18, r24
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	02 2e       	mov	r0, r18
    2adc:	02 c0       	rjmp	.+4      	; 0x2ae2 <MTIM_stderrEnableInterrupt+0x32>
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	0a 94       	dec	r0
    2ae4:	e2 f7       	brpl	.-8      	; 0x2ade <MTIM_stderrEnableInterrupt+0x2e>
    2ae6:	84 2b       	or	r24, r20
    2ae8:	8c 93       	st	X, r24
    2aea:	02 c0       	rjmp	.+4      	; 0x2af0 <MTIM_stderrEnableInterrupt+0x40>
	}
	else
	{
		L_stderrState=E_NOK;
    2aec:	81 e0       	ldi	r24, 0x01	; 1
    2aee:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
}
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	cf 91       	pop	r28
    2af8:	df 91       	pop	r29
    2afa:	08 95       	ret

00002afc <MTIM_stderrDisableInterrupt>:
STD_error_t MTIM_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    2afc:	df 93       	push	r29
    2afe:	cf 93       	push	r28
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <MTIM_stderrDisableInterrupt+0x6>
    2b02:	cd b7       	in	r28, 0x3d	; 61
    2b04:	de b7       	in	r29, 0x3e	; 62
    2b06:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2b08:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_u8InterruptSource<=7)
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	88 30       	cpi	r24, 0x08	; 8
    2b0e:	a8 f4       	brcc	.+42     	; 0x2b3a <MTIM_stderrDisableInterrupt+0x3e>
	{
		CLEAR_BIT(TIMSK,ARG_u8InterruptSource);
    2b10:	a9 e5       	ldi	r26, 0x59	; 89
    2b12:	b0 e0       	ldi	r27, 0x00	; 0
    2b14:	e9 e5       	ldi	r30, 0x59	; 89
    2b16:	f0 e0       	ldi	r31, 0x00	; 0
    2b18:	80 81       	ld	r24, Z
    2b1a:	48 2f       	mov	r20, r24
    2b1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	81 e0       	ldi	r24, 0x01	; 1
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	02 2e       	mov	r0, r18
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <MTIM_stderrDisableInterrupt+0x32>
    2b2a:	88 0f       	add	r24, r24
    2b2c:	99 1f       	adc	r25, r25
    2b2e:	0a 94       	dec	r0
    2b30:	e2 f7       	brpl	.-8      	; 0x2b2a <MTIM_stderrDisableInterrupt+0x2e>
    2b32:	80 95       	com	r24
    2b34:	84 23       	and	r24, r20
    2b36:	8c 93       	st	X, r24
    2b38:	02 c0       	rjmp	.+4      	; 0x2b3e <MTIM_stderrDisableInterrupt+0x42>
	}
	else
	{
		L_stderrState=E_NOK;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2b3e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2b40:	0f 90       	pop	r0
    2b42:	0f 90       	pop	r0
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <MTIM_stderrSetCallBack>:
STD_error_t MTIM_stderrSetCallBack(u8 ARG_u8InterruptSource,void (*ARG_pvoidfUserFunction)(void))
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <MTIM_stderrSetCallBack+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <MTIM_stderrSetCallBack+0x8>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <MTIM_stderrSetCallBack+0xa>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	8a 83       	std	Y+2, r24	; 0x02
    2b5a:	7c 83       	std	Y+4, r23	; 0x04
    2b5c:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    2b5e:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL)
    2b60:	8b 81       	ldd	r24, Y+3	; 0x03
    2b62:	9c 81       	ldd	r25, Y+4	; 0x04
    2b64:	00 97       	sbiw	r24, 0x00	; 0
    2b66:	59 f1       	breq	.+86     	; 0x2bbe <MTIM_stderrSetCallBack+0x74>
	{
		switch(ARG_u8InterruptSource)
    2b68:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6a:	28 2f       	mov	r18, r24
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	3e 83       	std	Y+6, r19	; 0x06
    2b70:	2d 83       	std	Y+5, r18	; 0x05
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	81 30       	cpi	r24, 0x01	; 1
    2b78:	91 05       	cpc	r25, r1
    2b7a:	81 f0       	breq	.+32     	; 0x2b9c <MTIM_stderrSetCallBack+0x52>
    2b7c:	2d 81       	ldd	r18, Y+5	; 0x05
    2b7e:	3e 81       	ldd	r19, Y+6	; 0x06
    2b80:	25 30       	cpi	r18, 0x05	; 5
    2b82:	31 05       	cpc	r19, r1
    2b84:	91 f0       	breq	.+36     	; 0x2baa <MTIM_stderrSetCallBack+0x60>
    2b86:	8d 81       	ldd	r24, Y+5	; 0x05
    2b88:	9e 81       	ldd	r25, Y+6	; 0x06
    2b8a:	00 97       	sbiw	r24, 0x00	; 0
    2b8c:	a9 f4       	brne	.+42     	; 0x2bb8 <MTIM_stderrSetCallBack+0x6e>
		{
		case MTIM_INTERRUPT_T0_OVF:MTIMER0_pvoidfUserFunctionT0OVF=ARG_pvoidfUserFunction;break;
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	90 93 a5 02 	sts	0x02A5, r25
    2b96:	80 93 a4 02 	sts	0x02A4, r24
    2b9a:	13 c0       	rjmp	.+38     	; 0x2bc2 <MTIM_stderrSetCallBack+0x78>
		case MTIM_INTERRUPT_T0_OCM:MTIMER0_pvoidfUserFunctionT0OCM=ARG_pvoidfUserFunction;break;
    2b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2ba0:	90 93 a7 02 	sts	0x02A7, r25
    2ba4:	80 93 a6 02 	sts	0x02A6, r24
    2ba8:	0c c0       	rjmp	.+24     	; 0x2bc2 <MTIM_stderrSetCallBack+0x78>
		case MTIM_INTERRUPT_T1_ICU:MTIMER1_pvoidfUserFunctionT1ICU=ARG_pvoidfUserFunction;break;
    2baa:	8b 81       	ldd	r24, Y+3	; 0x03
    2bac:	9c 81       	ldd	r25, Y+4	; 0x04
    2bae:	90 93 a9 02 	sts	0x02A9, r25
    2bb2:	80 93 a8 02 	sts	0x02A8, r24
    2bb6:	05 c0       	rjmp	.+10     	; 0x2bc2 <MTIM_stderrSetCallBack+0x78>
		default:L_stderrState=E_NOK;break;
    2bb8:	81 e0       	ldi	r24, 0x01	; 1
    2bba:	89 83       	std	Y+1, r24	; 0x01
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <MTIM_stderrSetCallBack+0x78>
		}
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    2bbe:	82 e0       	ldi	r24, 0x02	; 2
    2bc0:	89 83       	std	Y+1, r24	; 0x01
	}	
	return L_stderrState;	
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2bc4:	26 96       	adiw	r28, 0x06	; 6
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	cf 91       	pop	r28
    2bd2:	df 91       	pop	r29
    2bd4:	08 95       	ret

00002bd6 <MTIM_stderrStartTimer>:
STD_error_t MTIM_stderrStartTimer(u8 ARG_u8TimerNo)
{
    2bd6:	df 93       	push	r29
    2bd8:	cf 93       	push	r28
    2bda:	00 d0       	rcall	.+0      	; 0x2bdc <MTIM_stderrStartTimer+0x6>
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <MTIM_stderrStartTimer+0x8>
    2bde:	cd b7       	in	r28, 0x3d	; 61
    2be0:	de b7       	in	r29, 0x3e	; 62
    2be2:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2be4:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    2be6:	8a 81       	ldd	r24, Y+2	; 0x02
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3c 83       	std	Y+4, r19	; 0x04
    2bee:	2b 83       	std	Y+3, r18	; 0x03
    2bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2bf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2bf4:	81 30       	cpi	r24, 0x01	; 1
    2bf6:	91 05       	cpc	r25, r1
    2bf8:	a9 f0       	breq	.+42     	; 0x2c24 <MTIM_stderrStartTimer+0x4e>
    2bfa:	2b 81       	ldd	r18, Y+3	; 0x03
    2bfc:	3c 81       	ldd	r19, Y+4	; 0x04
    2bfe:	22 30       	cpi	r18, 0x02	; 2
    2c00:	31 05       	cpc	r19, r1
    2c02:	f1 f0       	breq	.+60     	; 0x2c40 <MTIM_stderrStartTimer+0x6a>
    2c04:	8b 81       	ldd	r24, Y+3	; 0x03
    2c06:	9c 81       	ldd	r25, Y+4	; 0x04
    2c08:	00 97       	sbiw	r24, 0x00	; 0
    2c0a:	c1 f4       	brne	.+48     	; 0x2c3c <MTIM_stderrStartTimer+0x66>
	{
	case MTIM_TIMER0:
	{
		TCCR0=((TCCR0&0xF8)|MTIM_u8Timer0Clock);
    2c0c:	a3 e5       	ldi	r26, 0x53	; 83
    2c0e:	b0 e0       	ldi	r27, 0x00	; 0
    2c10:	e3 e5       	ldi	r30, 0x53	; 83
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	80 81       	ld	r24, Z
    2c16:	98 2f       	mov	r25, r24
    2c18:	98 7f       	andi	r25, 0xF8	; 248
    2c1a:	80 91 b8 02 	lds	r24, 0x02B8
    2c1e:	89 2b       	or	r24, r25
    2c20:	8c 93       	st	X, r24
    2c22:	0e c0       	rjmp	.+28     	; 0x2c40 <MTIM_stderrStartTimer+0x6a>
		break;
	}
	case  MTIM_TIMER1:
	{

		TCCR1B=((TCCR1B&0xF8)|MTIM_u8Timer1Clock);
    2c24:	ae e4       	ldi	r26, 0x4E	; 78
    2c26:	b0 e0       	ldi	r27, 0x00	; 0
    2c28:	ee e4       	ldi	r30, 0x4E	; 78
    2c2a:	f0 e0       	ldi	r31, 0x00	; 0
    2c2c:	80 81       	ld	r24, Z
    2c2e:	98 2f       	mov	r25, r24
    2c30:	98 7f       	andi	r25, 0xF8	; 248
    2c32:	80 91 b7 02 	lds	r24, 0x02B7
    2c36:	89 2b       	or	r24, r25
    2c38:	8c 93       	st	X, r24
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <MTIM_stderrStartTimer+0x6a>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c42:	0f 90       	pop	r0
    2c44:	0f 90       	pop	r0
    2c46:	0f 90       	pop	r0
    2c48:	0f 90       	pop	r0
    2c4a:	cf 91       	pop	r28
    2c4c:	df 91       	pop	r29
    2c4e:	08 95       	ret

00002c50 <MTIM_stderrStopTimer>:
STD_error_t MTIM_stderrStopTimer(u8 ARG_u8TimerNo)
{
    2c50:	df 93       	push	r29
    2c52:	cf 93       	push	r28
    2c54:	00 d0       	rcall	.+0      	; 0x2c56 <MTIM_stderrStopTimer+0x6>
    2c56:	00 d0       	rcall	.+0      	; 0x2c58 <MTIM_stderrStopTimer+0x8>
    2c58:	cd b7       	in	r28, 0x3d	; 61
    2c5a:	de b7       	in	r29, 0x3e	; 62
    2c5c:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    2c5e:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    2c60:	8a 81       	ldd	r24, Y+2	; 0x02
    2c62:	28 2f       	mov	r18, r24
    2c64:	30 e0       	ldi	r19, 0x00	; 0
    2c66:	3c 83       	std	Y+4, r19	; 0x04
    2c68:	2b 83       	std	Y+3, r18	; 0x03
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c6e:	81 30       	cpi	r24, 0x01	; 1
    2c70:	91 05       	cpc	r25, r1
    2c72:	89 f0       	breq	.+34     	; 0x2c96 <MTIM_stderrStopTimer+0x46>
    2c74:	2b 81       	ldd	r18, Y+3	; 0x03
    2c76:	3c 81       	ldd	r19, Y+4	; 0x04
    2c78:	22 30       	cpi	r18, 0x02	; 2
    2c7a:	31 05       	cpc	r19, r1
    2c7c:	b1 f0       	breq	.+44     	; 0x2caa <MTIM_stderrStopTimer+0x5a>
    2c7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c80:	9c 81       	ldd	r25, Y+4	; 0x04
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	81 f4       	brne	.+32     	; 0x2ca6 <MTIM_stderrStopTimer+0x56>
	{
	case MTIM_TIMER0:
	{
		TCCR0=((TCCR0&0xF8)|MTIM_CS_NO_CLOCK);
    2c86:	a3 e5       	ldi	r26, 0x53	; 83
    2c88:	b0 e0       	ldi	r27, 0x00	; 0
    2c8a:	e3 e5       	ldi	r30, 0x53	; 83
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	80 81       	ld	r24, Z
    2c90:	88 7f       	andi	r24, 0xF8	; 248
    2c92:	8c 93       	st	X, r24
    2c94:	0a c0       	rjmp	.+20     	; 0x2caa <MTIM_stderrStopTimer+0x5a>
		break;
	}
	case  MTIM_TIMER1:
	{
		TCCR1B=((TCCR1B&0xF8)|MTIM_CS_NO_CLOCK);
    2c96:	ae e4       	ldi	r26, 0x4E	; 78
    2c98:	b0 e0       	ldi	r27, 0x00	; 0
    2c9a:	ee e4       	ldi	r30, 0x4E	; 78
    2c9c:	f0 e0       	ldi	r31, 0x00	; 0
    2c9e:	80 81       	ld	r24, Z
    2ca0:	88 7f       	andi	r24, 0xF8	; 248
    2ca2:	8c 93       	st	X, r24
    2ca4:	02 c0       	rjmp	.+4      	; 0x2caa <MTIM_stderrStopTimer+0x5a>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2ca6:	81 e0       	ldi	r24, 0x01	; 1
    2ca8:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2caa:	89 81       	ldd	r24, Y+1	; 0x01
}
    2cac:	0f 90       	pop	r0
    2cae:	0f 90       	pop	r0
    2cb0:	0f 90       	pop	r0
    2cb2:	0f 90       	pop	r0
    2cb4:	cf 91       	pop	r28
    2cb6:	df 91       	pop	r29
    2cb8:	08 95       	ret

00002cba <MTIM_stderrSetOCR>:
STD_error_t	MTIM_stderrSetOCR(u8 ARG_u8TimerNo,u16 ARG_u16OCRValue)
{
    2cba:	df 93       	push	r29
    2cbc:	cf 93       	push	r28
    2cbe:	00 d0       	rcall	.+0      	; 0x2cc0 <MTIM_stderrSetOCR+0x6>
    2cc0:	00 d0       	rcall	.+0      	; 0x2cc2 <MTIM_stderrSetOCR+0x8>
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <MTIM_stderrSetOCR+0xa>
    2cc4:	cd b7       	in	r28, 0x3d	; 61
    2cc6:	de b7       	in	r29, 0x3e	; 62
    2cc8:	8a 83       	std	Y+2, r24	; 0x02
    2cca:	7c 83       	std	Y+4, r23	; 0x04
    2ccc:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    2cce:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	28 2f       	mov	r18, r24
    2cd4:	30 e0       	ldi	r19, 0x00	; 0
    2cd6:	3e 83       	std	Y+6, r19	; 0x06
    2cd8:	2d 83       	std	Y+5, r18	; 0x05
    2cda:	8d 81       	ldd	r24, Y+5	; 0x05
    2cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	71 f0       	breq	.+28     	; 0x2d00 <MTIM_stderrSetOCR+0x46>
    2ce4:	2d 81       	ldd	r18, Y+5	; 0x05
    2ce6:	3e 81       	ldd	r19, Y+6	; 0x06
    2ce8:	22 30       	cpi	r18, 0x02	; 2
    2cea:	31 05       	cpc	r19, r1
    2cec:	91 f0       	breq	.+36     	; 0x2d12 <MTIM_stderrSetOCR+0x58>
    2cee:	8d 81       	ldd	r24, Y+5	; 0x05
    2cf0:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf2:	00 97       	sbiw	r24, 0x00	; 0
    2cf4:	61 f4       	brne	.+24     	; 0x2d0e <MTIM_stderrSetOCR+0x54>
	{
	case MTIM_TIMER0:
	{
		OCR0=ARG_u16OCRValue;
    2cf6:	ec e5       	ldi	r30, 0x5C	; 92
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2cfc:	80 83       	st	Z, r24
    2cfe:	09 c0       	rjmp	.+18     	; 0x2d12 <MTIM_stderrSetOCR+0x58>
		break;
	}
	case  MTIM_TIMER1:
	{
		OCR1A=ARG_u16OCRValue;
    2d00:	ea e4       	ldi	r30, 0x4A	; 74
    2d02:	f0 e0       	ldi	r31, 0x00	; 0
    2d04:	8b 81       	ldd	r24, Y+3	; 0x03
    2d06:	9c 81       	ldd	r25, Y+4	; 0x04
    2d08:	91 83       	std	Z+1, r25	; 0x01
    2d0a:	80 83       	st	Z, r24
    2d0c:	02 c0       	rjmp	.+4      	; 0x2d12 <MTIM_stderrSetOCR+0x58>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2d12:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d14:	26 96       	adiw	r28, 0x06	; 6
    2d16:	0f b6       	in	r0, 0x3f	; 63
    2d18:	f8 94       	cli
    2d1a:	de bf       	out	0x3e, r29	; 62
    2d1c:	0f be       	out	0x3f, r0	; 63
    2d1e:	cd bf       	out	0x3d, r28	; 61
    2d20:	cf 91       	pop	r28
    2d22:	df 91       	pop	r29
    2d24:	08 95       	ret

00002d26 <MTIM_stderrSetTimerValue>:

STD_error_t	MTIM_stderrSetTimerValue(u8 ARG_u8TimerNo,u16 ARG_u16TimerValue)
{
    2d26:	df 93       	push	r29
    2d28:	cf 93       	push	r28
    2d2a:	00 d0       	rcall	.+0      	; 0x2d2c <MTIM_stderrSetTimerValue+0x6>
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <MTIM_stderrSetTimerValue+0x8>
    2d2e:	00 d0       	rcall	.+0      	; 0x2d30 <MTIM_stderrSetTimerValue+0xa>
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	8a 83       	std	Y+2, r24	; 0x02
    2d36:	7c 83       	std	Y+4, r23	; 0x04
    2d38:	6b 83       	std	Y+3, r22	; 0x03
	STD_error_t L_stderrState=E_OK;
    2d3a:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8TimerNo)
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	28 2f       	mov	r18, r24
    2d40:	30 e0       	ldi	r19, 0x00	; 0
    2d42:	3e 83       	std	Y+6, r19	; 0x06
    2d44:	2d 83       	std	Y+5, r18	; 0x05
    2d46:	8d 81       	ldd	r24, Y+5	; 0x05
    2d48:	9e 81       	ldd	r25, Y+6	; 0x06
    2d4a:	81 30       	cpi	r24, 0x01	; 1
    2d4c:	91 05       	cpc	r25, r1
    2d4e:	71 f0       	breq	.+28     	; 0x2d6c <MTIM_stderrSetTimerValue+0x46>
    2d50:	2d 81       	ldd	r18, Y+5	; 0x05
    2d52:	3e 81       	ldd	r19, Y+6	; 0x06
    2d54:	22 30       	cpi	r18, 0x02	; 2
    2d56:	31 05       	cpc	r19, r1
    2d58:	91 f0       	breq	.+36     	; 0x2d7e <MTIM_stderrSetTimerValue+0x58>
    2d5a:	8d 81       	ldd	r24, Y+5	; 0x05
    2d5c:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5e:	00 97       	sbiw	r24, 0x00	; 0
    2d60:	61 f4       	brne	.+24     	; 0x2d7a <MTIM_stderrSetTimerValue+0x54>
	{
	case MTIM_TIMER0:
	{
		TCNT0=ARG_u16TimerValue;
    2d62:	e2 e5       	ldi	r30, 0x52	; 82
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	8b 81       	ldd	r24, Y+3	; 0x03
    2d68:	80 83       	st	Z, r24
    2d6a:	09 c0       	rjmp	.+18     	; 0x2d7e <MTIM_stderrSetTimerValue+0x58>
		break;
	}
	case  MTIM_TIMER1:
	{
		TCNT1=ARG_u16TimerValue;
    2d6c:	ec e4       	ldi	r30, 0x4C	; 76
    2d6e:	f0 e0       	ldi	r31, 0x00	; 0
    2d70:	8b 81       	ldd	r24, Y+3	; 0x03
    2d72:	9c 81       	ldd	r25, Y+4	; 0x04
    2d74:	91 83       	std	Z+1, r25	; 0x01
    2d76:	80 83       	st	Z, r24
    2d78:	02 c0       	rjmp	.+4      	; 0x2d7e <MTIM_stderrSetTimerValue+0x58>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2d7a:	81 e0       	ldi	r24, 0x01	; 1
    2d7c:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    2d7e:	89 81       	ldd	r24, Y+1	; 0x01

}
    2d80:	26 96       	adiw	r28, 0x06	; 6
    2d82:	0f b6       	in	r0, 0x3f	; 63
    2d84:	f8 94       	cli
    2d86:	de bf       	out	0x3e, r29	; 62
    2d88:	0f be       	out	0x3f, r0	; 63
    2d8a:	cd bf       	out	0x3d, r28	; 61
    2d8c:	cf 91       	pop	r28
    2d8e:	df 91       	pop	r29
    2d90:	08 95       	ret

00002d92 <MTIM_stderrTimerDelay>:
STD_error_t MTIM_stderrTimerDelay(u8 ARG_u8TimerNo,u32 ARG_32msDelay)
{
    2d92:	ef 92       	push	r14
    2d94:	ff 92       	push	r15
    2d96:	0f 93       	push	r16
    2d98:	1f 93       	push	r17
    2d9a:	df 93       	push	r29
    2d9c:	cf 93       	push	r28
    2d9e:	cd b7       	in	r28, 0x3d	; 61
    2da0:	de b7       	in	r29, 0x3e	; 62
    2da2:	64 97       	sbiw	r28, 0x14	; 20
    2da4:	0f b6       	in	r0, 0x3f	; 63
    2da6:	f8 94       	cli
    2da8:	de bf       	out	0x3e, r29	; 62
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	8c 87       	std	Y+12, r24	; 0x0c
    2db0:	4d 87       	std	Y+13, r20	; 0x0d
    2db2:	5e 87       	std	Y+14, r21	; 0x0e
    2db4:	6f 87       	std	Y+15, r22	; 0x0f
    2db6:	78 8b       	std	Y+16, r23	; 0x10
	STD_error_t L_stderrState=E_OK;
    2db8:	1b 86       	std	Y+11, r1	; 0x0b
	f32 L_f32TickTime,L_f32OVFTime;
	u16 L_u16PreScalar;
	switch(ARG_u8TimerNo)
    2dba:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dbc:	28 2f       	mov	r18, r24
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	3c 8b       	std	Y+20, r19	; 0x14
    2dc2:	2b 8b       	std	Y+19, r18	; 0x13
    2dc4:	8b 89       	ldd	r24, Y+19	; 0x13
    2dc6:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc8:	81 30       	cpi	r24, 0x01	; 1
    2dca:	91 05       	cpc	r25, r1
    2dcc:	09 f4       	brne	.+2      	; 0x2dd0 <MTIM_stderrTimerDelay+0x3e>
    2dce:	ed c0       	rjmp	.+474    	; 0x2faa <MTIM_stderrTimerDelay+0x218>
    2dd0:	2b 89       	ldd	r18, Y+19	; 0x13
    2dd2:	3c 89       	ldd	r19, Y+20	; 0x14
    2dd4:	22 30       	cpi	r18, 0x02	; 2
    2dd6:	31 05       	cpc	r19, r1
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <MTIM_stderrTimerDelay+0x4a>
    2dda:	e7 c0       	rjmp	.+462    	; 0x2faa <MTIM_stderrTimerDelay+0x218>
    2ddc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dde:	9c 89       	ldd	r25, Y+20	; 0x14
    2de0:	00 97       	sbiw	r24, 0x00	; 0
    2de2:	09 f0       	breq	.+2      	; 0x2de6 <MTIM_stderrTimerDelay+0x54>
    2de4:	e0 c0       	rjmp	.+448    	; 0x2fa6 <MTIM_stderrTimerDelay+0x214>
	{
	case MTIM_TIMER0:
	{
		switch(MTIM_u8Timer0Clock)
    2de6:	80 91 b8 02 	lds	r24, 0x02B8
    2dea:	28 2f       	mov	r18, r24
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	3a 8b       	std	Y+18, r19	; 0x12
    2df0:	29 8b       	std	Y+17, r18	; 0x11
    2df2:	89 89       	ldd	r24, Y+17	; 0x11
    2df4:	9a 89       	ldd	r25, Y+18	; 0x12
    2df6:	83 30       	cpi	r24, 0x03	; 3
    2df8:	91 05       	cpc	r25, r1
    2dfa:	29 f1       	breq	.+74     	; 0x2e46 <MTIM_stderrTimerDelay+0xb4>
    2dfc:	29 89       	ldd	r18, Y+17	; 0x11
    2dfe:	3a 89       	ldd	r19, Y+18	; 0x12
    2e00:	24 30       	cpi	r18, 0x04	; 4
    2e02:	31 05       	cpc	r19, r1
    2e04:	5c f4       	brge	.+22     	; 0x2e1c <MTIM_stderrTimerDelay+0x8a>
    2e06:	89 89       	ldd	r24, Y+17	; 0x11
    2e08:	9a 89       	ldd	r25, Y+18	; 0x12
    2e0a:	81 30       	cpi	r24, 0x01	; 1
    2e0c:	91 05       	cpc	r25, r1
    2e0e:	89 f0       	breq	.+34     	; 0x2e32 <MTIM_stderrTimerDelay+0xa0>
    2e10:	29 89       	ldd	r18, Y+17	; 0x11
    2e12:	3a 89       	ldd	r19, Y+18	; 0x12
    2e14:	22 30       	cpi	r18, 0x02	; 2
    2e16:	31 05       	cpc	r19, r1
    2e18:	89 f0       	breq	.+34     	; 0x2e3c <MTIM_stderrTimerDelay+0xaa>
    2e1a:	23 c0       	rjmp	.+70     	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
    2e1c:	89 89       	ldd	r24, Y+17	; 0x11
    2e1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2e20:	84 30       	cpi	r24, 0x04	; 4
    2e22:	91 05       	cpc	r25, r1
    2e24:	a9 f0       	breq	.+42     	; 0x2e50 <MTIM_stderrTimerDelay+0xbe>
    2e26:	29 89       	ldd	r18, Y+17	; 0x11
    2e28:	3a 89       	ldd	r19, Y+18	; 0x12
    2e2a:	25 30       	cpi	r18, 0x05	; 5
    2e2c:	31 05       	cpc	r19, r1
    2e2e:	a9 f0       	breq	.+42     	; 0x2e5a <MTIM_stderrTimerDelay+0xc8>
    2e30:	18 c0       	rjmp	.+48     	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
		{
		case MTIM_CS_CLOCK_PRESCALAR_1:L_u16PreScalar=1;break;
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	90 e0       	ldi	r25, 0x00	; 0
    2e36:	9a 83       	std	Y+2, r25	; 0x02
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	13 c0       	rjmp	.+38     	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_8:L_u16PreScalar=8;break;
    2e3c:	88 e0       	ldi	r24, 0x08	; 8
    2e3e:	90 e0       	ldi	r25, 0x00	; 0
    2e40:	9a 83       	std	Y+2, r25	; 0x02
    2e42:	89 83       	std	Y+1, r24	; 0x01
    2e44:	0e c0       	rjmp	.+28     	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_64:L_u16PreScalar=64;break;
    2e46:	80 e4       	ldi	r24, 0x40	; 64
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	9a 83       	std	Y+2, r25	; 0x02
    2e4c:	89 83       	std	Y+1, r24	; 0x01
    2e4e:	09 c0       	rjmp	.+18     	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_256:L_u16PreScalar=256;break;
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	91 e0       	ldi	r25, 0x01	; 1
    2e54:	9a 83       	std	Y+2, r25	; 0x02
    2e56:	89 83       	std	Y+1, r24	; 0x01
    2e58:	04 c0       	rjmp	.+8      	; 0x2e62 <MTIM_stderrTimerDelay+0xd0>
		case MTIM_CS_CLOCK_PRESCALAR_1024:L_u16PreScalar=1024;break;
    2e5a:	80 e0       	ldi	r24, 0x00	; 0
    2e5c:	94 e0       	ldi	r25, 0x04	; 4
    2e5e:	9a 83       	std	Y+2, r25	; 0x02
    2e60:	89 83       	std	Y+1, r24	; 0x01
		}
		L_f32TickTime=((f32)L_u16PreScalar/F_CPU);
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	9a 81       	ldd	r25, Y+2	; 0x02
    2e66:	cc 01       	movw	r24, r24
    2e68:	a0 e0       	ldi	r26, 0x00	; 0
    2e6a:	b0 e0       	ldi	r27, 0x00	; 0
    2e6c:	bc 01       	movw	r22, r24
    2e6e:	cd 01       	movw	r24, r26
    2e70:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2e74:	dc 01       	movw	r26, r24
    2e76:	cb 01       	movw	r24, r22
    2e78:	bc 01       	movw	r22, r24
    2e7a:	cd 01       	movw	r24, r26
    2e7c:	20 e0       	ldi	r18, 0x00	; 0
    2e7e:	34 e2       	ldi	r19, 0x24	; 36
    2e80:	44 ef       	ldi	r20, 0xF4	; 244
    2e82:	5a e4       	ldi	r21, 0x4A	; 74
    2e84:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8f 83       	std	Y+7, r24	; 0x07
    2e8e:	98 87       	std	Y+8, r25	; 0x08
    2e90:	a9 87       	std	Y+9, r26	; 0x09
    2e92:	ba 87       	std	Y+10, r27	; 0x0a
		L_f32OVFTime=L_f32TickTime*256;
    2e94:	6f 81       	ldd	r22, Y+7	; 0x07
    2e96:	78 85       	ldd	r23, Y+8	; 0x08
    2e98:	89 85       	ldd	r24, Y+9	; 0x09
    2e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	40 e8       	ldi	r20, 0x80	; 128
    2ea2:	53 e4       	ldi	r21, 0x43	; 67
    2ea4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea8:	dc 01       	movw	r26, r24
    2eaa:	cb 01       	movw	r24, r22
    2eac:	8b 83       	std	Y+3, r24	; 0x03
    2eae:	9c 83       	std	Y+4, r25	; 0x04
    2eb0:	ad 83       	std	Y+5, r26	; 0x05
    2eb2:	be 83       	std	Y+6, r27	; 0x06
		MTIM_u16Timer0OVFCount=(((f32)ARG_32msDelay/1000)/L_f32OVFTime);
    2eb4:	6d 85       	ldd	r22, Y+13	; 0x0d
    2eb6:	7e 85       	ldd	r23, Y+14	; 0x0e
    2eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eba:	98 89       	ldd	r25, Y+16	; 0x10
    2ebc:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ec0:	dc 01       	movw	r26, r24
    2ec2:	cb 01       	movw	r24, r22
    2ec4:	bc 01       	movw	r22, r24
    2ec6:	cd 01       	movw	r24, r26
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	30 e0       	ldi	r19, 0x00	; 0
    2ecc:	4a e7       	ldi	r20, 0x7A	; 122
    2ece:	54 e4       	ldi	r21, 0x44	; 68
    2ed0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	bc 01       	movw	r22, r24
    2eda:	cd 01       	movw	r24, r26
    2edc:	2b 81       	ldd	r18, Y+3	; 0x03
    2ede:	3c 81       	ldd	r19, Y+4	; 0x04
    2ee0:	4d 81       	ldd	r20, Y+5	; 0x05
    2ee2:	5e 81       	ldd	r21, Y+6	; 0x06
    2ee4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	bc 01       	movw	r22, r24
    2eee:	cd 01       	movw	r24, r26
    2ef0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef4:	dc 01       	movw	r26, r24
    2ef6:	cb 01       	movw	r24, r22
    2ef8:	90 93 ad 02 	sts	0x02AD, r25
    2efc:	80 93 ac 02 	sts	0x02AC, r24
		//MTIM_u8Timer0Preload=256-((ARG_32msDelay/1000)%(u32)L_f32OVFTime);
		MTIM_u8Timer0Preload=256*(1-((((f32)ARG_32msDelay/1000)/L_f32OVFTime)-MTIM_u16Timer0OVFCount));
    2f00:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f02:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f04:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f06:	98 89       	ldd	r25, Y+16	; 0x10
    2f08:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f0c:	dc 01       	movw	r26, r24
    2f0e:	cb 01       	movw	r24, r22
    2f10:	bc 01       	movw	r22, r24
    2f12:	cd 01       	movw	r24, r26
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	4a e7       	ldi	r20, 0x7A	; 122
    2f1a:	54 e4       	ldi	r21, 0x44	; 68
    2f1c:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f20:	dc 01       	movw	r26, r24
    2f22:	cb 01       	movw	r24, r22
    2f24:	bc 01       	movw	r22, r24
    2f26:	cd 01       	movw	r24, r26
    2f28:	2b 81       	ldd	r18, Y+3	; 0x03
    2f2a:	3c 81       	ldd	r19, Y+4	; 0x04
    2f2c:	4d 81       	ldd	r20, Y+5	; 0x05
    2f2e:	5e 81       	ldd	r21, Y+6	; 0x06
    2f30:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f34:	dc 01       	movw	r26, r24
    2f36:	cb 01       	movw	r24, r22
    2f38:	7c 01       	movw	r14, r24
    2f3a:	8d 01       	movw	r16, r26
    2f3c:	80 91 ac 02 	lds	r24, 0x02AC
    2f40:	90 91 ad 02 	lds	r25, 0x02AD
    2f44:	cc 01       	movw	r24, r24
    2f46:	a0 e0       	ldi	r26, 0x00	; 0
    2f48:	b0 e0       	ldi	r27, 0x00	; 0
    2f4a:	bc 01       	movw	r22, r24
    2f4c:	cd 01       	movw	r24, r26
    2f4e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2f52:	9b 01       	movw	r18, r22
    2f54:	ac 01       	movw	r20, r24
    2f56:	c8 01       	movw	r24, r16
    2f58:	b7 01       	movw	r22, r14
    2f5a:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f5e:	dc 01       	movw	r26, r24
    2f60:	cb 01       	movw	r24, r22
    2f62:	9c 01       	movw	r18, r24
    2f64:	ad 01       	movw	r20, r26
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	70 e0       	ldi	r23, 0x00	; 0
    2f6a:	80 e8       	ldi	r24, 0x80	; 128
    2f6c:	9f e3       	ldi	r25, 0x3F	; 63
    2f6e:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    2f72:	dc 01       	movw	r26, r24
    2f74:	cb 01       	movw	r24, r22
    2f76:	bc 01       	movw	r22, r24
    2f78:	cd 01       	movw	r24, r26
    2f7a:	20 e0       	ldi	r18, 0x00	; 0
    2f7c:	30 e0       	ldi	r19, 0x00	; 0
    2f7e:	40 e8       	ldi	r20, 0x80	; 128
    2f80:	53 e4       	ldi	r21, 0x43	; 67
    2f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f86:	dc 01       	movw	r26, r24
    2f88:	cb 01       	movw	r24, r22
    2f8a:	bc 01       	movw	r22, r24
    2f8c:	cd 01       	movw	r24, r26
    2f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f92:	dc 01       	movw	r26, r24
    2f94:	cb 01       	movw	r24, r22
    2f96:	80 93 ae 02 	sts	0x02AE, r24

		TCNT0=MTIM_u8Timer0Preload;
    2f9a:	e2 e5       	ldi	r30, 0x52	; 82
    2f9c:	f0 e0       	ldi	r31, 0x00	; 0
    2f9e:	80 91 ae 02 	lds	r24, 0x02AE
    2fa2:	80 83       	st	Z, r24
    2fa4:	02 c0       	rjmp	.+4      	; 0x2faa <MTIM_stderrTimerDelay+0x218>
	}
	case  MTIM_TIMER2:
	{
		break;
	}
	default:L_stderrState=E_NOK;break;
    2fa6:	81 e0       	ldi	r24, 0x01	; 1
    2fa8:	8b 87       	std	Y+11, r24	; 0x0b
	}
	return L_stderrState;
    2faa:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2fac:	64 96       	adiw	r28, 0x14	; 20
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	cf 91       	pop	r28
    2fba:	df 91       	pop	r29
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	08 95       	ret

00002fc6 <__vector_11>:
void __vector_11(void) __attribute__((signal));

void __vector_11(void)
{
    2fc6:	1f 92       	push	r1
    2fc8:	0f 92       	push	r0
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	0f 92       	push	r0
    2fce:	11 24       	eor	r1, r1
    2fd0:	2f 93       	push	r18
    2fd2:	3f 93       	push	r19
    2fd4:	4f 93       	push	r20
    2fd6:	5f 93       	push	r21
    2fd8:	6f 93       	push	r22
    2fda:	7f 93       	push	r23
    2fdc:	8f 93       	push	r24
    2fde:	9f 93       	push	r25
    2fe0:	af 93       	push	r26
    2fe2:	bf 93       	push	r27
    2fe4:	ef 93       	push	r30
    2fe6:	ff 93       	push	r31
    2fe8:	df 93       	push	r29
    2fea:	cf 93       	push	r28
    2fec:	cd b7       	in	r28, 0x3d	; 61
    2fee:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER0_pvoidfUserFunctionT0OVF!=NULL)
    2ff0:	80 91 a4 02 	lds	r24, 0x02A4
    2ff4:	90 91 a5 02 	lds	r25, 0x02A5
    2ff8:	00 97       	sbiw	r24, 0x00	; 0
    2ffa:	29 f1       	breq	.+74     	; 0x3046 <__vector_11+0x80>
	{
		static volatile u16 L_u16OVFCounter=0;
		L_u16OVFCounter++;
    2ffc:	80 91 aa 02 	lds	r24, 0x02AA
    3000:	90 91 ab 02 	lds	r25, 0x02AB
    3004:	01 96       	adiw	r24, 0x01	; 1
    3006:	90 93 ab 02 	sts	0x02AB, r25
    300a:	80 93 aa 02 	sts	0x02AA, r24
		if(L_u16OVFCounter==(MTIM_u16Timer0OVFCount+1))
    300e:	80 91 ac 02 	lds	r24, 0x02AC
    3012:	90 91 ad 02 	lds	r25, 0x02AD
    3016:	9c 01       	movw	r18, r24
    3018:	2f 5f       	subi	r18, 0xFF	; 255
    301a:	3f 4f       	sbci	r19, 0xFF	; 255
    301c:	80 91 aa 02 	lds	r24, 0x02AA
    3020:	90 91 ab 02 	lds	r25, 0x02AB
    3024:	28 17       	cp	r18, r24
    3026:	39 07       	cpc	r19, r25
    3028:	71 f4       	brne	.+28     	; 0x3046 <__vector_11+0x80>
		{
			L_u16OVFCounter=0;
    302a:	10 92 ab 02 	sts	0x02AB, r1
    302e:	10 92 aa 02 	sts	0x02AA, r1
			TCNT0=MTIM_u8Timer0Preload;
    3032:	e2 e5       	ldi	r30, 0x52	; 82
    3034:	f0 e0       	ldi	r31, 0x00	; 0
    3036:	80 91 ae 02 	lds	r24, 0x02AE
    303a:	80 83       	st	Z, r24
			MTIMER0_pvoidfUserFunctionT0OVF();
    303c:	e0 91 a4 02 	lds	r30, 0x02A4
    3040:	f0 91 a5 02 	lds	r31, 0x02A5
    3044:	09 95       	icall
	}
	else
	{
		//report null pointer
	}
}
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	ff 91       	pop	r31
    304c:	ef 91       	pop	r30
    304e:	bf 91       	pop	r27
    3050:	af 91       	pop	r26
    3052:	9f 91       	pop	r25
    3054:	8f 91       	pop	r24
    3056:	7f 91       	pop	r23
    3058:	6f 91       	pop	r22
    305a:	5f 91       	pop	r21
    305c:	4f 91       	pop	r20
    305e:	3f 91       	pop	r19
    3060:	2f 91       	pop	r18
    3062:	0f 90       	pop	r0
    3064:	0f be       	out	0x3f, r0	; 63
    3066:	0f 90       	pop	r0
    3068:	1f 90       	pop	r1
    306a:	18 95       	reti

0000306c <__vector_10>:
void __vector_10(void) __attribute__((signal));

void __vector_10(void)
{
    306c:	1f 92       	push	r1
    306e:	0f 92       	push	r0
    3070:	0f b6       	in	r0, 0x3f	; 63
    3072:	0f 92       	push	r0
    3074:	11 24       	eor	r1, r1
    3076:	2f 93       	push	r18
    3078:	3f 93       	push	r19
    307a:	4f 93       	push	r20
    307c:	5f 93       	push	r21
    307e:	6f 93       	push	r22
    3080:	7f 93       	push	r23
    3082:	8f 93       	push	r24
    3084:	9f 93       	push	r25
    3086:	af 93       	push	r26
    3088:	bf 93       	push	r27
    308a:	ef 93       	push	r30
    308c:	ff 93       	push	r31
    308e:	df 93       	push	r29
    3090:	cf 93       	push	r28
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER0_pvoidfUserFunctionT0OCM!=NULL)
    3096:	80 91 a6 02 	lds	r24, 0x02A6
    309a:	90 91 a7 02 	lds	r25, 0x02A7
    309e:	00 97       	sbiw	r24, 0x00	; 0
    30a0:	29 f0       	breq	.+10     	; 0x30ac <__vector_10+0x40>
	{
		MTIMER0_pvoidfUserFunctionT0OCM();
    30a2:	e0 91 a6 02 	lds	r30, 0x02A6
    30a6:	f0 91 a7 02 	lds	r31, 0x02A7
    30aa:	09 95       	icall
	}
	else
	{
		//report null pointer
	}
}
    30ac:	cf 91       	pop	r28
    30ae:	df 91       	pop	r29
    30b0:	ff 91       	pop	r31
    30b2:	ef 91       	pop	r30
    30b4:	bf 91       	pop	r27
    30b6:	af 91       	pop	r26
    30b8:	9f 91       	pop	r25
    30ba:	8f 91       	pop	r24
    30bc:	7f 91       	pop	r23
    30be:	6f 91       	pop	r22
    30c0:	5f 91       	pop	r21
    30c2:	4f 91       	pop	r20
    30c4:	3f 91       	pop	r19
    30c6:	2f 91       	pop	r18
    30c8:	0f 90       	pop	r0
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	0f 90       	pop	r0
    30ce:	1f 90       	pop	r1
    30d0:	18 95       	reti

000030d2 <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    30d2:	1f 92       	push	r1
    30d4:	0f 92       	push	r0
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	0f 92       	push	r0
    30da:	11 24       	eor	r1, r1
    30dc:	2f 93       	push	r18
    30de:	3f 93       	push	r19
    30e0:	4f 93       	push	r20
    30e2:	5f 93       	push	r21
    30e4:	6f 93       	push	r22
    30e6:	7f 93       	push	r23
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	af 93       	push	r26
    30ee:	bf 93       	push	r27
    30f0:	ef 93       	push	r30
    30f2:	ff 93       	push	r31
    30f4:	df 93       	push	r29
    30f6:	cf 93       	push	r28
    30f8:	cd b7       	in	r28, 0x3d	; 61
    30fa:	de b7       	in	r29, 0x3e	; 62
	if(MTIMER1_pvoidfUserFunctionT1ICU!=NULL)
    30fc:	80 91 a8 02 	lds	r24, 0x02A8
    3100:	90 91 a9 02 	lds	r25, 0x02A9
    3104:	00 97       	sbiw	r24, 0x00	; 0
    3106:	29 f0       	breq	.+10     	; 0x3112 <__vector_6+0x40>
	{
		MTIMER1_pvoidfUserFunctionT1ICU();
    3108:	e0 91 a8 02 	lds	r30, 0x02A8
    310c:	f0 91 a9 02 	lds	r31, 0x02A9
    3110:	09 95       	icall
	}

}
    3112:	cf 91       	pop	r28
    3114:	df 91       	pop	r29
    3116:	ff 91       	pop	r31
    3118:	ef 91       	pop	r30
    311a:	bf 91       	pop	r27
    311c:	af 91       	pop	r26
    311e:	9f 91       	pop	r25
    3120:	8f 91       	pop	r24
    3122:	7f 91       	pop	r23
    3124:	6f 91       	pop	r22
    3126:	5f 91       	pop	r21
    3128:	4f 91       	pop	r20
    312a:	3f 91       	pop	r19
    312c:	2f 91       	pop	r18
    312e:	0f 90       	pop	r0
    3130:	0f be       	out	0x3f, r0	; 63
    3132:	0f 90       	pop	r0
    3134:	1f 90       	pop	r1
    3136:	18 95       	reti

00003138 <MTIM_voidBusyWaitDlay>:

void MTIM_voidBusyWaitDlay(u16 ARG_u16MsDelay)
{
    3138:	df 93       	push	r29
    313a:	cf 93       	push	r28
    313c:	00 d0       	rcall	.+0      	; 0x313e <MTIM_voidBusyWaitDlay+0x6>
    313e:	00 d0       	rcall	.+0      	; 0x3140 <MTIM_voidBusyWaitDlay+0x8>
    3140:	cd b7       	in	r28, 0x3d	; 61
    3142:	de b7       	in	r29, 0x3e	; 62
    3144:	9c 83       	std	Y+4, r25	; 0x04
    3146:	8b 83       	std	Y+3, r24	; 0x03
	//loop counter
	u16 L_u16LoopCounter;
	// make the timer to work on ctc mode
	CLEAR_BIT(TCCR0,WGM00);
    3148:	a3 e5       	ldi	r26, 0x53	; 83
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e3 e5       	ldi	r30, 0x53	; 83
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	8f 7b       	andi	r24, 0xBF	; 191
    3154:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    3156:	a3 e5       	ldi	r26, 0x53	; 83
    3158:	b0 e0       	ldi	r27, 0x00	; 0
    315a:	e3 e5       	ldi	r30, 0x53	; 83
    315c:	f0 e0       	ldi	r31, 0x00	; 0
    315e:	80 81       	ld	r24, Z
    3160:	88 60       	ori	r24, 0x08	; 8
    3162:	8c 93       	st	X, r24
	// make the ocr0 register equal to 125 (so Time of the compare will be 1msec )
	MTIM_stderrSetOCR(MTIM_TIMER0,125);
    3164:	80 e0       	ldi	r24, 0x00	; 0
    3166:	6d e7       	ldi	r22, 0x7D	; 125
    3168:	70 e0       	ldi	r23, 0x00	; 0
    316a:	0e 94 5d 16 	call	0x2cba	; 0x2cba <MTIM_stderrSetOCR>
	// make the pre scaler to 64 so the tick time is 8us
	TCCR0=((TCCR0&0xF8)|MTIM_CS_CLOCK_PRESCALAR_64);
    316e:	a3 e5       	ldi	r26, 0x53	; 83
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e3 e5       	ldi	r30, 0x53	; 83
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	88 7f       	andi	r24, 0xF8	; 248
    317a:	83 60       	ori	r24, 0x03	; 3
    317c:	8c 93       	st	X, r24
	// the loop counter will count to the required delay each iteration is 1msec
	for(L_u16LoopCounter=0;L_u16LoopCounter<ARG_u16MsDelay;L_u16LoopCounter++)
    317e:	1a 82       	std	Y+2, r1	; 0x02
    3180:	19 82       	std	Y+1, r1	; 0x01
    3182:	15 c0       	rjmp	.+42     	; 0x31ae <MTIM_voidBusyWaitDlay+0x76>
	{
		while(!GET_BIT(TIFR,TOV0));
    3184:	e8 e5       	ldi	r30, 0x58	; 88
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	80 81       	ld	r24, Z
    318a:	88 2f       	mov	r24, r24
    318c:	90 e0       	ldi	r25, 0x00	; 0
    318e:	81 70       	andi	r24, 0x01	; 1
    3190:	90 70       	andi	r25, 0x00	; 0
    3192:	00 97       	sbiw	r24, 0x00	; 0
    3194:	b9 f3       	breq	.-18     	; 0x3184 <MTIM_voidBusyWaitDlay+0x4c>
		SET_BIT(TIFR,TOV0);
    3196:	a8 e5       	ldi	r26, 0x58	; 88
    3198:	b0 e0       	ldi	r27, 0x00	; 0
    319a:	e8 e5       	ldi	r30, 0x58	; 88
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	80 81       	ld	r24, Z
    31a0:	81 60       	ori	r24, 0x01	; 1
    31a2:	8c 93       	st	X, r24
	// make the ocr0 register equal to 125 (so Time of the compare will be 1msec )
	MTIM_stderrSetOCR(MTIM_TIMER0,125);
	// make the pre scaler to 64 so the tick time is 8us
	TCCR0=((TCCR0&0xF8)|MTIM_CS_CLOCK_PRESCALAR_64);
	// the loop counter will count to the required delay each iteration is 1msec
	for(L_u16LoopCounter=0;L_u16LoopCounter<ARG_u16MsDelay;L_u16LoopCounter++)
    31a4:	89 81       	ldd	r24, Y+1	; 0x01
    31a6:	9a 81       	ldd	r25, Y+2	; 0x02
    31a8:	01 96       	adiw	r24, 0x01	; 1
    31aa:	9a 83       	std	Y+2, r25	; 0x02
    31ac:	89 83       	std	Y+1, r24	; 0x01
    31ae:	29 81       	ldd	r18, Y+1	; 0x01
    31b0:	3a 81       	ldd	r19, Y+2	; 0x02
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	9c 81       	ldd	r25, Y+4	; 0x04
    31b6:	28 17       	cp	r18, r24
    31b8:	39 07       	cpc	r19, r25
    31ba:	20 f3       	brcs	.-56     	; 0x3184 <MTIM_voidBusyWaitDlay+0x4c>
	{
		while(!GET_BIT(TIFR,TOV0));
		SET_BIT(TIFR,TOV0);
	}
}
    31bc:	0f 90       	pop	r0
    31be:	0f 90       	pop	r0
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	cf 91       	pop	r28
    31c6:	df 91       	pop	r29
    31c8:	08 95       	ret

000031ca <MTIM_SetTimer1TopValue>:

void MTIM_SetTimer1TopValue(u16 ARG_u8TopValue)
{
    31ca:	df 93       	push	r29
    31cc:	cf 93       	push	r28
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <MTIM_SetTimer1TopValue+0x6>
    31d0:	cd b7       	in	r28, 0x3d	; 61
    31d2:	de b7       	in	r29, 0x3e	; 62
    31d4:	9a 83       	std	Y+2, r25	; 0x02
    31d6:	89 83       	std	Y+1, r24	; 0x01
	ICR1=ARG_u8TopValue;
    31d8:	e6 e4       	ldi	r30, 0x46	; 70
    31da:	f0 e0       	ldi	r31, 0x00	; 0
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	91 83       	std	Z+1, r25	; 0x01
    31e2:	80 83       	st	Z, r24
}
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	cf 91       	pop	r28
    31ea:	df 91       	pop	r29
    31ec:	08 95       	ret

000031ee <MTIM_u16GetTimerValue>:


u16 MTIM_u16GetTimerValue(u8 ARG_u8TimerNo)
{
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	00 d0       	rcall	.+0      	; 0x31f4 <MTIM_u16GetTimerValue+0x6>
    31f4:	00 d0       	rcall	.+0      	; 0x31f6 <MTIM_u16GetTimerValue+0x8>
    31f6:	0f 92       	push	r0
    31f8:	cd b7       	in	r28, 0x3d	; 61
    31fa:	de b7       	in	r29, 0x3e	; 62
    31fc:	8b 83       	std	Y+3, r24	; 0x03
	u16 L_Return;
	switch(ARG_u8TimerNo)
    31fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3200:	28 2f       	mov	r18, r24
    3202:	30 e0       	ldi	r19, 0x00	; 0
    3204:	3d 83       	std	Y+5, r19	; 0x05
    3206:	2c 83       	std	Y+4, r18	; 0x04
    3208:	8c 81       	ldd	r24, Y+4	; 0x04
    320a:	9d 81       	ldd	r25, Y+5	; 0x05
    320c:	00 97       	sbiw	r24, 0x00	; 0
    320e:	31 f0       	breq	.+12     	; 0x321c <MTIM_u16GetTimerValue+0x2e>
    3210:	2c 81       	ldd	r18, Y+4	; 0x04
    3212:	3d 81       	ldd	r19, Y+5	; 0x05
    3214:	21 30       	cpi	r18, 0x01	; 1
    3216:	31 05       	cpc	r19, r1
    3218:	49 f0       	breq	.+18     	; 0x322c <MTIM_u16GetTimerValue+0x3e>
    321a:	0e c0       	rjmp	.+28     	; 0x3238 <MTIM_u16GetTimerValue+0x4a>
	{
	case MTIM_TIMER0:
	{
		L_Return=TCNT0;
    321c:	e2 e5       	ldi	r30, 0x52	; 82
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	88 2f       	mov	r24, r24
    3224:	90 e0       	ldi	r25, 0x00	; 0
    3226:	9a 83       	std	Y+2, r25	; 0x02
    3228:	89 83       	std	Y+1, r24	; 0x01
    322a:	06 c0       	rjmp	.+12     	; 0x3238 <MTIM_u16GetTimerValue+0x4a>
		break;
	}
	case  MTIM_TIMER1:
	{
		L_Return=TCNT1;
    322c:	ec e4       	ldi	r30, 0x4C	; 76
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	91 81       	ldd	r25, Z+1	; 0x01
    3234:	9a 83       	std	Y+2, r25	; 0x02
    3236:	89 83       	std	Y+1, r24	; 0x01
	{
		break;
	}
	default:break;//L_stderrState=E_NOK;break;
	}
	return L_Return;
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    323c:	0f 90       	pop	r0
    323e:	0f 90       	pop	r0
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	cf 91       	pop	r28
    3248:	df 91       	pop	r29
    324a:	08 95       	ret

0000324c <ICU_voidSetEdge>:


//icu  function

void ICU_voidSetEdge(u8 Copy_u8Edge)
{
    324c:	df 93       	push	r29
    324e:	cf 93       	push	r28
    3250:	0f 92       	push	r0
    3252:	cd b7       	in	r28, 0x3d	; 61
    3254:	de b7       	in	r29, 0x3e	; 62
    3256:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8Edge==ICU_RISINGEDGE)
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	41 f4       	brne	.+16     	; 0x326e <ICU_voidSetEdge+0x22>
	{
		SET_BIT(TCCR1B,ICES1);
    325e:	ae e4       	ldi	r26, 0x4E	; 78
    3260:	b0 e0       	ldi	r27, 0x00	; 0
    3262:	ee e4       	ldi	r30, 0x4E	; 78
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	80 81       	ld	r24, Z
    3268:	80 64       	ori	r24, 0x40	; 64
    326a:	8c 93       	st	X, r24
    326c:	0a c0       	rjmp	.+20     	; 0x3282 <ICU_voidSetEdge+0x36>
	}
	else if(Copy_u8Edge==ICU_FALLINGEDGE)
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	82 30       	cpi	r24, 0x02	; 2
    3272:	39 f4       	brne	.+14     	; 0x3282 <ICU_voidSetEdge+0x36>
	{
		CLEAR_BIT(TCCR1B,ICES1);
    3274:	ae e4       	ldi	r26, 0x4E	; 78
    3276:	b0 e0       	ldi	r27, 0x00	; 0
    3278:	ee e4       	ldi	r30, 0x4E	; 78
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	8f 7b       	andi	r24, 0xBF	; 191
    3280:	8c 93       	st	X, r24
	}
}
    3282:	0f 90       	pop	r0
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <ICU_voidEnableint>:
void ICU_voidEnableint(void)
{
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	cd b7       	in	r28, 0x3d	; 61
    3290:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TICIE1);
    3292:	a9 e5       	ldi	r26, 0x59	; 89
    3294:	b0 e0       	ldi	r27, 0x00	; 0
    3296:	e9 e5       	ldi	r30, 0x59	; 89
    3298:	f0 e0       	ldi	r31, 0x00	; 0
    329a:	80 81       	ld	r24, Z
    329c:	80 62       	ori	r24, 0x20	; 32
    329e:	8c 93       	st	X, r24
}
    32a0:	cf 91       	pop	r28
    32a2:	df 91       	pop	r29
    32a4:	08 95       	ret

000032a6 <ICU_voidDisableint>:
void ICU_voidDisableint(void)
{
    32a6:	df 93       	push	r29
    32a8:	cf 93       	push	r28
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TICIE1);
    32ae:	a9 e5       	ldi	r26, 0x59	; 89
    32b0:	b0 e0       	ldi	r27, 0x00	; 0
    32b2:	e9 e5       	ldi	r30, 0x59	; 89
    32b4:	f0 e0       	ldi	r31, 0x00	; 0
    32b6:	80 81       	ld	r24, Z
    32b8:	8f 7d       	andi	r24, 0xDF	; 223
    32ba:	8c 93       	st	X, r24
}
    32bc:	cf 91       	pop	r28
    32be:	df 91       	pop	r29
    32c0:	08 95       	ret

000032c2 <ICU_u16ReadICU>:
u16	ICU_u16ReadICU(void)
{
    32c2:	df 93       	push	r29
    32c4:	cf 93       	push	r28
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
	return	ICR1;
    32ca:	e6 e4       	ldi	r30, 0x46	; 70
    32cc:	f0 e0       	ldi	r31, 0x00	; 0
    32ce:	80 81       	ld	r24, Z
    32d0:	91 81       	ldd	r25, Z+1	; 0x01
}
    32d2:	cf 91       	pop	r28
    32d4:	df 91       	pop	r29
    32d6:	08 95       	ret

000032d8 <MTWI_stderrInit>:
#include"MTWI_interface.h"


static void (*MTWI_pvoidfUserfunction)(void);
STD_error_t MTWI_stderrInit(u32 ARG_u32DataRate,u8 ARG_u8PreScalar)
{
    32d8:	0f 93       	push	r16
    32da:	1f 93       	push	r17
    32dc:	df 93       	push	r29
    32de:	cf 93       	push	r28
    32e0:	cd b7       	in	r28, 0x3d	; 61
    32e2:	de b7       	in	r29, 0x3e	; 62
    32e4:	28 97       	sbiw	r28, 0x08	; 8
    32e6:	0f b6       	in	r0, 0x3f	; 63
    32e8:	f8 94       	cli
    32ea:	de bf       	out	0x3e, r29	; 62
    32ec:	0f be       	out	0x3f, r0	; 63
    32ee:	cd bf       	out	0x3d, r28	; 61
    32f0:	6a 83       	std	Y+2, r22	; 0x02
    32f2:	7b 83       	std	Y+3, r23	; 0x03
    32f4:	8c 83       	std	Y+4, r24	; 0x04
    32f6:	9d 83       	std	Y+5, r25	; 0x05
    32f8:	4e 83       	std	Y+6, r20	; 0x06
	STD_error_t L_stderrState=E_OK;
    32fa:	19 82       	std	Y+1, r1	; 0x01
	switch(ARG_u8PreScalar)
    32fc:	8e 81       	ldd	r24, Y+6	; 0x06
    32fe:	28 2f       	mov	r18, r24
    3300:	30 e0       	ldi	r19, 0x00	; 0
    3302:	38 87       	std	Y+8, r19	; 0x08
    3304:	2f 83       	std	Y+7, r18	; 0x07
    3306:	8f 81       	ldd	r24, Y+7	; 0x07
    3308:	98 85       	ldd	r25, Y+8	; 0x08
    330a:	81 30       	cpi	r24, 0x01	; 1
    330c:	91 05       	cpc	r25, r1
    330e:	91 f1       	breq	.+100    	; 0x3374 <MTWI_stderrInit+0x9c>
    3310:	ef 81       	ldd	r30, Y+7	; 0x07
    3312:	f8 85       	ldd	r31, Y+8	; 0x08
    3314:	e2 30       	cpi	r30, 0x02	; 2
    3316:	f1 05       	cpc	r31, r1
    3318:	34 f4       	brge	.+12     	; 0x3326 <MTWI_stderrInit+0x4e>
    331a:	2f 81       	ldd	r18, Y+7	; 0x07
    331c:	38 85       	ldd	r19, Y+8	; 0x08
    331e:	21 15       	cp	r18, r1
    3320:	31 05       	cpc	r19, r1
    3322:	71 f0       	breq	.+28     	; 0x3340 <MTWI_stderrInit+0x68>
    3324:	81 c0       	rjmp	.+258    	; 0x3428 <MTWI_stderrInit+0x150>
    3326:	8f 81       	ldd	r24, Y+7	; 0x07
    3328:	98 85       	ldd	r25, Y+8	; 0x08
    332a:	82 30       	cpi	r24, 0x02	; 2
    332c:	91 05       	cpc	r25, r1
    332e:	09 f4       	brne	.+2      	; 0x3332 <MTWI_stderrInit+0x5a>
    3330:	3f c0       	rjmp	.+126    	; 0x33b0 <MTWI_stderrInit+0xd8>
    3332:	ef 81       	ldd	r30, Y+7	; 0x07
    3334:	f8 85       	ldd	r31, Y+8	; 0x08
    3336:	e3 30       	cpi	r30, 0x03	; 3
    3338:	f1 05       	cpc	r31, r1
    333a:	09 f4       	brne	.+2      	; 0x333e <MTWI_stderrInit+0x66>
    333c:	57 c0       	rjmp	.+174    	; 0x33ec <MTWI_stderrInit+0x114>
    333e:	74 c0       	rjmp	.+232    	; 0x3428 <MTWI_stderrInit+0x150>
	{
	case 0:TWBR=((F_CPU/ARG_u32DataRate)-16)/(2);break;
    3340:	00 e2       	ldi	r16, 0x20	; 32
    3342:	10 e0       	ldi	r17, 0x00	; 0
    3344:	80 e0       	ldi	r24, 0x00	; 0
    3346:	92 e1       	ldi	r25, 0x12	; 18
    3348:	aa e7       	ldi	r26, 0x7A	; 122
    334a:	b0 e0       	ldi	r27, 0x00	; 0
    334c:	2a 81       	ldd	r18, Y+2	; 0x02
    334e:	3b 81       	ldd	r19, Y+3	; 0x03
    3350:	4c 81       	ldd	r20, Y+4	; 0x04
    3352:	5d 81       	ldd	r21, Y+5	; 0x05
    3354:	bc 01       	movw	r22, r24
    3356:	cd 01       	movw	r24, r26
    3358:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodsi4>
    335c:	da 01       	movw	r26, r20
    335e:	c9 01       	movw	r24, r18
    3360:	40 97       	sbiw	r24, 0x10	; 16
    3362:	a1 09       	sbc	r26, r1
    3364:	b1 09       	sbc	r27, r1
    3366:	b6 95       	lsr	r27
    3368:	a7 95       	ror	r26
    336a:	97 95       	ror	r25
    336c:	87 95       	ror	r24
    336e:	f8 01       	movw	r30, r16
    3370:	80 83       	st	Z, r24
    3372:	5c c0       	rjmp	.+184    	; 0x342c <MTWI_stderrInit+0x154>
	case 1:TWBR=((F_CPU/ARG_u32DataRate)-16)/(8);break;
    3374:	00 e2       	ldi	r16, 0x20	; 32
    3376:	10 e0       	ldi	r17, 0x00	; 0
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	92 e1       	ldi	r25, 0x12	; 18
    337c:	aa e7       	ldi	r26, 0x7A	; 122
    337e:	b0 e0       	ldi	r27, 0x00	; 0
    3380:	2a 81       	ldd	r18, Y+2	; 0x02
    3382:	3b 81       	ldd	r19, Y+3	; 0x03
    3384:	4c 81       	ldd	r20, Y+4	; 0x04
    3386:	5d 81       	ldd	r21, Y+5	; 0x05
    3388:	bc 01       	movw	r22, r24
    338a:	cd 01       	movw	r24, r26
    338c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodsi4>
    3390:	da 01       	movw	r26, r20
    3392:	c9 01       	movw	r24, r18
    3394:	40 97       	sbiw	r24, 0x10	; 16
    3396:	a1 09       	sbc	r26, r1
    3398:	b1 09       	sbc	r27, r1
    339a:	68 94       	set
    339c:	12 f8       	bld	r1, 2
    339e:	b6 95       	lsr	r27
    33a0:	a7 95       	ror	r26
    33a2:	97 95       	ror	r25
    33a4:	87 95       	ror	r24
    33a6:	16 94       	lsr	r1
    33a8:	d1 f7       	brne	.-12     	; 0x339e <MTWI_stderrInit+0xc6>
    33aa:	f8 01       	movw	r30, r16
    33ac:	80 83       	st	Z, r24
    33ae:	3e c0       	rjmp	.+124    	; 0x342c <MTWI_stderrInit+0x154>
	case 2:TWBR=((F_CPU/ARG_u32DataRate)-16)/(32);break;
    33b0:	00 e2       	ldi	r16, 0x20	; 32
    33b2:	10 e0       	ldi	r17, 0x00	; 0
    33b4:	80 e0       	ldi	r24, 0x00	; 0
    33b6:	92 e1       	ldi	r25, 0x12	; 18
    33b8:	aa e7       	ldi	r26, 0x7A	; 122
    33ba:	b0 e0       	ldi	r27, 0x00	; 0
    33bc:	2a 81       	ldd	r18, Y+2	; 0x02
    33be:	3b 81       	ldd	r19, Y+3	; 0x03
    33c0:	4c 81       	ldd	r20, Y+4	; 0x04
    33c2:	5d 81       	ldd	r21, Y+5	; 0x05
    33c4:	bc 01       	movw	r22, r24
    33c6:	cd 01       	movw	r24, r26
    33c8:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodsi4>
    33cc:	da 01       	movw	r26, r20
    33ce:	c9 01       	movw	r24, r18
    33d0:	40 97       	sbiw	r24, 0x10	; 16
    33d2:	a1 09       	sbc	r26, r1
    33d4:	b1 09       	sbc	r27, r1
    33d6:	68 94       	set
    33d8:	14 f8       	bld	r1, 4
    33da:	b6 95       	lsr	r27
    33dc:	a7 95       	ror	r26
    33de:	97 95       	ror	r25
    33e0:	87 95       	ror	r24
    33e2:	16 94       	lsr	r1
    33e4:	d1 f7       	brne	.-12     	; 0x33da <MTWI_stderrInit+0x102>
    33e6:	f8 01       	movw	r30, r16
    33e8:	80 83       	st	Z, r24
    33ea:	20 c0       	rjmp	.+64     	; 0x342c <MTWI_stderrInit+0x154>
	case 3:TWBR=((F_CPU/ARG_u32DataRate)-16)/(128);break;
    33ec:	00 e2       	ldi	r16, 0x20	; 32
    33ee:	10 e0       	ldi	r17, 0x00	; 0
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	92 e1       	ldi	r25, 0x12	; 18
    33f4:	aa e7       	ldi	r26, 0x7A	; 122
    33f6:	b0 e0       	ldi	r27, 0x00	; 0
    33f8:	2a 81       	ldd	r18, Y+2	; 0x02
    33fa:	3b 81       	ldd	r19, Y+3	; 0x03
    33fc:	4c 81       	ldd	r20, Y+4	; 0x04
    33fe:	5d 81       	ldd	r21, Y+5	; 0x05
    3400:	bc 01       	movw	r22, r24
    3402:	cd 01       	movw	r24, r26
    3404:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodsi4>
    3408:	da 01       	movw	r26, r20
    340a:	c9 01       	movw	r24, r18
    340c:	40 97       	sbiw	r24, 0x10	; 16
    340e:	a1 09       	sbc	r26, r1
    3410:	b1 09       	sbc	r27, r1
    3412:	68 94       	set
    3414:	16 f8       	bld	r1, 6
    3416:	b6 95       	lsr	r27
    3418:	a7 95       	ror	r26
    341a:	97 95       	ror	r25
    341c:	87 95       	ror	r24
    341e:	16 94       	lsr	r1
    3420:	d1 f7       	brne	.-12     	; 0x3416 <MTWI_stderrInit+0x13e>
    3422:	f8 01       	movw	r30, r16
    3424:	80 83       	st	Z, r24
    3426:	02 c0       	rjmp	.+4      	; 0x342c <MTWI_stderrInit+0x154>
	default:L_stderrState=E_NOK;break;
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	89 83       	std	Y+1, r24	; 0x01
	}
	if((ARG_u8PreScalar<=3))
    342c:	8e 81       	ldd	r24, Y+6	; 0x06
    342e:	84 30       	cpi	r24, 0x04	; 4
    3430:	58 f4       	brcc	.+22     	; 0x3448 <MTWI_stderrInit+0x170>
	{
		TWSR=(TWSR&0xFC)|(ARG_u8PreScalar);		
    3432:	a1 e2       	ldi	r26, 0x21	; 33
    3434:	b0 e0       	ldi	r27, 0x00	; 0
    3436:	e1 e2       	ldi	r30, 0x21	; 33
    3438:	f0 e0       	ldi	r31, 0x00	; 0
    343a:	80 81       	ld	r24, Z
    343c:	98 2f       	mov	r25, r24
    343e:	9c 7f       	andi	r25, 0xFC	; 252
    3440:	8e 81       	ldd	r24, Y+6	; 0x06
    3442:	89 2b       	or	r24, r25
    3444:	8c 93       	st	X, r24
    3446:	02 c0       	rjmp	.+4      	; 0x344c <MTWI_stderrInit+0x174>
	}
	else
	{
		L_stderrState=E_NOK;
    3448:	81 e0       	ldi	r24, 0x01	; 1
    344a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    344c:	89 81       	ldd	r24, Y+1	; 0x01
}
    344e:	28 96       	adiw	r28, 0x08	; 8
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	1f 91       	pop	r17
    3460:	0f 91       	pop	r16
    3462:	08 95       	ret

00003464 <MTWI_voidEnable>:


void MTWI_voidEnable(void)
{
    3464:	df 93       	push	r29
    3466:	cf 93       	push	r28
    3468:	cd b7       	in	r28, 0x3d	; 61
    346a:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWEN);
    346c:	a6 e5       	ldi	r26, 0x56	; 86
    346e:	b0 e0       	ldi	r27, 0x00	; 0
    3470:	e6 e5       	ldi	r30, 0x56	; 86
    3472:	f0 e0       	ldi	r31, 0x00	; 0
    3474:	80 81       	ld	r24, Z
    3476:	84 60       	ori	r24, 0x04	; 4
    3478:	8c 93       	st	X, r24
}
    347a:	cf 91       	pop	r28
    347c:	df 91       	pop	r29
    347e:	08 95       	ret

00003480 <MTWI_voidDisable>:
void MTWI_voidDisable(void)
{
    3480:	df 93       	push	r29
    3482:	cf 93       	push	r28
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR,TWEN);
    3488:	a6 e5       	ldi	r26, 0x56	; 86
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e6 e5       	ldi	r30, 0x56	; 86
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	8b 7f       	andi	r24, 0xFB	; 251
    3494:	8c 93       	st	X, r24
}
    3496:	cf 91       	pop	r28
    3498:	df 91       	pop	r29
    349a:	08 95       	ret

0000349c <MTWI_EnableInterrupt>:

void MTWI_EnableInterrupt(void)
{
    349c:	df 93       	push	r29
    349e:	cf 93       	push	r28
    34a0:	cd b7       	in	r28, 0x3d	; 61
    34a2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWIE);
    34a4:	a6 e5       	ldi	r26, 0x56	; 86
    34a6:	b0 e0       	ldi	r27, 0x00	; 0
    34a8:	e6 e5       	ldi	r30, 0x56	; 86
    34aa:	f0 e0       	ldi	r31, 0x00	; 0
    34ac:	80 81       	ld	r24, Z
    34ae:	81 60       	ori	r24, 0x01	; 1
    34b0:	8c 93       	st	X, r24
}
    34b2:	cf 91       	pop	r28
    34b4:	df 91       	pop	r29
    34b6:	08 95       	ret

000034b8 <MTWI_DisableInterrupt>:
void MTWI_DisableInterrupt(void)
{
    34b8:	df 93       	push	r29
    34ba:	cf 93       	push	r28
    34bc:	cd b7       	in	r28, 0x3d	; 61
    34be:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR,TWIE);
    34c0:	a6 e5       	ldi	r26, 0x56	; 86
    34c2:	b0 e0       	ldi	r27, 0x00	; 0
    34c4:	e6 e5       	ldi	r30, 0x56	; 86
    34c6:	f0 e0       	ldi	r31, 0x00	; 0
    34c8:	80 81       	ld	r24, Z
    34ca:	8e 7f       	andi	r24, 0xFE	; 254
    34cc:	8c 93       	st	X, r24
}
    34ce:	cf 91       	pop	r28
    34d0:	df 91       	pop	r29
    34d2:	08 95       	ret

000034d4 <MTWI_stderrSetCallback>:

STD_error_t MTWI_stderrSetCallback(void(*ARG_pvoidfUserFunction)(void))
{
    34d4:	df 93       	push	r29
    34d6:	cf 93       	push	r28
    34d8:	00 d0       	rcall	.+0      	; 0x34da <MTWI_stderrSetCallback+0x6>
    34da:	0f 92       	push	r0
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	9b 83       	std	Y+3, r25	; 0x03
    34e2:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    34e4:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL)
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ea:	00 97       	sbiw	r24, 0x00	; 0
    34ec:	39 f0       	breq	.+14     	; 0x34fc <MTWI_stderrSetCallback+0x28>
	{
		MTWI_pvoidfUserfunction=ARG_pvoidfUserFunction;
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	90 93 b0 02 	sts	0x02B0, r25
    34f6:	80 93 af 02 	sts	0x02AF, r24
    34fa:	02 c0       	rjmp	.+4      	; 0x3500 <MTWI_stderrSetCallback+0x2c>
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    34fc:	82 e0       	ldi	r24, 0x02	; 2
    34fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3500:	89 81       	ldd	r24, Y+1	; 0x01
}
    3502:	0f 90       	pop	r0
    3504:	0f 90       	pop	r0
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <MTWI_voidSendStartCondition>:

void MTWI_voidSendStartCondition(void)
{
    350e:	df 93       	push	r29
    3510:	cf 93       	push	r28
    3512:	cd b7       	in	r28, 0x3d	; 61
    3514:	de b7       	in	r29, 0x3e	; 62
	//TWCR =(TWCR&0x5f)| (1<<TWINT)|(1<<TWSTA);
	SET_BIT(TWCR,TWSTA);
    3516:	a6 e5       	ldi	r26, 0x56	; 86
    3518:	b0 e0       	ldi	r27, 0x00	; 0
    351a:	e6 e5       	ldi	r30, 0x56	; 86
    351c:	f0 e0       	ldi	r31, 0x00	; 0
    351e:	80 81       	ld	r24, Z
    3520:	80 62       	ori	r24, 0x20	; 32
    3522:	8c 93       	st	X, r24
}
    3524:	cf 91       	pop	r28
    3526:	df 91       	pop	r29
    3528:	08 95       	ret

0000352a <MTWI_voidSendStopCondition>:
void MTWI_voidSendStopCondition(void)
{
    352a:	df 93       	push	r29
    352c:	cf 93       	push	r28
    352e:	cd b7       	in	r28, 0x3d	; 61
    3530:	de b7       	in	r29, 0x3e	; 62
	//TWCR = (TWCR&0x6f)| (1<<TWINT)|(1<<TWSTO);
	SET_BIT(TWCR,TWSTO);
    3532:	a6 e5       	ldi	r26, 0x56	; 86
    3534:	b0 e0       	ldi	r27, 0x00	; 0
    3536:	e6 e5       	ldi	r30, 0x56	; 86
    3538:	f0 e0       	ldi	r31, 0x00	; 0
    353a:	80 81       	ld	r24, Z
    353c:	80 61       	ori	r24, 0x10	; 16
    353e:	8c 93       	st	X, r24
}
    3540:	cf 91       	pop	r28
    3542:	df 91       	pop	r29
    3544:	08 95       	ret

00003546 <MTWI_voidEnableACK>:

void MTWI_voidEnableACK(void)
{
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWEA);
    354e:	a6 e5       	ldi	r26, 0x56	; 86
    3550:	b0 e0       	ldi	r27, 0x00	; 0
    3552:	e6 e5       	ldi	r30, 0x56	; 86
    3554:	f0 e0       	ldi	r31, 0x00	; 0
    3556:	80 81       	ld	r24, Z
    3558:	80 64       	ori	r24, 0x40	; 64
    355a:	8c 93       	st	X, r24
}
    355c:	cf 91       	pop	r28
    355e:	df 91       	pop	r29
    3560:	08 95       	ret

00003562 <MTWI_voidDisableACK>:
void MTWI_voidDisableACK(void)
{
    3562:	df 93       	push	r29
    3564:	cf 93       	push	r28
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWCR,TWEA);
    356a:	a6 e5       	ldi	r26, 0x56	; 86
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	e6 e5       	ldi	r30, 0x56	; 86
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	8f 7b       	andi	r24, 0xBF	; 191
    3576:	8c 93       	st	X, r24
}
    3578:	cf 91       	pop	r28
    357a:	df 91       	pop	r29
    357c:	08 95       	ret

0000357e <MTWI_voidEnableGeneralCall>:


void MTWI_voidEnableGeneralCall(void)
{
    357e:	df 93       	push	r29
    3580:	cf 93       	push	r28
    3582:	cd b7       	in	r28, 0x3d	; 61
    3584:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWAR,TWGCE);
    3586:	a2 e2       	ldi	r26, 0x22	; 34
    3588:	b0 e0       	ldi	r27, 0x00	; 0
    358a:	e2 e2       	ldi	r30, 0x22	; 34
    358c:	f0 e0       	ldi	r31, 0x00	; 0
    358e:	80 81       	ld	r24, Z
    3590:	81 60       	ori	r24, 0x01	; 1
    3592:	8c 93       	st	X, r24
}
    3594:	cf 91       	pop	r28
    3596:	df 91       	pop	r29
    3598:	08 95       	ret

0000359a <MTWI_voidDisableGeneralCall>:
void MTWI_voidDisableGeneralCall(void)
{
    359a:	df 93       	push	r29
    359c:	cf 93       	push	r28
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TWAR,TWGCE);
    35a2:	a2 e2       	ldi	r26, 0x22	; 34
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	e2 e2       	ldi	r30, 0x22	; 34
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	80 81       	ld	r24, Z
    35ac:	8e 7f       	andi	r24, 0xFE	; 254
    35ae:	8c 93       	st	X, r24
}
    35b0:	cf 91       	pop	r28
    35b2:	df 91       	pop	r29
    35b4:	08 95       	ret

000035b6 <MTWI_voidSetSalveAddress>:

void MTWI_voidSetSalveAddress(u8 ARG_u8SlaveAddress)
{
    35b6:	df 93       	push	r29
    35b8:	cf 93       	push	r28
    35ba:	0f 92       	push	r0
    35bc:	cd b7       	in	r28, 0x3d	; 61
    35be:	de b7       	in	r29, 0x3e	; 62
    35c0:	89 83       	std	Y+1, r24	; 0x01
	// i make the shift to ensure that the general call bit is not affected
	TWAR=(TWAR&0x01)|(ARG_u8SlaveAddress<<1);
    35c2:	a2 e2       	ldi	r26, 0x22	; 34
    35c4:	b0 e0       	ldi	r27, 0x00	; 0
    35c6:	e2 e2       	ldi	r30, 0x22	; 34
    35c8:	f0 e0       	ldi	r31, 0x00	; 0
    35ca:	80 81       	ld	r24, Z
    35cc:	28 2f       	mov	r18, r24
    35ce:	21 70       	andi	r18, 0x01	; 1
    35d0:	89 81       	ldd	r24, Y+1	; 0x01
    35d2:	88 2f       	mov	r24, r24
    35d4:	90 e0       	ldi	r25, 0x00	; 0
    35d6:	88 0f       	add	r24, r24
    35d8:	99 1f       	adc	r25, r25
    35da:	82 2b       	or	r24, r18
    35dc:	8c 93       	st	X, r24
}
    35de:	0f 90       	pop	r0
    35e0:	cf 91       	pop	r28
    35e2:	df 91       	pop	r29
    35e4:	08 95       	ret

000035e6 <MTIM_twistatusCheckStatus>:

MTWI_status MTIM_twistatusCheckStatus(void)
{
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	cd b7       	in	r28, 0x3d	; 61
    35ec:	de b7       	in	r29, 0x3e	; 62
	return (TWSR&TWSR_MASK);
    35ee:	e1 e2       	ldi	r30, 0x21	; 33
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	80 81       	ld	r24, Z
    35f4:	88 7f       	andi	r24, 0xF8	; 248
}
    35f6:	cf 91       	pop	r28
    35f8:	df 91       	pop	r29
    35fa:	08 95       	ret

000035fc <MTWI_voidFlagPolling>:

void MTWI_voidFlagPolling(void)
{
    35fc:	df 93       	push	r29
    35fe:	cf 93       	push	r28
    3600:	cd b7       	in	r28, 0x3d	; 61
    3602:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(TWCR,TWINT));
    3604:	e6 e5       	ldi	r30, 0x56	; 86
    3606:	f0 e0       	ldi	r31, 0x00	; 0
    3608:	80 81       	ld	r24, Z
    360a:	88 23       	and	r24, r24
    360c:	dc f7       	brge	.-10     	; 0x3604 <MTWI_voidFlagPolling+0x8>
}
    360e:	cf 91       	pop	r28
    3610:	df 91       	pop	r29
    3612:	08 95       	ret

00003614 <MTWI_voidClearFlag>:
void MTWI_voidClearFlag(void)
{
    3614:	df 93       	push	r29
    3616:	cf 93       	push	r28
    3618:	cd b7       	in	r28, 0x3d	; 61
    361a:	de b7       	in	r29, 0x3e	; 62
	TWCR=(TWCR&0x4F)|(1<< TWINT)|(1<<TWEN);
    361c:	a6 e5       	ldi	r26, 0x56	; 86
    361e:	b0 e0       	ldi	r27, 0x00	; 0
    3620:	e6 e5       	ldi	r30, 0x56	; 86
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	80 81       	ld	r24, Z
    3626:	8b 74       	andi	r24, 0x4B	; 75
    3628:	84 68       	ori	r24, 0x84	; 132
    362a:	8c 93       	st	X, r24
}
    362c:	cf 91       	pop	r28
    362e:	df 91       	pop	r29
    3630:	08 95       	ret

00003632 <MTWI_voidLoadTWDR>:
void MTWI_voidLoadTWDR(u8 ARG_u8Data)
{
    3632:	df 93       	push	r29
    3634:	cf 93       	push	r28
    3636:	0f 92       	push	r0
    3638:	cd b7       	in	r28, 0x3d	; 61
    363a:	de b7       	in	r29, 0x3e	; 62
    363c:	89 83       	std	Y+1, r24	; 0x01
	TWDR=ARG_u8Data;
    363e:	e3 e2       	ldi	r30, 0x23	; 35
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	89 81       	ldd	r24, Y+1	; 0x01
    3644:	80 83       	st	Z, r24
}
    3646:	0f 90       	pop	r0
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <MTWI_charReadTWDR>:
char MTWI_charReadTWDR(void)
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	cd b7       	in	r28, 0x3d	; 61
    3654:	de b7       	in	r29, 0x3e	; 62
	return TWDR;
    3656:	e3 e2       	ldi	r30, 0x23	; 35
    3658:	f0 e0       	ldi	r31, 0x00	; 0
    365a:	80 81       	ld	r24, Z
}
    365c:	cf 91       	pop	r28
    365e:	df 91       	pop	r29
    3660:	08 95       	ret

00003662 <MTWI_voidSendChar>:


// will send the entire frame(start+sla r/w+data+stop);
// will be used in application
void MTWI_voidSendChar(u8 ARG_u8SlaveAddress,char ARG_charChar)
{
    3662:	df 93       	push	r29
    3664:	cf 93       	push	r28
    3666:	00 d0       	rcall	.+0      	; 0x3668 <MTWI_voidSendChar+0x6>
    3668:	cd b7       	in	r28, 0x3d	; 61
    366a:	de b7       	in	r29, 0x3e	; 62
    366c:	89 83       	std	Y+1, r24	; 0x01
    366e:	6a 83       	std	Y+2, r22	; 0x02
	// send start condition ,clear the flag and wait for it to be set again to make sure the operation is done
	MTWI_voidSendStartCondition();
    3670:	0e 94 87 1a 	call	0x350e	; 0x350e <MTWI_voidSendStartCondition>
	MTWI_voidClearFlag();
    3674:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
	//poll the flag
	MTWI_voidFlagPolling();
    3678:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
	// check the status code
	if(MTWI_STATUS_MASTER_START_CONDITION==MTIM_twistatusCheckStatus())
    367c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    3680:	88 30       	cpi	r24, 0x08	; 8
    3682:	e1 f4       	brne	.+56     	; 0x36bc <MTWI_voidSendChar+0x5a>
	{
		// the start condition is send sccuessfuly send the address of the slave
		// slave is 7 bit and the mask is to clear the first bit(write)
		MTWI_voidLoadTWDR(((((ARG_u8SlaveAddress<<1)&(0xFE))|(0))));
    3684:	89 81       	ldd	r24, Y+1	; 0x01
    3686:	88 2f       	mov	r24, r24
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	88 0f       	add	r24, r24
    368c:	99 1f       	adc	r25, r25
    368e:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
		//clear the flag
		MTWI_voidClearFlag();
    3692:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		//poll the flag
		MTWI_voidFlagPolling();
    3696:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
		// check the status code
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK==MTIM_twistatusCheckStatus())
    369a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    369e:	88 31       	cpi	r24, 0x18	; 24
    36a0:	69 f4       	brne	.+26     	; 0x36bc <MTWI_voidSendChar+0x5a>
		{
			// load the data in the register
			MTWI_voidLoadTWDR(ARG_charChar);
    36a2:	8a 81       	ldd	r24, Y+2	; 0x02
    36a4:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
			//clear the flag
			MTWI_voidClearFlag();
    36a8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
			//poll the flag
			MTWI_voidFlagPolling();
    36ac:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
			// check the status code
			if(MTWI_STATUS_MASTER_TX_DATA_ACK==MTIM_twistatusCheckStatus())
    36b0:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    36b4:	88 32       	cpi	r24, 0x28	; 40
    36b6:	11 f4       	brne	.+4      	; 0x36bc <MTWI_voidSendChar+0x5a>
			{
				MTWI_voidSendStopCondition();
    36b8:	0e 94 95 1a 	call	0x352a	; 0x352a <MTWI_voidSendStopCondition>
	}
	else
	{

	}
}
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	cf 91       	pop	r28
    36c2:	df 91       	pop	r29
    36c4:	08 95       	ret

000036c6 <MTWI_voidSendMultipleChar>:
void MTWI_voidSendMultipleChar(u8 ARG_u8SlaveAddress,const char *  ARG_ccharpString)
{
    36c6:	df 93       	push	r29
    36c8:	cf 93       	push	r28
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <MTWI_voidSendMultipleChar+0x6>
    36cc:	00 d0       	rcall	.+0      	; 0x36ce <MTWI_voidSendMultipleChar+0x8>
    36ce:	0f 92       	push	r0
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
    36d4:	8b 83       	std	Y+3, r24	; 0x03
    36d6:	7d 83       	std	Y+5, r23	; 0x05
    36d8:	6c 83       	std	Y+4, r22	; 0x04
	u16 L_u16StringCounter=0;
    36da:	1a 82       	std	Y+2, r1	; 0x02
    36dc:	19 82       	std	Y+1, r1	; 0x01
	// send start condition ,clear the flag and wait for it to be set again to make sure the operation is done
	MTWI_voidSendStartCondition();
    36de:	0e 94 87 1a 	call	0x350e	; 0x350e <MTWI_voidSendStartCondition>
	MTWI_voidClearFlag();
    36e2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
	MTWI_voidFlagPolling();
    36e6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
	// check the status code
	if(MTWI_STATUS_MASTER_START_CONDITION==MTIM_twistatusCheckStatus())
    36ea:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    36ee:	88 30       	cpi	r24, 0x08	; 8
    36f0:	81 f5       	brne	.+96     	; 0x3752 <MTWI_voidSendMultipleChar+0x8c>
	{
		// the start condition is send sccuessfuly send the address of the slave
		// slave is 7 bit and the mask is to clear the first bit(write)
		MTWI_voidLoadTWDR(((((ARG_u8SlaveAddress<<1)&(0xFE))|(0))));
    36f2:	8b 81       	ldd	r24, Y+3	; 0x03
    36f4:	88 2f       	mov	r24, r24
    36f6:	90 e0       	ldi	r25, 0x00	; 0
    36f8:	88 0f       	add	r24, r24
    36fa:	99 1f       	adc	r25, r25
    36fc:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
		//clear the flag
		MTWI_voidClearFlag();
    3700:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		//poll the flag
		MTWI_voidFlagPolling();
    3704:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
		// check the status code
		if(MTWI_STATUS_MASTER_TX_SLA_W_ACK==MTIM_twistatusCheckStatus())
    3708:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    370c:	88 31       	cpi	r24, 0x18	; 24
    370e:	09 f5       	brne	.+66     	; 0x3752 <MTWI_voidSendMultipleChar+0x8c>
		{
			do
			{
				// load the data in the register
				MTWI_voidLoadTWDR(ARG_ccharpString[L_u16StringCounter]);
    3710:	2c 81       	ldd	r18, Y+4	; 0x04
    3712:	3d 81       	ldd	r19, Y+5	; 0x05
    3714:	89 81       	ldd	r24, Y+1	; 0x01
    3716:	9a 81       	ldd	r25, Y+2	; 0x02
    3718:	f9 01       	movw	r30, r18
    371a:	e8 0f       	add	r30, r24
    371c:	f9 1f       	adc	r31, r25
    371e:	80 81       	ld	r24, Z
    3720:	0e 94 19 1b 	call	0x3632	; 0x3632 <MTWI_voidLoadTWDR>
				//clear the flag
				MTWI_voidClearFlag();
    3724:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
				//poll the flag
				MTWI_voidFlagPolling();
    3728:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
				// check the status code
				L_u16StringCounter++;
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	9a 81       	ldd	r25, Y+2	; 0x02
    3730:	01 96       	adiw	r24, 0x01	; 1
    3732:	9a 83       	std	Y+2, r25	; 0x02
    3734:	89 83       	std	Y+1, r24	; 0x01
			}while(ARG_ccharpString[L_u16StringCounter]!='\0' &&(MTWI_STATUS_MASTER_TX_DATA_ACK==MTIM_twistatusCheckStatus()));
    3736:	2c 81       	ldd	r18, Y+4	; 0x04
    3738:	3d 81       	ldd	r19, Y+5	; 0x05
    373a:	89 81       	ldd	r24, Y+1	; 0x01
    373c:	9a 81       	ldd	r25, Y+2	; 0x02
    373e:	f9 01       	movw	r30, r18
    3740:	e8 0f       	add	r30, r24
    3742:	f9 1f       	adc	r31, r25
    3744:	80 81       	ld	r24, Z
    3746:	88 23       	and	r24, r24
    3748:	21 f0       	breq	.+8      	; 0x3752 <MTWI_voidSendMultipleChar+0x8c>
    374a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    374e:	88 32       	cpi	r24, 0x28	; 40
    3750:	f9 f2       	breq	.-66     	; 0x3710 <MTWI_voidSendMultipleChar+0x4a>
	}
	else
	{

	}
}
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	cf 91       	pop	r28
    375e:	df 91       	pop	r29
    3760:	08 95       	ret

00003762 <MTWI_charSlaveReceive>:

char MTWI_charSlaveReceive(void)
{
    3762:	df 93       	push	r29
    3764:	cf 93       	push	r28
    3766:	0f 92       	push	r0
    3768:	cd b7       	in	r28, 0x3d	; 61
    376a:	de b7       	in	r29, 0x3e	; 62
	char L_charReturn;
	//clear the flag
	MTWI_voidClearFlag();
    376c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
	//poll the flag
	MTWI_voidFlagPolling();
    3770:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
	if(MTWI_STATUS_SLAVE_RX_SLA_W_ACK==MTIM_twistatusCheckStatus())
    3774:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    3778:	80 36       	cpi	r24, 0x60	; 96
    377a:	a9 f4       	brne	.+42     	; 0x37a6 <MTWI_charSlaveReceive+0x44>
	{
		//clear the flag
		MTWI_voidClearFlag();
    377c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		//poll the flag
		MTWI_voidFlagPolling();
    3780:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
		if(MTWI_STATUS_SLAVE_RX_SLA_W_DATA_ACK==MTIM_twistatusCheckStatus())
    3784:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    3788:	80 38       	cpi	r24, 0x80	; 128
    378a:	69 f4       	brne	.+26     	; 0x37a6 <MTWI_charSlaveReceive+0x44>
		{
			L_charReturn=MTWI_charReadTWDR();
    378c:	0e 94 27 1b 	call	0x364e	; 0x364e <MTWI_charReadTWDR>
    3790:	89 83       	std	Y+1, r24	; 0x01
			//clear the flag
			MTWI_voidClearFlag();
    3792:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
			//poll the flag
			MTWI_voidFlagPolling();
    3796:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <MTWI_voidFlagPolling>
			if(MTWI_STATUS_SLAVE_RX_STOP_RSTART==MTIM_twistatusCheckStatus())
    379a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <MTIM_twistatusCheckStatus>
    379e:	80 3a       	cpi	r24, 0xA0	; 160
    37a0:	11 f4       	brne	.+4      	; 0x37a6 <MTWI_charSlaveReceive+0x44>
			{
				MTWI_voidClearFlag();
    37a2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <MTWI_voidClearFlag>
		else
		{

		}
	}
	return L_charReturn;
    37a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    37a8:	0f 90       	pop	r0
    37aa:	cf 91       	pop	r28
    37ac:	df 91       	pop	r29
    37ae:	08 95       	ret

000037b0 <MUART_stderrInit>:
static void (*MUART_pvoidfUserFunctionTxC)(void)=NULL;
static void (*MUART_pvoidfUserFunctionUDREmpty)(void)=NULL;


STD_error_t MUART_stderrInit(u32 ARG_u32BudRate,u8 ARG_u8DataBits,u8 ARG_u8Parity,u8 ARG_u8StopBits)
{
    37b0:	0f 93       	push	r16
    37b2:	df 93       	push	r29
    37b4:	cf 93       	push	r28
    37b6:	cd b7       	in	r28, 0x3d	; 61
    37b8:	de b7       	in	r29, 0x3e	; 62
    37ba:	2a 97       	sbiw	r28, 0x0a	; 10
    37bc:	0f b6       	in	r0, 0x3f	; 63
    37be:	f8 94       	cli
    37c0:	de bf       	out	0x3e, r29	; 62
    37c2:	0f be       	out	0x3f, r0	; 63
    37c4:	cd bf       	out	0x3d, r28	; 61
    37c6:	6c 83       	std	Y+4, r22	; 0x04
    37c8:	7d 83       	std	Y+5, r23	; 0x05
    37ca:	8e 83       	std	Y+6, r24	; 0x06
    37cc:	9f 83       	std	Y+7, r25	; 0x07
    37ce:	48 87       	std	Y+8, r20	; 0x08
    37d0:	29 87       	std	Y+9, r18	; 0x09
    37d2:	0a 87       	std	Y+10, r16	; 0x0a
	STD_error_t L_stderrState=E_OK;
    37d4:	1b 82       	std	Y+3, r1	; 0x03
	if((ARG_u8DataBits<=3 ||7== ARG_u8DataBits)&&((0x20==ARG_u8Parity)||(0x20==ARG_u8Parity)||(0x30==ARG_u8Parity))&&
    37d6:	88 85       	ldd	r24, Y+8	; 0x08
    37d8:	84 30       	cpi	r24, 0x04	; 4
    37da:	20 f0       	brcs	.+8      	; 0x37e4 <MUART_stderrInit+0x34>
    37dc:	88 85       	ldd	r24, Y+8	; 0x08
    37de:	87 30       	cpi	r24, 0x07	; 7
    37e0:	09 f0       	breq	.+2      	; 0x37e4 <MUART_stderrInit+0x34>
    37e2:	62 c0       	rjmp	.+196    	; 0x38a8 <MUART_stderrInit+0xf8>
    37e4:	89 85       	ldd	r24, Y+9	; 0x09
    37e6:	80 32       	cpi	r24, 0x20	; 32
    37e8:	39 f0       	breq	.+14     	; 0x37f8 <MUART_stderrInit+0x48>
    37ea:	89 85       	ldd	r24, Y+9	; 0x09
    37ec:	80 32       	cpi	r24, 0x20	; 32
    37ee:	21 f0       	breq	.+8      	; 0x37f8 <MUART_stderrInit+0x48>
    37f0:	89 85       	ldd	r24, Y+9	; 0x09
    37f2:	80 33       	cpi	r24, 0x30	; 48
    37f4:	09 f0       	breq	.+2      	; 0x37f8 <MUART_stderrInit+0x48>
    37f6:	58 c0       	rjmp	.+176    	; 0x38a8 <MUART_stderrInit+0xf8>
    37f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    37fa:	88 23       	and	r24, r24
    37fc:	21 f0       	breq	.+8      	; 0x3806 <MUART_stderrInit+0x56>
    37fe:	8a 85       	ldd	r24, Y+10	; 0x0a
    3800:	88 30       	cpi	r24, 0x08	; 8
    3802:	09 f0       	breq	.+2      	; 0x3806 <MUART_stderrInit+0x56>
    3804:	51 c0       	rjmp	.+162    	; 0x38a8 <MUART_stderrInit+0xf8>
		((0==ARG_u8StopBits)||(0x08==ARG_u8StopBits)))
	{
		u16 UBBR;
		UBBR=((F_CPU/(16*ARG_u32BudRate))-1);
    3806:	8c 81       	ldd	r24, Y+4	; 0x04
    3808:	9d 81       	ldd	r25, Y+5	; 0x05
    380a:	ae 81       	ldd	r26, Y+6	; 0x06
    380c:	bf 81       	ldd	r27, Y+7	; 0x07
    380e:	88 0f       	add	r24, r24
    3810:	99 1f       	adc	r25, r25
    3812:	aa 1f       	adc	r26, r26
    3814:	bb 1f       	adc	r27, r27
    3816:	88 0f       	add	r24, r24
    3818:	99 1f       	adc	r25, r25
    381a:	aa 1f       	adc	r26, r26
    381c:	bb 1f       	adc	r27, r27
    381e:	88 0f       	add	r24, r24
    3820:	99 1f       	adc	r25, r25
    3822:	aa 1f       	adc	r26, r26
    3824:	bb 1f       	adc	r27, r27
    3826:	88 0f       	add	r24, r24
    3828:	99 1f       	adc	r25, r25
    382a:	aa 1f       	adc	r26, r26
    382c:	bb 1f       	adc	r27, r27
    382e:	9c 01       	movw	r18, r24
    3830:	ad 01       	movw	r20, r26
    3832:	80 e0       	ldi	r24, 0x00	; 0
    3834:	92 e1       	ldi	r25, 0x12	; 18
    3836:	aa e7       	ldi	r26, 0x7A	; 122
    3838:	b0 e0       	ldi	r27, 0x00	; 0
    383a:	bc 01       	movw	r22, r24
    383c:	cd 01       	movw	r24, r26
    383e:	0e 94 5d 21 	call	0x42ba	; 0x42ba <__udivmodsi4>
    3842:	da 01       	movw	r26, r20
    3844:	c9 01       	movw	r24, r18
    3846:	01 97       	sbiw	r24, 0x01	; 1
    3848:	9a 83       	std	Y+2, r25	; 0x02
    384a:	89 83       	std	Y+1, r24	; 0x01
		UBRRL=(u8)UBBR;
    384c:	e9 e2       	ldi	r30, 0x29	; 41
    384e:	f0 e0       	ldi	r31, 0x00	; 0
    3850:	89 81       	ldd	r24, Y+1	; 0x01
    3852:	80 83       	st	Z, r24
		UBRRH=(u8)((UBBR>>8)&0X0F);
    3854:	e0 e4       	ldi	r30, 0x40	; 64
    3856:	f0 e0       	ldi	r31, 0x00	; 0
    3858:	89 81       	ldd	r24, Y+1	; 0x01
    385a:	9a 81       	ldd	r25, Y+2	; 0x02
    385c:	89 2f       	mov	r24, r25
    385e:	99 27       	eor	r25, r25
    3860:	8f 70       	andi	r24, 0x0F	; 15
    3862:	80 83       	st	Z, r24
		UCSRB=(UCSRB&0xFC)|(ARG_u8DataBits&0x04);
    3864:	aa e2       	ldi	r26, 0x2A	; 42
    3866:	b0 e0       	ldi	r27, 0x00	; 0
    3868:	ea e2       	ldi	r30, 0x2A	; 42
    386a:	f0 e0       	ldi	r31, 0x00	; 0
    386c:	80 81       	ld	r24, Z
    386e:	98 2f       	mov	r25, r24
    3870:	9c 7f       	andi	r25, 0xFC	; 252
    3872:	88 85       	ldd	r24, Y+8	; 0x08
    3874:	84 70       	andi	r24, 0x04	; 4
    3876:	89 2b       	or	r24, r25
    3878:	8c 93       	st	X, r24
		UCSRC=(1<<URSEL)|(UCSRC&0XC1)|((ARG_u8DataBits&0X03)<<1)|(ARG_u8Parity)|(ARG_u8StopBits);
    387a:	a0 e4       	ldi	r26, 0x40	; 64
    387c:	b0 e0       	ldi	r27, 0x00	; 0
    387e:	e0 e4       	ldi	r30, 0x40	; 64
    3880:	f0 e0       	ldi	r31, 0x00	; 0
    3882:	80 81       	ld	r24, Z
    3884:	81 74       	andi	r24, 0x41	; 65
    3886:	28 2f       	mov	r18, r24
    3888:	20 68       	ori	r18, 0x80	; 128
    388a:	88 85       	ldd	r24, Y+8	; 0x08
    388c:	88 2f       	mov	r24, r24
    388e:	90 e0       	ldi	r25, 0x00	; 0
    3890:	83 70       	andi	r24, 0x03	; 3
    3892:	90 70       	andi	r25, 0x00	; 0
    3894:	88 0f       	add	r24, r24
    3896:	99 1f       	adc	r25, r25
    3898:	92 2f       	mov	r25, r18
    389a:	98 2b       	or	r25, r24
    389c:	89 85       	ldd	r24, Y+9	; 0x09
    389e:	98 2b       	or	r25, r24
    38a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    38a2:	89 2b       	or	r24, r25
    38a4:	8c 93       	st	X, r24
    38a6:	02 c0       	rjmp	.+4      	; 0x38ac <MUART_stderrInit+0xfc>
	}
	else
	{
		L_stderrState=E_NOK;
    38a8:	81 e0       	ldi	r24, 0x01	; 1
    38aa:	8b 83       	std	Y+3, r24	; 0x03
	}
	return L_stderrState;
    38ac:	8b 81       	ldd	r24, Y+3	; 0x03
}
    38ae:	2a 96       	adiw	r28, 0x0a	; 10
    38b0:	0f b6       	in	r0, 0x3f	; 63
    38b2:	f8 94       	cli
    38b4:	de bf       	out	0x3e, r29	; 62
    38b6:	0f be       	out	0x3f, r0	; 63
    38b8:	cd bf       	out	0x3d, r28	; 61
    38ba:	cf 91       	pop	r28
    38bc:	df 91       	pop	r29
    38be:	0f 91       	pop	r16
    38c0:	08 95       	ret

000038c2 <MUART_voidEnableTx>:

void MUART_voidEnableTx(void)
{
    38c2:	df 93       	push	r29
    38c4:	cf 93       	push	r28
    38c6:	cd b7       	in	r28, 0x3d	; 61
    38c8:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,TXEN);
    38ca:	aa e2       	ldi	r26, 0x2A	; 42
    38cc:	b0 e0       	ldi	r27, 0x00	; 0
    38ce:	ea e2       	ldi	r30, 0x2A	; 42
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	80 81       	ld	r24, Z
    38d4:	88 60       	ori	r24, 0x08	; 8
    38d6:	8c 93       	st	X, r24
}
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <MUART_voidDisableTx>:
void MUART_voidDisableTx(void)
{
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,TXEN);
    38e6:	aa e2       	ldi	r26, 0x2A	; 42
    38e8:	b0 e0       	ldi	r27, 0x00	; 0
    38ea:	ea e2       	ldi	r30, 0x2A	; 42
    38ec:	f0 e0       	ldi	r31, 0x00	; 0
    38ee:	80 81       	ld	r24, Z
    38f0:	87 7f       	andi	r24, 0xF7	; 247
    38f2:	8c 93       	st	X, r24
}
    38f4:	cf 91       	pop	r28
    38f6:	df 91       	pop	r29
    38f8:	08 95       	ret

000038fa <MUART_voidEnableRx>:

void MUART_voidEnableRx(void)
{
    38fa:	df 93       	push	r29
    38fc:	cf 93       	push	r28
    38fe:	cd b7       	in	r28, 0x3d	; 61
    3900:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,RXEN);
    3902:	aa e2       	ldi	r26, 0x2A	; 42
    3904:	b0 e0       	ldi	r27, 0x00	; 0
    3906:	ea e2       	ldi	r30, 0x2A	; 42
    3908:	f0 e0       	ldi	r31, 0x00	; 0
    390a:	80 81       	ld	r24, Z
    390c:	80 61       	ori	r24, 0x10	; 16
    390e:	8c 93       	st	X, r24
}
    3910:	cf 91       	pop	r28
    3912:	df 91       	pop	r29
    3914:	08 95       	ret

00003916 <MUART_voidDisableRx>:
void MUART_voidDisableRx(void)
{
    3916:	df 93       	push	r29
    3918:	cf 93       	push	r28
    391a:	cd b7       	in	r28, 0x3d	; 61
    391c:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(UCSRB,RXEN);
    391e:	aa e2       	ldi	r26, 0x2A	; 42
    3920:	b0 e0       	ldi	r27, 0x00	; 0
    3922:	ea e2       	ldi	r30, 0x2A	; 42
    3924:	f0 e0       	ldi	r31, 0x00	; 0
    3926:	80 81       	ld	r24, Z
    3928:	8f 7e       	andi	r24, 0xEF	; 239
    392a:	8c 93       	st	X, r24
}
    392c:	cf 91       	pop	r28
    392e:	df 91       	pop	r29
    3930:	08 95       	ret

00003932 <MUART_voidTxFlagPolling>:

void MUART_voidTxFlagPolling(void)
{
    3932:	df 93       	push	r29
    3934:	cf 93       	push	r28
    3936:	cd b7       	in	r28, 0x3d	; 61
    3938:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,TXC));
    393a:	eb e2       	ldi	r30, 0x2B	; 43
    393c:	f0 e0       	ldi	r31, 0x00	; 0
    393e:	80 81       	ld	r24, Z
    3940:	82 95       	swap	r24
    3942:	86 95       	lsr	r24
    3944:	86 95       	lsr	r24
    3946:	83 70       	andi	r24, 0x03	; 3
    3948:	88 2f       	mov	r24, r24
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	81 70       	andi	r24, 0x01	; 1
    394e:	90 70       	andi	r25, 0x00	; 0
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	99 f3       	breq	.-26     	; 0x393a <MUART_voidTxFlagPolling+0x8>
}
    3954:	cf 91       	pop	r28
    3956:	df 91       	pop	r29
    3958:	08 95       	ret

0000395a <MUART_voidRxFlagPolling>:
void MUART_voidRxFlagPolling(void)
{
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,RXC));
    3962:	eb e2       	ldi	r30, 0x2B	; 43
    3964:	f0 e0       	ldi	r31, 0x00	; 0
    3966:	80 81       	ld	r24, Z
    3968:	88 23       	and	r24, r24
    396a:	dc f7       	brge	.-10     	; 0x3962 <MUART_voidRxFlagPolling+0x8>
}
    396c:	cf 91       	pop	r28
    396e:	df 91       	pop	r29
    3970:	08 95       	ret

00003972 <MUART_voidRUDREFlagPolling>:
void MUART_voidRUDREFlagPolling(void)
{
    3972:	df 93       	push	r29
    3974:	cf 93       	push	r28
    3976:	cd b7       	in	r28, 0x3d	; 61
    3978:	de b7       	in	r29, 0x3e	; 62
	while(0==GET_BIT(UCSRA,UDRE));
    397a:	eb e2       	ldi	r30, 0x2B	; 43
    397c:	f0 e0       	ldi	r31, 0x00	; 0
    397e:	80 81       	ld	r24, Z
    3980:	82 95       	swap	r24
    3982:	86 95       	lsr	r24
    3984:	87 70       	andi	r24, 0x07	; 7
    3986:	88 2f       	mov	r24, r24
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	81 70       	andi	r24, 0x01	; 1
    398c:	90 70       	andi	r25, 0x00	; 0
    398e:	00 97       	sbiw	r24, 0x00	; 0
    3990:	a1 f3       	breq	.-24     	; 0x397a <MUART_voidRUDREFlagPolling+0x8>
}
    3992:	cf 91       	pop	r28
    3994:	df 91       	pop	r29
    3996:	08 95       	ret

00003998 <MUART_voidSendChar>:

void MUART_voidSendChar(char ARG_charChar)
{
    3998:	df 93       	push	r29
    399a:	cf 93       	push	r28
    399c:	0f 92       	push	r0
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	89 83       	std	Y+1, r24	; 0x01
	MUART_voidRUDREFlagPolling();
    39a4:	0e 94 b9 1c 	call	0x3972	; 0x3972 <MUART_voidRUDREFlagPolling>
	UDR=ARG_charChar;
    39a8:	ec e2       	ldi	r30, 0x2C	; 44
    39aa:	f0 e0       	ldi	r31, 0x00	; 0
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	80 83       	st	Z, r24
}
    39b0:	0f 90       	pop	r0
    39b2:	cf 91       	pop	r28
    39b4:	df 91       	pop	r29
    39b6:	08 95       	ret

000039b8 <MUART_voidSendString>:
void MUART_voidSendString(char * ARG_charpString)
{
    39b8:	df 93       	push	r29
    39ba:	cf 93       	push	r28
    39bc:	00 d0       	rcall	.+0      	; 0x39be <MUART_voidSendString+0x6>
    39be:	00 d0       	rcall	.+0      	; 0x39c0 <MUART_voidSendString+0x8>
    39c0:	00 d0       	rcall	.+0      	; 0x39c2 <MUART_voidSendString+0xa>
    39c2:	cd b7       	in	r28, 0x3d	; 61
    39c4:	de b7       	in	r29, 0x3e	; 62
    39c6:	9e 83       	std	Y+6, r25	; 0x06
    39c8:	8d 83       	std	Y+5, r24	; 0x05
	u32 L_u32Counter=0;
    39ca:	19 82       	std	Y+1, r1	; 0x01
    39cc:	1a 82       	std	Y+2, r1	; 0x02
    39ce:	1b 82       	std	Y+3, r1	; 0x03
    39d0:	1c 82       	std	Y+4, r1	; 0x04
    39d2:	15 c0       	rjmp	.+42     	; 0x39fe <MUART_voidSendString+0x46>
	while(ARG_charpString[L_u32Counter]!='\0')
	{
		L_u32Counter++;
    39d4:	89 81       	ldd	r24, Y+1	; 0x01
    39d6:	9a 81       	ldd	r25, Y+2	; 0x02
    39d8:	ab 81       	ldd	r26, Y+3	; 0x03
    39da:	bc 81       	ldd	r27, Y+4	; 0x04
    39dc:	01 96       	adiw	r24, 0x01	; 1
    39de:	a1 1d       	adc	r26, r1
    39e0:	b1 1d       	adc	r27, r1
    39e2:	89 83       	std	Y+1, r24	; 0x01
    39e4:	9a 83       	std	Y+2, r25	; 0x02
    39e6:	ab 83       	std	Y+3, r26	; 0x03
    39e8:	bc 83       	std	Y+4, r27	; 0x04
		MUART_voidSendChar(ARG_charpString[L_u32Counter]);	
    39ea:	29 81       	ldd	r18, Y+1	; 0x01
    39ec:	3a 81       	ldd	r19, Y+2	; 0x02
    39ee:	8d 81       	ldd	r24, Y+5	; 0x05
    39f0:	9e 81       	ldd	r25, Y+6	; 0x06
    39f2:	fc 01       	movw	r30, r24
    39f4:	e2 0f       	add	r30, r18
    39f6:	f3 1f       	adc	r31, r19
    39f8:	80 81       	ld	r24, Z
    39fa:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
	UDR=ARG_charChar;
}
void MUART_voidSendString(char * ARG_charpString)
{
	u32 L_u32Counter=0;
	while(ARG_charpString[L_u32Counter]!='\0')
    39fe:	29 81       	ldd	r18, Y+1	; 0x01
    3a00:	3a 81       	ldd	r19, Y+2	; 0x02
    3a02:	8d 81       	ldd	r24, Y+5	; 0x05
    3a04:	9e 81       	ldd	r25, Y+6	; 0x06
    3a06:	fc 01       	movw	r30, r24
    3a08:	e2 0f       	add	r30, r18
    3a0a:	f3 1f       	adc	r31, r19
    3a0c:	80 81       	ld	r24, Z
    3a0e:	88 23       	and	r24, r24
    3a10:	09 f7       	brne	.-62     	; 0x39d4 <MUART_voidSendString+0x1c>
	{
		L_u32Counter++;
		MUART_voidSendChar(ARG_charpString[L_u32Counter]);	
	}
}
    3a12:	26 96       	adiw	r28, 0x06	; 6
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <MUART_charReceiveChar>:


char MUART_charReceiveChar(void)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
	MUART_voidRxFlagPolling();
    3a2c:	0e 94 ad 1c 	call	0x395a	; 0x395a <MUART_voidRxFlagPolling>
	return	UDR;
    3a30:	ec e2       	ldi	r30, 0x2C	; 44
    3a32:	f0 e0       	ldi	r31, 0x00	; 0
    3a34:	80 81       	ld	r24, Z
}
    3a36:	cf 91       	pop	r28
    3a38:	df 91       	pop	r29
    3a3a:	08 95       	ret

00003a3c <MUART_voidReceiveStringUntil>:
void MUART_voidReceiveStringUntil(char * ARG_charpString,char ARG_charTerminator)
{
    3a3c:	0f 93       	push	r16
    3a3e:	1f 93       	push	r17
    3a40:	df 93       	push	r29
    3a42:	cf 93       	push	r28
    3a44:	cd b7       	in	r28, 0x3d	; 61
    3a46:	de b7       	in	r29, 0x3e	; 62
    3a48:	27 97       	sbiw	r28, 0x07	; 7
    3a4a:	0f b6       	in	r0, 0x3f	; 63
    3a4c:	f8 94       	cli
    3a4e:	de bf       	out	0x3e, r29	; 62
    3a50:	0f be       	out	0x3f, r0	; 63
    3a52:	cd bf       	out	0x3d, r28	; 61
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	6f 83       	std	Y+7, r22	; 0x07
	u32 L_u32Counter=0;
    3a5a:	19 82       	std	Y+1, r1	; 0x01
    3a5c:	1a 82       	std	Y+2, r1	; 0x02
    3a5e:	1b 82       	std	Y+3, r1	; 0x03
    3a60:	1c 82       	std	Y+4, r1	; 0x04
	ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
    3a62:	29 81       	ldd	r18, Y+1	; 0x01
    3a64:	3a 81       	ldd	r19, Y+2	; 0x02
    3a66:	8d 81       	ldd	r24, Y+5	; 0x05
    3a68:	9e 81       	ldd	r25, Y+6	; 0x06
    3a6a:	8c 01       	movw	r16, r24
    3a6c:	02 0f       	add	r16, r18
    3a6e:	13 1f       	adc	r17, r19
    3a70:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <MUART_charReceiveChar>
    3a74:	f8 01       	movw	r30, r16
    3a76:	80 83       	st	Z, r24
    3a78:	16 c0       	rjmp	.+44     	; 0x3aa6 <MUART_voidReceiveStringUntil+0x6a>
	while(ARG_charpString[L_u32Counter]!=ARG_charTerminator)
	{
		L_u32Counter++;
    3a7a:	89 81       	ldd	r24, Y+1	; 0x01
    3a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a7e:	ab 81       	ldd	r26, Y+3	; 0x03
    3a80:	bc 81       	ldd	r27, Y+4	; 0x04
    3a82:	01 96       	adiw	r24, 0x01	; 1
    3a84:	a1 1d       	adc	r26, r1
    3a86:	b1 1d       	adc	r27, r1
    3a88:	89 83       	std	Y+1, r24	; 0x01
    3a8a:	9a 83       	std	Y+2, r25	; 0x02
    3a8c:	ab 83       	std	Y+3, r26	; 0x03
    3a8e:	bc 83       	std	Y+4, r27	; 0x04
		ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
    3a90:	29 81       	ldd	r18, Y+1	; 0x01
    3a92:	3a 81       	ldd	r19, Y+2	; 0x02
    3a94:	8d 81       	ldd	r24, Y+5	; 0x05
    3a96:	9e 81       	ldd	r25, Y+6	; 0x06
    3a98:	8c 01       	movw	r16, r24
    3a9a:	02 0f       	add	r16, r18
    3a9c:	13 1f       	adc	r17, r19
    3a9e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <MUART_charReceiveChar>
    3aa2:	f8 01       	movw	r30, r16
    3aa4:	80 83       	st	Z, r24
}
void MUART_voidReceiveStringUntil(char * ARG_charpString,char ARG_charTerminator)
{
	u32 L_u32Counter=0;
	ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
	while(ARG_charpString[L_u32Counter]!=ARG_charTerminator)
    3aa6:	29 81       	ldd	r18, Y+1	; 0x01
    3aa8:	3a 81       	ldd	r19, Y+2	; 0x02
    3aaa:	8d 81       	ldd	r24, Y+5	; 0x05
    3aac:	9e 81       	ldd	r25, Y+6	; 0x06
    3aae:	fc 01       	movw	r30, r24
    3ab0:	e2 0f       	add	r30, r18
    3ab2:	f3 1f       	adc	r31, r19
    3ab4:	90 81       	ld	r25, Z
    3ab6:	8f 81       	ldd	r24, Y+7	; 0x07
    3ab8:	98 17       	cp	r25, r24
    3aba:	f9 f6       	brne	.-66     	; 0x3a7a <MUART_voidReceiveStringUntil+0x3e>
	{
		L_u32Counter++;
		ARG_charpString[L_u32Counter]=MUART_charReceiveChar();
	}
	ARG_charpString[L_u32Counter]='\0';
    3abc:	89 81       	ldd	r24, Y+1	; 0x01
    3abe:	9a 81       	ldd	r25, Y+2	; 0x02
    3ac0:	2d 81       	ldd	r18, Y+5	; 0x05
    3ac2:	3e 81       	ldd	r19, Y+6	; 0x06
    3ac4:	f9 01       	movw	r30, r18
    3ac6:	e8 0f       	add	r30, r24
    3ac8:	f9 1f       	adc	r31, r25
    3aca:	10 82       	st	Z, r1
}
    3acc:	27 96       	adiw	r28, 0x07	; 7
    3ace:	0f b6       	in	r0, 0x3f	; 63
    3ad0:	f8 94       	cli
    3ad2:	de bf       	out	0x3e, r29	; 62
    3ad4:	0f be       	out	0x3f, r0	; 63
    3ad6:	cd bf       	out	0x3d, r28	; 61
    3ad8:	cf 91       	pop	r28
    3ada:	df 91       	pop	r29
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	08 95       	ret

00003ae2 <MUART_stderrEnableInterrupt>:

STD_error_t MUART_stderrEnableInterrupt(u8 ARG_u8InterruptSource)
{
    3ae2:	df 93       	push	r29
    3ae4:	cf 93       	push	r28
    3ae6:	00 d0       	rcall	.+0      	; 0x3ae8 <MUART_stderrEnableInterrupt+0x6>
    3ae8:	cd b7       	in	r28, 0x3d	; 61
    3aea:	de b7       	in	r29, 0x3e	; 62
    3aec:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3aee:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8InterruptSource>=5)&&(ARG_u8InterruptSource<=7))
    3af0:	8a 81       	ldd	r24, Y+2	; 0x02
    3af2:	85 30       	cpi	r24, 0x05	; 5
    3af4:	b8 f0       	brcs	.+46     	; 0x3b24 <MUART_stderrEnableInterrupt+0x42>
    3af6:	8a 81       	ldd	r24, Y+2	; 0x02
    3af8:	88 30       	cpi	r24, 0x08	; 8
    3afa:	a0 f4       	brcc	.+40     	; 0x3b24 <MUART_stderrEnableInterrupt+0x42>
	{
		SET_BIT(UCSRB,ARG_u8InterruptSource);
    3afc:	aa e2       	ldi	r26, 0x2A	; 42
    3afe:	b0 e0       	ldi	r27, 0x00	; 0
    3b00:	ea e2       	ldi	r30, 0x2A	; 42
    3b02:	f0 e0       	ldi	r31, 0x00	; 0
    3b04:	80 81       	ld	r24, Z
    3b06:	48 2f       	mov	r20, r24
    3b08:	8a 81       	ldd	r24, Y+2	; 0x02
    3b0a:	28 2f       	mov	r18, r24
    3b0c:	30 e0       	ldi	r19, 0x00	; 0
    3b0e:	81 e0       	ldi	r24, 0x01	; 1
    3b10:	90 e0       	ldi	r25, 0x00	; 0
    3b12:	02 2e       	mov	r0, r18
    3b14:	02 c0       	rjmp	.+4      	; 0x3b1a <MUART_stderrEnableInterrupt+0x38>
    3b16:	88 0f       	add	r24, r24
    3b18:	99 1f       	adc	r25, r25
    3b1a:	0a 94       	dec	r0
    3b1c:	e2 f7       	brpl	.-8      	; 0x3b16 <MUART_stderrEnableInterrupt+0x34>
    3b1e:	84 2b       	or	r24, r20
    3b20:	8c 93       	st	X, r24
    3b22:	02 c0       	rjmp	.+4      	; 0x3b28 <MUART_stderrEnableInterrupt+0x46>
	}
	else
	{
		L_stderrState=E_NOK;
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3b28:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b2a:	0f 90       	pop	r0
    3b2c:	0f 90       	pop	r0
    3b2e:	cf 91       	pop	r28
    3b30:	df 91       	pop	r29
    3b32:	08 95       	ret

00003b34 <MUART_stderrDisableInterrupt>:
STD_error_t MUART_stderrDisableInterrupt(u8 ARG_u8InterruptSource)
{
    3b34:	df 93       	push	r29
    3b36:	cf 93       	push	r28
    3b38:	00 d0       	rcall	.+0      	; 0x3b3a <MUART_stderrDisableInterrupt+0x6>
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	8a 83       	std	Y+2, r24	; 0x02
	STD_error_t L_stderrState=E_OK;
    3b40:	19 82       	std	Y+1, r1	; 0x01
	if((ARG_u8InterruptSource>=5)&&(ARG_u8InterruptSource<=7))
    3b42:	8a 81       	ldd	r24, Y+2	; 0x02
    3b44:	85 30       	cpi	r24, 0x05	; 5
    3b46:	c0 f0       	brcs	.+48     	; 0x3b78 <MUART_stderrDisableInterrupt+0x44>
    3b48:	8a 81       	ldd	r24, Y+2	; 0x02
    3b4a:	88 30       	cpi	r24, 0x08	; 8
    3b4c:	a8 f4       	brcc	.+42     	; 0x3b78 <MUART_stderrDisableInterrupt+0x44>
	{
	CLEAR_BIT(UCSRB,ARG_u8InterruptSource);
    3b4e:	aa e2       	ldi	r26, 0x2A	; 42
    3b50:	b0 e0       	ldi	r27, 0x00	; 0
    3b52:	ea e2       	ldi	r30, 0x2A	; 42
    3b54:	f0 e0       	ldi	r31, 0x00	; 0
    3b56:	80 81       	ld	r24, Z
    3b58:	48 2f       	mov	r20, r24
    3b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b5c:	28 2f       	mov	r18, r24
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	02 2e       	mov	r0, r18
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <MUART_stderrDisableInterrupt+0x38>
    3b68:	88 0f       	add	r24, r24
    3b6a:	99 1f       	adc	r25, r25
    3b6c:	0a 94       	dec	r0
    3b6e:	e2 f7       	brpl	.-8      	; 0x3b68 <MUART_stderrDisableInterrupt+0x34>
    3b70:	80 95       	com	r24
    3b72:	84 23       	and	r24, r20
    3b74:	8c 93       	st	X, r24
    3b76:	02 c0       	rjmp	.+4      	; 0x3b7c <MUART_stderrDisableInterrupt+0x48>
	}
	else
	{
		L_stderrState=E_NOK;
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3b7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	cf 91       	pop	r28
    3b84:	df 91       	pop	r29
    3b86:	08 95       	ret

00003b88 <MUART_stderrSetCallback>:

STD_error_t MUART_stderrSetCallback(void(*ARG_pvoidfUserFunction)(void),u8 ARG_u8InterruptSource)
{
    3b88:	df 93       	push	r29
    3b8a:	cf 93       	push	r28
    3b8c:	00 d0       	rcall	.+0      	; 0x3b8e <MUART_stderrSetCallback+0x6>
    3b8e:	00 d0       	rcall	.+0      	; 0x3b90 <MUART_stderrSetCallback+0x8>
    3b90:	00 d0       	rcall	.+0      	; 0x3b92 <MUART_stderrSetCallback+0xa>
    3b92:	cd b7       	in	r28, 0x3d	; 61
    3b94:	de b7       	in	r29, 0x3e	; 62
    3b96:	9b 83       	std	Y+3, r25	; 0x03
    3b98:	8a 83       	std	Y+2, r24	; 0x02
    3b9a:	6c 83       	std	Y+4, r22	; 0x04
	STD_error_t L_stderrState=E_OK;
    3b9c:	19 82       	std	Y+1, r1	; 0x01
	if(ARG_pvoidfUserFunction!=NULL)
    3b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    3ba0:	9b 81       	ldd	r25, Y+3	; 0x03
    3ba2:	00 97       	sbiw	r24, 0x00	; 0
    3ba4:	69 f1       	breq	.+90     	; 0x3c00 <MUART_stderrSetCallback+0x78>
	{
		switch(ARG_u8InterruptSource)
    3ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    3ba8:	28 2f       	mov	r18, r24
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	3e 83       	std	Y+6, r19	; 0x06
    3bae:	2d 83       	std	Y+5, r18	; 0x05
    3bb0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bb2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bb4:	86 30       	cpi	r24, 0x06	; 6
    3bb6:	91 05       	cpc	r25, r1
    3bb8:	91 f0       	breq	.+36     	; 0x3bde <MUART_stderrSetCallback+0x56>
    3bba:	2d 81       	ldd	r18, Y+5	; 0x05
    3bbc:	3e 81       	ldd	r19, Y+6	; 0x06
    3bbe:	27 30       	cpi	r18, 0x07	; 7
    3bc0:	31 05       	cpc	r19, r1
    3bc2:	31 f0       	breq	.+12     	; 0x3bd0 <MUART_stderrSetCallback+0x48>
    3bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc8:	85 30       	cpi	r24, 0x05	; 5
    3bca:	91 05       	cpc	r25, r1
    3bcc:	79 f0       	breq	.+30     	; 0x3bec <MUART_stderrSetCallback+0x64>
    3bce:	15 c0       	rjmp	.+42     	; 0x3bfa <MUART_stderrSetCallback+0x72>
		{
			case MUART_INTERRUPT_RXC:MUART_pvoidfUserFunctionRxC=ARG_pvoidfUserFunction;break;
    3bd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3bd2:	9b 81       	ldd	r25, Y+3	; 0x03
    3bd4:	90 93 b2 02 	sts	0x02B2, r25
    3bd8:	80 93 b1 02 	sts	0x02B1, r24
    3bdc:	13 c0       	rjmp	.+38     	; 0x3c04 <MUART_stderrSetCallback+0x7c>
			case MUART_INTERRUPT_TXC:MUART_pvoidfUserFunctionTxC=ARG_pvoidfUserFunction;break;
    3bde:	8a 81       	ldd	r24, Y+2	; 0x02
    3be0:	9b 81       	ldd	r25, Y+3	; 0x03
    3be2:	90 93 b4 02 	sts	0x02B4, r25
    3be6:	80 93 b3 02 	sts	0x02B3, r24
    3bea:	0c c0       	rjmp	.+24     	; 0x3c04 <MUART_stderrSetCallback+0x7c>
			case MUART_INTERRUPT_UDR_EMPTY:MUART_pvoidfUserFunctionUDREmpty=ARG_pvoidfUserFunction;break;
    3bec:	8a 81       	ldd	r24, Y+2	; 0x02
    3bee:	9b 81       	ldd	r25, Y+3	; 0x03
    3bf0:	90 93 b6 02 	sts	0x02B6, r25
    3bf4:	80 93 b5 02 	sts	0x02B5, r24
    3bf8:	05 c0       	rjmp	.+10     	; 0x3c04 <MUART_stderrSetCallback+0x7c>
			default: L_stderrState=E_NOK;
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	89 83       	std	Y+1, r24	; 0x01
    3bfe:	02 c0       	rjmp	.+4      	; 0x3c04 <MUART_stderrSetCallback+0x7c>
		}
	}
	else
	{
		L_stderrState=E_NULL_POINTER;
    3c00:	82 e0       	ldi	r24, 0x02	; 2
    3c02:	89 83       	std	Y+1, r24	; 0x01
	}
	return L_stderrState;
    3c04:	89 81       	ldd	r24, Y+1	; 0x01
}
    3c06:	26 96       	adiw	r28, 0x06	; 6
    3c08:	0f b6       	in	r0, 0x3f	; 63
    3c0a:	f8 94       	cli
    3c0c:	de bf       	out	0x3e, r29	; 62
    3c0e:	0f be       	out	0x3f, r0	; 63
    3c10:	cd bf       	out	0x3d, r28	; 61
    3c12:	cf 91       	pop	r28
    3c14:	df 91       	pop	r29
    3c16:	08 95       	ret

00003c18 <__vector_13>:
void __vector_13(void)  __attribute__((signal));
void __vector_13(void)
{
    3c18:	1f 92       	push	r1
    3c1a:	0f 92       	push	r0
    3c1c:	0f b6       	in	r0, 0x3f	; 63
    3c1e:	0f 92       	push	r0
    3c20:	11 24       	eor	r1, r1
    3c22:	2f 93       	push	r18
    3c24:	3f 93       	push	r19
    3c26:	4f 93       	push	r20
    3c28:	5f 93       	push	r21
    3c2a:	6f 93       	push	r22
    3c2c:	7f 93       	push	r23
    3c2e:	8f 93       	push	r24
    3c30:	9f 93       	push	r25
    3c32:	af 93       	push	r26
    3c34:	bf 93       	push	r27
    3c36:	ef 93       	push	r30
    3c38:	ff 93       	push	r31
    3c3a:	df 93       	push	r29
    3c3c:	cf 93       	push	r28
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionRxC!=NULL)
    3c42:	80 91 b1 02 	lds	r24, 0x02B1
    3c46:	90 91 b2 02 	lds	r25, 0x02B2
    3c4a:	00 97       	sbiw	r24, 0x00	; 0
    3c4c:	29 f0       	breq	.+10     	; 0x3c58 <__vector_13+0x40>
	{
		MUART_pvoidfUserFunctionRxC();
    3c4e:	e0 91 b1 02 	lds	r30, 0x02B1
    3c52:	f0 91 b2 02 	lds	r31, 0x02B2
    3c56:	09 95       	icall
	}
}
    3c58:	cf 91       	pop	r28
    3c5a:	df 91       	pop	r29
    3c5c:	ff 91       	pop	r31
    3c5e:	ef 91       	pop	r30
    3c60:	bf 91       	pop	r27
    3c62:	af 91       	pop	r26
    3c64:	9f 91       	pop	r25
    3c66:	8f 91       	pop	r24
    3c68:	7f 91       	pop	r23
    3c6a:	6f 91       	pop	r22
    3c6c:	5f 91       	pop	r21
    3c6e:	4f 91       	pop	r20
    3c70:	3f 91       	pop	r19
    3c72:	2f 91       	pop	r18
    3c74:	0f 90       	pop	r0
    3c76:	0f be       	out	0x3f, r0	; 63
    3c78:	0f 90       	pop	r0
    3c7a:	1f 90       	pop	r1
    3c7c:	18 95       	reti

00003c7e <__vector_14>:
void __vector_14(void)  __attribute__((signal));
void __vector_14(void)
{
    3c7e:	1f 92       	push	r1
    3c80:	0f 92       	push	r0
    3c82:	0f b6       	in	r0, 0x3f	; 63
    3c84:	0f 92       	push	r0
    3c86:	11 24       	eor	r1, r1
    3c88:	2f 93       	push	r18
    3c8a:	3f 93       	push	r19
    3c8c:	4f 93       	push	r20
    3c8e:	5f 93       	push	r21
    3c90:	6f 93       	push	r22
    3c92:	7f 93       	push	r23
    3c94:	8f 93       	push	r24
    3c96:	9f 93       	push	r25
    3c98:	af 93       	push	r26
    3c9a:	bf 93       	push	r27
    3c9c:	ef 93       	push	r30
    3c9e:	ff 93       	push	r31
    3ca0:	df 93       	push	r29
    3ca2:	cf 93       	push	r28
    3ca4:	cd b7       	in	r28, 0x3d	; 61
    3ca6:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionUDREmpty!=NULL)
    3ca8:	80 91 b5 02 	lds	r24, 0x02B5
    3cac:	90 91 b6 02 	lds	r25, 0x02B6
    3cb0:	00 97       	sbiw	r24, 0x00	; 0
    3cb2:	29 f0       	breq	.+10     	; 0x3cbe <__vector_14+0x40>
	{
		MUART_pvoidfUserFunctionUDREmpty();
    3cb4:	e0 91 b5 02 	lds	r30, 0x02B5
    3cb8:	f0 91 b6 02 	lds	r31, 0x02B6
    3cbc:	09 95       	icall
	}
}
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	ff 91       	pop	r31
    3cc4:	ef 91       	pop	r30
    3cc6:	bf 91       	pop	r27
    3cc8:	af 91       	pop	r26
    3cca:	9f 91       	pop	r25
    3ccc:	8f 91       	pop	r24
    3cce:	7f 91       	pop	r23
    3cd0:	6f 91       	pop	r22
    3cd2:	5f 91       	pop	r21
    3cd4:	4f 91       	pop	r20
    3cd6:	3f 91       	pop	r19
    3cd8:	2f 91       	pop	r18
    3cda:	0f 90       	pop	r0
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	0f 90       	pop	r0
    3ce0:	1f 90       	pop	r1
    3ce2:	18 95       	reti

00003ce4 <__vector_15>:
void __vector_15(void)  __attribute__((signal));
void __vector_15(void)
{
    3ce4:	1f 92       	push	r1
    3ce6:	0f 92       	push	r0
    3ce8:	0f b6       	in	r0, 0x3f	; 63
    3cea:	0f 92       	push	r0
    3cec:	11 24       	eor	r1, r1
    3cee:	2f 93       	push	r18
    3cf0:	3f 93       	push	r19
    3cf2:	4f 93       	push	r20
    3cf4:	5f 93       	push	r21
    3cf6:	6f 93       	push	r22
    3cf8:	7f 93       	push	r23
    3cfa:	8f 93       	push	r24
    3cfc:	9f 93       	push	r25
    3cfe:	af 93       	push	r26
    3d00:	bf 93       	push	r27
    3d02:	ef 93       	push	r30
    3d04:	ff 93       	push	r31
    3d06:	df 93       	push	r29
    3d08:	cf 93       	push	r28
    3d0a:	cd b7       	in	r28, 0x3d	; 61
    3d0c:	de b7       	in	r29, 0x3e	; 62
	if(MUART_pvoidfUserFunctionTxC!=NULL)
    3d0e:	80 91 b3 02 	lds	r24, 0x02B3
    3d12:	90 91 b4 02 	lds	r25, 0x02B4
    3d16:	00 97       	sbiw	r24, 0x00	; 0
    3d18:	29 f0       	breq	.+10     	; 0x3d24 <__vector_15+0x40>
	{
		MUART_pvoidfUserFunctionTxC();
    3d1a:	e0 91 b3 02 	lds	r30, 0x02B3
    3d1e:	f0 91 b4 02 	lds	r31, 0x02B4
    3d22:	09 95       	icall
	}
}
    3d24:	cf 91       	pop	r28
    3d26:	df 91       	pop	r29
    3d28:	ff 91       	pop	r31
    3d2a:	ef 91       	pop	r30
    3d2c:	bf 91       	pop	r27
    3d2e:	af 91       	pop	r26
    3d30:	9f 91       	pop	r25
    3d32:	8f 91       	pop	r24
    3d34:	7f 91       	pop	r23
    3d36:	6f 91       	pop	r22
    3d38:	5f 91       	pop	r21
    3d3a:	4f 91       	pop	r20
    3d3c:	3f 91       	pop	r19
    3d3e:	2f 91       	pop	r18
    3d40:	0f 90       	pop	r0
    3d42:	0f be       	out	0x3f, r0	; 63
    3d44:	0f 90       	pop	r0
    3d46:	1f 90       	pop	r1
    3d48:	18 95       	reti

00003d4a <main>:
#define SCL_PIN		MDIO_PIN0
#define SDA_PIN		MDIO_PIN1
#define PASS_LOCATION	0x22

int main(void)
{
    3d4a:	0f 93       	push	r16
    3d4c:	df 93       	push	r29
    3d4e:	cf 93       	push	r28
    3d50:	00 d0       	rcall	.+0      	; 0x3d52 <main+0x8>
    3d52:	cd b7       	in	r28, 0x3d	; 61
    3d54:	de b7       	in	r29, 0x3e	; 62

	/* key pad init */
	MDIO_StderrSetPortDirection(MDIO_PORTB,0x0F);
    3d56:	82 e0       	ldi	r24, 0x02	; 2
    3d58:	6f e0       	ldi	r22, 0x0F	; 15
    3d5a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <MDIO_StderrSetPortDirection>
	MDIO_StderrSetPortValue(MDIO_PORTB,0xF0);
    3d5e:	82 e0       	ldi	r24, 0x02	; 2
    3d60:	60 ef       	ldi	r22, 0xF0	; 240
    3d62:	0e 94 a1 0e 	call	0x1d42	; 0x1d42 <MDIO_StderrSetPortValue>
	/* Motor init*/
	MDIO_StderrSetPinDirection(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_OUTPUT);
    3d66:	84 e0       	ldi	r24, 0x04	; 4
    3d68:	67 e0       	ldi	r22, 0x07	; 7
    3d6a:	41 e0       	ldi	r20, 0x01	; 1
    3d6c:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	/* Door init*/
	MDIO_StderrSetPinDirection(DOOR_PORT,DOOR_PIN,MDIO_PIN_OUTPUT);
    3d70:	84 e0       	ldi	r24, 0x04	; 4
    3d72:	65 e0       	ldi	r22, 0x05	; 5
    3d74:	41 e0       	ldi	r20, 0x01	; 1
    3d76:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	/* SDA ,SCL init */
	MDIO_StderrSetPinDirection(MDIO_PORTC,SCL_PIN,MDIO_PIN_PULLUP);
    3d7a:	83 e0       	ldi	r24, 0x03	; 3
    3d7c:	60 e0       	ldi	r22, 0x00	; 0
    3d7e:	43 e0       	ldi	r20, 0x03	; 3
    3d80:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	MDIO_StderrSetPinDirection(MDIO_PORTC,SCL_PIN,MDIO_PIN_PULLUP);
    3d84:	83 e0       	ldi	r24, 0x03	; 3
    3d86:	60 e0       	ldi	r22, 0x00	; 0
    3d88:	43 e0       	ldi	r20, 0x03	; 3
    3d8a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <MDIO_StderrSetPinDirection>
	/* set timer 1 to fast pwm mode with top value of 20000 and tick count equal to 1us to make pulse freq =20ms*/
	MTIM_stderrInit(MTIM_TIMER1,MTIM_CS_CLOCK_PRESCALAR_8,MTIM_MODE_FASTPWMCTRLTOP,MTIM_HWPIN_NONINVERTING_PWM);
    3d8e:	81 e0       	ldi	r24, 0x01	; 1
    3d90:	62 e0       	ldi	r22, 0x02	; 2
    3d92:	4e e0       	ldi	r20, 0x0E	; 14
    3d94:	22 e0       	ldi	r18, 0x02	; 2
    3d96:	0e 94 21 14 	call	0x2842	; 0x2842 <MTIM_stderrInit>
	MTIM_SetTimer1TopValue(20000);
    3d9a:	80 e2       	ldi	r24, 0x20	; 32
    3d9c:	9e e4       	ldi	r25, 0x4E	; 78
    3d9e:	0e 94 e5 18 	call	0x31ca	; 0x31ca <MTIM_SetTimer1TopValue>
	HLCD_voidinit();
    3da2:	0e 94 3c 08 	call	0x1078	; 0x1078 <HLCD_voidinit>
	MADC_stderrInit(MADC_VREF_AVCC,MADC_PRESCALER_2);
    3da6:	81 e0       	ldi	r24, 0x01	; 1
    3da8:	61 e0       	ldi	r22, 0x01	; 1
    3daa:	0e 94 87 0c 	call	0x190e	; 0x190e <MADC_stderrInit>
	MADC_voidAdcEnable();
    3dae:	0e 94 ed 0c 	call	0x19da	; 0x19da <MADC_voidAdcEnable>
	MUART_stderrInit(9600,MUART_DATABITS_8,MUART_PARITY_NONE,MUART_STOPBITS_1);
    3db2:	60 e8       	ldi	r22, 0x80	; 128
    3db4:	75 e2       	ldi	r23, 0x25	; 37
    3db6:	80 e0       	ldi	r24, 0x00	; 0
    3db8:	90 e0       	ldi	r25, 0x00	; 0
    3dba:	43 e0       	ldi	r20, 0x03	; 3
    3dbc:	20 e0       	ldi	r18, 0x00	; 0
    3dbe:	00 e0       	ldi	r16, 0x00	; 0
    3dc0:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <MUART_stderrInit>
	MUART_voidEnableTx();
    3dc4:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <MUART_voidEnableTx>
	HNVM_stderrInit();
    3dc8:	0e 94 ed 09 	call	0x13da	; 0x13da <HNVM_stderrInit>
	HLCD_voidSendString("HELLO");
    3dcc:	80 e6       	ldi	r24, 0x60	; 96
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	MTIM_voidBusyWaitDlay(2500);
    3dd4:	84 ec       	ldi	r24, 0xC4	; 196
    3dd6:	99 e0       	ldi	r25, 0x09	; 9
    3dd8:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	u8 L_u8PassFlag=1;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	8a 83       	std	Y+2, r24	; 0x02
	u8 L_u8HomeMode;
	while(1)
	{
		L_u8PassFlag=HOME_u8GetPassword();
    3de0:	0e 94 5e 1f 	call	0x3ebc	; 0x3ebc <HOME_u8GetPassword>
    3de4:	8a 83       	std	Y+2, r24	; 0x02
		if(1==L_u8PassFlag)
    3de6:	8a 81       	ldd	r24, Y+2	; 0x02
    3de8:	81 30       	cpi	r24, 0x01	; 1
    3dea:	09 f0       	breq	.+2      	; 0x3dee <main+0xa4>
    3dec:	4e c0       	rjmp	.+156    	; 0x3e8a <main+0x140>
		{
			MUART_voidSendChar('S');
    3dee:	83 e5       	ldi	r24, 0x53	; 83
    3df0:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
			OPEN_DOOR();
    3df4:	0e 94 09 21 	call	0x4212	; 0x4212 <OPEN_DOOR>
			HLCD_voidSendCommand(1);
    3df8:	81 e0       	ldi	r24, 0x01	; 1
    3dfa:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("1-Control Home");
    3dfe:	86 e6       	ldi	r24, 0x66	; 102
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			HLCD_voidGoToXY(1,0);
    3e06:	81 e0       	ldi	r24, 0x01	; 1
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
			HLCD_voidSendString("2-Edit Password");
    3e0e:	85 e7       	ldi	r24, 0x75	; 117
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			L_u8HomeMode=KEYPAD_u8GetPressedKey();
    3e16:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3e1a:	89 83       	std	Y+1, r24	; 0x01
    3e1c:	03 c0       	rjmp	.+6      	; 0x3e24 <main+0xda>
			while(L_u8HomeMode==255)
			{
				L_u8HomeMode=KEYPAD_u8GetPressedKey();
    3e1e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3e22:	89 83       	std	Y+1, r24	; 0x01
			HLCD_voidSendCommand(1);
			HLCD_voidSendString("1-Control Home");
			HLCD_voidGoToXY(1,0);
			HLCD_voidSendString("2-Edit Password");
			L_u8HomeMode=KEYPAD_u8GetPressedKey();
			while(L_u8HomeMode==255)
    3e24:	89 81       	ldd	r24, Y+1	; 0x01
    3e26:	8f 3f       	cpi	r24, 0xFF	; 255
    3e28:	d1 f3       	breq	.-12     	; 0x3e1e <main+0xd4>
			{
				L_u8HomeMode=KEYPAD_u8GetPressedKey();
			}
			if(2==L_u8HomeMode)
    3e2a:	89 81       	ldd	r24, Y+1	; 0x01
    3e2c:	82 30       	cpi	r24, 0x02	; 2
    3e2e:	11 f4       	brne	.+4      	; 0x3e34 <main+0xea>
			{
				HOME_voidEditPassword();
    3e30:	0e 94 e2 1f 	call	0x3fc4	; 0x3fc4 <HOME_voidEditPassword>
			{
				// do nothing countiue to execute control home program
			}
			while(1)
			{
				HLCD_voidSendCommand(1);
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
				HLCD_voidSendString("choose mode:");
    3e3a:	85 e8       	ldi	r24, 0x85	; 133
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
				HLCD_voidGoToXY(1,0);
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	60 e0       	ldi	r22, 0x00	; 0
    3e46:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
				HLCD_voidSendString("1- Manual 2-Auto");
    3e4a:	82 e9       	ldi	r24, 0x92	; 146
    3e4c:	90 e0       	ldi	r25, 0x00	; 0
    3e4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
				L_u8HomeMode=KEYPAD_u8GetPressedKey();
    3e52:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3e56:	89 83       	std	Y+1, r24	; 0x01
    3e58:	03 c0       	rjmp	.+6      	; 0x3e60 <main+0x116>
				while(L_u8HomeMode==255)
				{
					L_u8HomeMode=KEYPAD_u8GetPressedKey();
    3e5a:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3e5e:	89 83       	std	Y+1, r24	; 0x01
				HLCD_voidSendCommand(1);
				HLCD_voidSendString("choose mode:");
				HLCD_voidGoToXY(1,0);
				HLCD_voidSendString("1- Manual 2-Auto");
				L_u8HomeMode=KEYPAD_u8GetPressedKey();
				while(L_u8HomeMode==255)
    3e60:	89 81       	ldd	r24, Y+1	; 0x01
    3e62:	8f 3f       	cpi	r24, 0xFF	; 255
    3e64:	d1 f3       	breq	.-12     	; 0x3e5a <main+0x110>
				{
					L_u8HomeMode=KEYPAD_u8GetPressedKey();
				}
				if(1==L_u8HomeMode)
    3e66:	89 81       	ldd	r24, Y+1	; 0x01
    3e68:	81 30       	cpi	r24, 0x01	; 1
    3e6a:	31 f4       	brne	.+12     	; 0x3e78 <main+0x12e>
				{
					MUART_voidSendChar('M');
    3e6c:	8d e4       	ldi	r24, 0x4D	; 77
    3e6e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
					HOME_voidManualMode();
    3e72:	0e 94 68 20 	call	0x40d0	; 0x40d0 <HOME_voidManualMode>
    3e76:	de cf       	rjmp	.-68     	; 0x3e34 <main+0xea>
				}
				else if(2==L_u8HomeMode)
    3e78:	89 81       	ldd	r24, Y+1	; 0x01
    3e7a:	82 30       	cpi	r24, 0x02	; 2
    3e7c:	d9 f6       	brne	.-74     	; 0x3e34 <main+0xea>
				{
					MUART_voidSendChar('A');
    3e7e:	81 e4       	ldi	r24, 0x41	; 65
    3e80:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
					HOME_voidAutoMode();
    3e84:	0e 94 9e 20 	call	0x413c	; 0x413c <HOME_voidAutoMode>
    3e88:	d5 cf       	rjmp	.-86     	; 0x3e34 <main+0xea>
			}

		}
		else
		{
			HLCD_voidSendCommand(1);
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("Theif Call 911");
    3e90:	83 ea       	ldi	r24, 0xA3	; 163
    3e92:	90 e0       	ldi	r25, 0x00	; 0
    3e94:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			HLCD_voidGoToXY(1,0);
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	60 e0       	ldi	r22, 0x00	; 0
    3e9c:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
			HLCD_voidSendString("Door is closed");
    3ea0:	82 eb       	ldi	r24, 0xB2	; 178
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			CLOSE_DOOR();
    3ea8:	0e 94 33 21 	call	0x4266	; 0x4266 <CLOSE_DOOR>
			break;
		}
	}
	return 0;
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	90 e0       	ldi	r25, 0x00	; 0
}
    3eb0:	0f 90       	pop	r0
    3eb2:	0f 90       	pop	r0
    3eb4:	cf 91       	pop	r28
    3eb6:	df 91       	pop	r29
    3eb8:	0f 91       	pop	r16
    3eba:	08 95       	ret

00003ebc <HOME_u8GetPassword>:

u8 HOME_u8GetPassword(void)
{
    3ebc:	df 93       	push	r29
    3ebe:	cf 93       	push	r28
    3ec0:	00 d0       	rcall	.+0      	; 0x3ec2 <HOME_u8GetPassword+0x6>
    3ec2:	00 d0       	rcall	.+0      	; 0x3ec4 <HOME_u8GetPassword+0x8>
    3ec4:	0f 92       	push	r0
    3ec6:	cd b7       	in	r28, 0x3d	; 61
    3ec8:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8read;
	u8 L_u8PassCounter;
	u8 L_u8EnteredPass=0;
    3eca:	1b 82       	std	Y+3, r1	; 0x03
	u8 L_u8LoginPass=0;
    3ecc:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8PassFlag=0;
    3ece:	19 82       	std	Y+1, r1	; 0x01

	for(L_u8PassCounter=0;L_u8PassCounter<3;L_u8PassCounter++)
    3ed0:	1c 82       	std	Y+4, r1	; 0x04
    3ed2:	6b c0       	rjmp	.+214    	; 0x3faa <HOME_u8GetPassword+0xee>
	{
		HLCD_voidSendCommand(1);
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
		HLCD_voidSendString("Enter Pass:");
    3eda:	81 ec       	ldi	r24, 0xC1	; 193
    3edc:	90 e0       	ldi	r25, 0x00	; 0
    3ede:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
		L_u8EnteredPass=0;
    3ee2:	1b 82       	std	Y+3, r1	; 0x03
		L_u8LoginPass=0;
    3ee4:	1a 82       	std	Y+2, r1	; 0x02
    3ee6:	1d c0       	rjmp	.+58     	; 0x3f22 <HOME_u8GetPassword+0x66>
		while(L_u8EnteredPass<3)
		{
			L_u8read=KEYPAD_u8GetPressedKey();
    3ee8:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3eec:	8d 83       	std	Y+5, r24	; 0x05
			if(L_u8read!=255)
    3eee:	8d 81       	ldd	r24, Y+5	; 0x05
    3ef0:	8f 3f       	cpi	r24, 0xFF	; 255
    3ef2:	b9 f0       	breq	.+46     	; 0x3f22 <HOME_u8GetPassword+0x66>
			{
				HLCD_voidSendChar('*');
    3ef4:	8a e2       	ldi	r24, 0x2A	; 42
    3ef6:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
				L_u8LoginPass=L_u8LoginPass*10+L_u8read;
    3efa:	8a 81       	ldd	r24, Y+2	; 0x02
    3efc:	88 2f       	mov	r24, r24
    3efe:	90 e0       	ldi	r25, 0x00	; 0
    3f00:	9c 01       	movw	r18, r24
    3f02:	22 0f       	add	r18, r18
    3f04:	33 1f       	adc	r19, r19
    3f06:	c9 01       	movw	r24, r18
    3f08:	88 0f       	add	r24, r24
    3f0a:	99 1f       	adc	r25, r25
    3f0c:	88 0f       	add	r24, r24
    3f0e:	99 1f       	adc	r25, r25
    3f10:	82 0f       	add	r24, r18
    3f12:	93 1f       	adc	r25, r19
    3f14:	98 2f       	mov	r25, r24
    3f16:	8d 81       	ldd	r24, Y+5	; 0x05
    3f18:	89 0f       	add	r24, r25
    3f1a:	8a 83       	std	Y+2, r24	; 0x02
				L_u8EnteredPass++;
    3f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f1e:	8f 5f       	subi	r24, 0xFF	; 255
    3f20:	8b 83       	std	Y+3, r24	; 0x03
	{
		HLCD_voidSendCommand(1);
		HLCD_voidSendString("Enter Pass:");
		L_u8EnteredPass=0;
		L_u8LoginPass=0;
		while(L_u8EnteredPass<3)
    3f22:	8b 81       	ldd	r24, Y+3	; 0x03
    3f24:	83 30       	cpi	r24, 0x03	; 3
    3f26:	00 f3       	brcs	.-64     	; 0x3ee8 <HOME_u8GetPassword+0x2c>
				HLCD_voidSendChar('*');
				L_u8LoginPass=L_u8LoginPass*10+L_u8read;
				L_u8EnteredPass++;
			}
		}
		L_u8read=HNVM_u8ReadByte(PASS_LOCATION);
    3f28:	82 e2       	ldi	r24, 0x22	; 34
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	0e 94 c5 0a 	call	0x158a	; 0x158a <HNVM_u8ReadByte>
    3f30:	8d 83       	std	Y+5, r24	; 0x05
		if(L_u8read==0)
    3f32:	8d 81       	ldd	r24, Y+5	; 0x05
    3f34:	88 23       	and	r24, r24
    3f36:	11 f4       	brne	.+4      	; 0x3f3c <HOME_u8GetPassword+0x80>
		{
			//default
			// for the first time only if the user changes the pass this will never be with zero
			L_u8read=123;
    3f38:	8b e7       	ldi	r24, 0x7B	; 123
    3f3a:	8d 83       	std	Y+5, r24	; 0x05
		}
		else
		{
			//
		}
		if(L_u8read==L_u8LoginPass)
    3f3c:	9d 81       	ldd	r25, Y+5	; 0x05
    3f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f40:	98 17       	cp	r25, r24
    3f42:	71 f4       	brne	.+28     	; 0x3f60 <HOME_u8GetPassword+0xa4>
		{
			HLCD_voidSendCommand(1);
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("Welcome Ahmed");
    3f4a:	8d ec       	ldi	r24, 0xCD	; 205
    3f4c:	90 e0       	ldi	r25, 0x00	; 0
    3f4e:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			L_u8PassFlag=1;
    3f52:	81 e0       	ldi	r24, 0x01	; 1
    3f54:	89 83       	std	Y+1, r24	; 0x01
			MTIM_voidBusyWaitDlay(500);
    3f56:	84 ef       	ldi	r24, 0xF4	; 244
    3f58:	91 e0       	ldi	r25, 0x01	; 1
    3f5a:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
    3f5e:	29 c0       	rjmp	.+82     	; 0x3fb2 <HOME_u8GetPassword+0xf6>
			break;
		}
		else
		{
			HLCD_voidSendCommand(1);
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
			HLCD_voidSendString("Wrong pass");
    3f66:	8b ed       	ldi	r24, 0xDB	; 219
    3f68:	90 e0       	ldi	r25, 0x00	; 0
    3f6a:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			HLCD_voidGoToXY(1,0);
    3f6e:	81 e0       	ldi	r24, 0x01	; 1
    3f70:	60 e0       	ldi	r22, 0x00	; 0
    3f72:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
			HLCD_voidSendNumber(2-L_u8PassCounter);
    3f76:	8c 81       	ldd	r24, Y+4	; 0x04
    3f78:	28 2f       	mov	r18, r24
    3f7a:	30 e0       	ldi	r19, 0x00	; 0
    3f7c:	82 e0       	ldi	r24, 0x02	; 2
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	82 1b       	sub	r24, r18
    3f82:	93 0b       	sbc	r25, r19
    3f84:	aa 27       	eor	r26, r26
    3f86:	97 fd       	sbrc	r25, 7
    3f88:	a0 95       	com	r26
    3f8a:	ba 2f       	mov	r27, r26
    3f8c:	bc 01       	movw	r22, r24
    3f8e:	cd 01       	movw	r24, r26
    3f90:	0e 94 f5 08 	call	0x11ea	; 0x11ea <HLCD_voidSendNumber>
			HLCD_voidSendString("More try");
    3f94:	86 ee       	ldi	r24, 0xE6	; 230
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
			MTIM_voidBusyWaitDlay(1500);
    3f9c:	8c ed       	ldi	r24, 0xDC	; 220
    3f9e:	95 e0       	ldi	r25, 0x05	; 5
    3fa0:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	u8 L_u8PassCounter;
	u8 L_u8EnteredPass=0;
	u8 L_u8LoginPass=0;
	u8 L_u8PassFlag=0;

	for(L_u8PassCounter=0;L_u8PassCounter<3;L_u8PassCounter++)
    3fa4:	8c 81       	ldd	r24, Y+4	; 0x04
    3fa6:	8f 5f       	subi	r24, 0xFF	; 255
    3fa8:	8c 83       	std	Y+4, r24	; 0x04
    3faa:	8c 81       	ldd	r24, Y+4	; 0x04
    3fac:	83 30       	cpi	r24, 0x03	; 3
    3fae:	08 f4       	brcc	.+2      	; 0x3fb2 <HOME_u8GetPassword+0xf6>
    3fb0:	91 cf       	rjmp	.-222    	; 0x3ed4 <HOME_u8GetPassword+0x18>
			HLCD_voidSendNumber(2-L_u8PassCounter);
			HLCD_voidSendString("More try");
			MTIM_voidBusyWaitDlay(1500);
		}
	}
	return L_u8PassFlag;
    3fb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    3fb4:	0f 90       	pop	r0
    3fb6:	0f 90       	pop	r0
    3fb8:	0f 90       	pop	r0
    3fba:	0f 90       	pop	r0
    3fbc:	0f 90       	pop	r0
    3fbe:	cf 91       	pop	r28
    3fc0:	df 91       	pop	r29
    3fc2:	08 95       	ret

00003fc4 <HOME_voidEditPassword>:
void HOME_voidEditPassword(void)
{
    3fc4:	df 93       	push	r29
    3fc6:	cf 93       	push	r28
    3fc8:	00 d0       	rcall	.+0      	; 0x3fca <HOME_voidEditPassword+0x6>
    3fca:	00 d0       	rcall	.+0      	; 0x3fcc <HOME_voidEditPassword+0x8>
    3fcc:	cd b7       	in	r28, 0x3d	; 61
    3fce:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8read;
	u8 L_u8EnteredPass=0;
    3fd0:	1b 82       	std	Y+3, r1	; 0x03
	u8 L_u8NewLoginPass=0;
    3fd2:	1a 82       	std	Y+2, r1	; 0x02
	u8 L_u8ConforimNewPass=0;
    3fd4:	19 82       	std	Y+1, r1	; 0x01

	HLCD_voidSendCommand(1);
    3fd6:	81 e0       	ldi	r24, 0x01	; 1
    3fd8:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("Enter New Pass:");
    3fdc:	8f ee       	ldi	r24, 0xEF	; 239
    3fde:	90 e0       	ldi	r25, 0x00	; 0
    3fe0:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	HLCD_voidGoToXY(1,0);
    3fe4:	81 e0       	ldi	r24, 0x01	; 1
    3fe6:	60 e0       	ldi	r22, 0x00	; 0
    3fe8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
	L_u8EnteredPass=0;
    3fec:	1b 82       	std	Y+3, r1	; 0x03
	L_u8NewLoginPass=0;
    3fee:	1a 82       	std	Y+2, r1	; 0x02
    3ff0:	1d c0       	rjmp	.+58     	; 0x402c <HOME_voidEditPassword+0x68>
	while(L_u8EnteredPass<3)
	{
		L_u8read=KEYPAD_u8GetPressedKey();
    3ff2:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    3ff6:	8c 83       	std	Y+4, r24	; 0x04
		if(L_u8read!=255)
    3ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    3ffa:	8f 3f       	cpi	r24, 0xFF	; 255
    3ffc:	b9 f0       	breq	.+46     	; 0x402c <HOME_voidEditPassword+0x68>
		{
			HLCD_voidSendChar('*');
    3ffe:	8a e2       	ldi	r24, 0x2A	; 42
    4000:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
			L_u8NewLoginPass=L_u8NewLoginPass*10+L_u8read;
    4004:	8a 81       	ldd	r24, Y+2	; 0x02
    4006:	88 2f       	mov	r24, r24
    4008:	90 e0       	ldi	r25, 0x00	; 0
    400a:	9c 01       	movw	r18, r24
    400c:	22 0f       	add	r18, r18
    400e:	33 1f       	adc	r19, r19
    4010:	c9 01       	movw	r24, r18
    4012:	88 0f       	add	r24, r24
    4014:	99 1f       	adc	r25, r25
    4016:	88 0f       	add	r24, r24
    4018:	99 1f       	adc	r25, r25
    401a:	82 0f       	add	r24, r18
    401c:	93 1f       	adc	r25, r19
    401e:	98 2f       	mov	r25, r24
    4020:	8c 81       	ldd	r24, Y+4	; 0x04
    4022:	89 0f       	add	r24, r25
    4024:	8a 83       	std	Y+2, r24	; 0x02
			L_u8EnteredPass++;
    4026:	8b 81       	ldd	r24, Y+3	; 0x03
    4028:	8f 5f       	subi	r24, 0xFF	; 255
    402a:	8b 83       	std	Y+3, r24	; 0x03
	HLCD_voidSendCommand(1);
	HLCD_voidSendString("Enter New Pass:");
	HLCD_voidGoToXY(1,0);
	L_u8EnteredPass=0;
	L_u8NewLoginPass=0;
	while(L_u8EnteredPass<3)
    402c:	8b 81       	ldd	r24, Y+3	; 0x03
    402e:	83 30       	cpi	r24, 0x03	; 3
    4030:	00 f3       	brcs	.-64     	; 0x3ff2 <HOME_voidEditPassword+0x2e>
			HLCD_voidSendChar('*');
			L_u8NewLoginPass=L_u8NewLoginPass*10+L_u8read;
			L_u8EnteredPass++;
		}
	}
	HLCD_voidSendCommand(HLCD_CLEAR);
    4032:	81 e0       	ldi	r24, 0x01	; 1
    4034:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("Confirm Pass:");
    4038:	8f ef       	ldi	r24, 0xFF	; 255
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	HLCD_voidGoToXY(1,0);
    4040:	81 e0       	ldi	r24, 0x01	; 1
    4042:	60 e0       	ldi	r22, 0x00	; 0
    4044:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
	L_u8EnteredPass=0;
    4048:	1b 82       	std	Y+3, r1	; 0x03
	L_u8ConforimNewPass=0;
    404a:	19 82       	std	Y+1, r1	; 0x01
    404c:	1d c0       	rjmp	.+58     	; 0x4088 <HOME_voidEditPassword+0xc4>
	while(L_u8EnteredPass<3)
	{
		L_u8read=KEYPAD_u8GetPressedKey();
    404e:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    4052:	8c 83       	std	Y+4, r24	; 0x04
		if(L_u8read!=255)
    4054:	8c 81       	ldd	r24, Y+4	; 0x04
    4056:	8f 3f       	cpi	r24, 0xFF	; 255
    4058:	b9 f0       	breq	.+46     	; 0x4088 <HOME_voidEditPassword+0xc4>
		{
			HLCD_voidSendChar('*');
    405a:	8a e2       	ldi	r24, 0x2A	; 42
    405c:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <HLCD_voidSendChar>
			L_u8ConforimNewPass=L_u8ConforimNewPass*10+L_u8read;
    4060:	89 81       	ldd	r24, Y+1	; 0x01
    4062:	88 2f       	mov	r24, r24
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	9c 01       	movw	r18, r24
    4068:	22 0f       	add	r18, r18
    406a:	33 1f       	adc	r19, r19
    406c:	c9 01       	movw	r24, r18
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	82 0f       	add	r24, r18
    4078:	93 1f       	adc	r25, r19
    407a:	98 2f       	mov	r25, r24
    407c:	8c 81       	ldd	r24, Y+4	; 0x04
    407e:	89 0f       	add	r24, r25
    4080:	89 83       	std	Y+1, r24	; 0x01
			L_u8EnteredPass++;
    4082:	8b 81       	ldd	r24, Y+3	; 0x03
    4084:	8f 5f       	subi	r24, 0xFF	; 255
    4086:	8b 83       	std	Y+3, r24	; 0x03
	HLCD_voidSendCommand(HLCD_CLEAR);
	HLCD_voidSendString("Confirm Pass:");
	HLCD_voidGoToXY(1,0);
	L_u8EnteredPass=0;
	L_u8ConforimNewPass=0;
	while(L_u8EnteredPass<3)
    4088:	8b 81       	ldd	r24, Y+3	; 0x03
    408a:	83 30       	cpi	r24, 0x03	; 3
    408c:	00 f3       	brcs	.-64     	; 0x404e <HOME_voidEditPassword+0x8a>
			HLCD_voidSendChar('*');
			L_u8ConforimNewPass=L_u8ConforimNewPass*10+L_u8read;
			L_u8EnteredPass++;
		}
	}
	if(L_u8ConforimNewPass==L_u8NewLoginPass)
    408e:	99 81       	ldd	r25, Y+1	; 0x01
    4090:	8a 81       	ldd	r24, Y+2	; 0x02
    4092:	98 17       	cp	r25, r24
    4094:	71 f4       	brne	.+28     	; 0x40b2 <HOME_voidEditPassword+0xee>
	{
		HNVM_voidWriteByte(PASS_LOCATION,L_u8NewLoginPass);
    4096:	82 e2       	ldi	r24, 0x22	; 34
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	6a 81       	ldd	r22, Y+2	; 0x02
    409c:	0e 94 02 0a 	call	0x1404	; 0x1404 <HNVM_voidWriteByte>
		HLCD_voidSendString("Password Changed");
    40a0:	8d e0       	ldi	r24, 0x0D	; 13
    40a2:	91 e0       	ldi	r25, 0x01	; 1
    40a4:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
		MTIM_voidBusyWaitDlay(1000);
    40a8:	88 ee       	ldi	r24, 0xE8	; 232
    40aa:	93 e0       	ldi	r25, 0x03	; 3
    40ac:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
    40b0:	08 c0       	rjmp	.+16     	; 0x40c2 <HOME_voidEditPassword+0xfe>

	}
	else
	{
		HLCD_voidSendString("not same pass");
    40b2:	8e e1       	ldi	r24, 0x1E	; 30
    40b4:	91 e0       	ldi	r25, 0x01	; 1
    40b6:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
		MTIM_voidBusyWaitDlay(1000);
    40ba:	88 ee       	ldi	r24, 0xE8	; 232
    40bc:	93 e0       	ldi	r25, 0x03	; 3
    40be:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
	}
}
    40c2:	0f 90       	pop	r0
    40c4:	0f 90       	pop	r0
    40c6:	0f 90       	pop	r0
    40c8:	0f 90       	pop	r0
    40ca:	cf 91       	pop	r28
    40cc:	df 91       	pop	r29
    40ce:	08 95       	ret

000040d0 <HOME_voidManualMode>:
void HOME_voidManualMode(void)
{
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	0f 92       	push	r0
    40d6:	cd b7       	in	r28, 0x3d	; 61
    40d8:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8Device;
	while(1)
	{

		L_u8Device=255;
    40da:	8f ef       	ldi	r24, 0xFF	; 255
    40dc:	89 83       	std	Y+1, r24	; 0x01
		HLCD_voidSendCommand(1);
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
		HLCD_voidSendString("1- Contol Fan");
    40e4:	8c e2       	ldi	r24, 0x2C	; 44
    40e6:	91 e0       	ldi	r25, 0x01	; 1
    40e8:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
		HLCD_voidGoToXY(1,0);
    40ec:	81 e0       	ldi	r24, 0x01	; 1
    40ee:	60 e0       	ldi	r22, 0x00	; 0
    40f0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
		HLCD_voidSendString("3- to go back");
    40f4:	8a e3       	ldi	r24, 0x3A	; 58
    40f6:	91 e0       	ldi	r25, 0x01	; 1
    40f8:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
    40fc:	03 c0       	rjmp	.+6      	; 0x4104 <HOME_voidManualMode+0x34>
		while(L_u8Device==255)
		{
			L_u8Device=KEYPAD_u8GetPressedKey();
    40fe:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    4102:	89 83       	std	Y+1, r24	; 0x01
		L_u8Device=255;
		HLCD_voidSendCommand(1);
		HLCD_voidSendString("1- Contol Fan");
		HLCD_voidGoToXY(1,0);
		HLCD_voidSendString("3- to go back");
		while(L_u8Device==255)
    4104:	89 81       	ldd	r24, Y+1	; 0x01
    4106:	8f 3f       	cpi	r24, 0xFF	; 255
    4108:	d1 f3       	breq	.-12     	; 0x40fe <HOME_voidManualMode+0x2e>
		{
			L_u8Device=KEYPAD_u8GetPressedKey();
		}
		if(L_u8Device!=255)
    410a:	89 81       	ldd	r24, Y+1	; 0x01
    410c:	8f 3f       	cpi	r24, 0xFF	; 255
    410e:	29 f3       	breq	.-54     	; 0x40da <HOME_voidManualMode+0xa>
		{
			if(1==L_u8Device)
    4110:	89 81       	ldd	r24, Y+1	; 0x01
    4112:	81 30       	cpi	r24, 0x01	; 1
    4114:	31 f4       	brne	.+12     	; 0x4122 <HOME_voidManualMode+0x52>
			{
				MUART_voidSendChar('F');
    4116:	86 e4       	ldi	r24, 0x46	; 70
    4118:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
				HOME_voidControlFan();
    411c:	0e 94 bf 20 	call	0x417e	; 0x417e <HOME_voidControlFan>
    4120:	dc cf       	rjmp	.-72     	; 0x40da <HOME_voidManualMode+0xa>
			}
			else if(2==L_u8Device)
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	82 30       	cpi	r24, 0x02	; 2
    4126:	c9 f2       	breq	.-78     	; 0x40da <HOME_voidManualMode+0xa>
			{

			}
			else if(3==L_u8Device)
    4128:	89 81       	ldd	r24, Y+1	; 0x01
    412a:	83 30       	cpi	r24, 0x03	; 3
    412c:	b1 f6       	brne	.-84     	; 0x40da <HOME_voidManualMode+0xa>
			{
				MUART_voidSendChar('B');
    412e:	82 e4       	ldi	r24, 0x42	; 66
    4130:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
				break;
				// do nothing
			}
		}
	}
    4134:	0f 90       	pop	r0
    4136:	cf 91       	pop	r28
    4138:	df 91       	pop	r29
    413a:	08 95       	ret

0000413c <HOME_voidAutoMode>:
}
void HOME_voidAutoMode(void)
{
    413c:	df 93       	push	r29
    413e:	cf 93       	push	r28
    4140:	0f 92       	push	r0
    4142:	cd b7       	in	r28, 0x3d	; 61
    4144:	de b7       	in	r29, 0x3e	; 62
	u8 L_u8Device;
	HLCD_voidSendCommand(1);
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("Automatic Mode");
    414c:	88 e4       	ldi	r24, 0x48	; 72
    414e:	91 e0       	ldi	r25, 0x01	; 1
    4150:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	HLCD_voidGoToXY(1,0);
    4154:	81 e0       	ldi	r24, 0x01	; 1
    4156:	60 e0       	ldi	r22, 0x00	; 0
    4158:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
	HLCD_voidSendString("3-to go back");
    415c:	87 e5       	ldi	r24, 0x57	; 87
    415e:	91 e0       	ldi	r25, 0x01	; 1
    4160:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	while(1)
	{
		L_u8Device=KEYPAD_u8GetPressedKey();
    4164:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    4168:	89 83       	std	Y+1, r24	; 0x01
		if(3==L_u8Device)
    416a:	89 81       	ldd	r24, Y+1	; 0x01
    416c:	83 30       	cpi	r24, 0x03	; 3
    416e:	d1 f7       	brne	.-12     	; 0x4164 <HOME_voidAutoMode+0x28>
		{
			MUART_voidSendChar('B');
    4170:	82 e4       	ldi	r24, 0x42	; 66
    4172:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
			break;
		}
	}
    4176:	0f 90       	pop	r0
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	08 95       	ret

0000417e <HOME_voidControlFan>:
}
void HOME_voidControlFan(void)
{
    417e:	df 93       	push	r29
    4180:	cf 93       	push	r28
    4182:	0f 92       	push	r0
    4184:	cd b7       	in	r28, 0x3d	; 61
    4186:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(1);
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	0e 94 96 08 	call	0x112c	; 0x112c <HLCD_voidSendCommand>
	HLCD_voidSendString("1- ON 2-OFF");
    418e:	84 e6       	ldi	r24, 0x64	; 100
    4190:	91 e0       	ldi	r25, 0x01	; 1
    4192:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	HLCD_voidGoToXY(1,0);
    4196:	81 e0       	ldi	r24, 0x01	; 1
    4198:	60 e0       	ldi	r22, 0x00	; 0
    419a:	0e 94 7e 09 	call	0x12fc	; 0x12fc <HLCD_voidGoToXY>
	HLCD_voidSendString("3- to go back");
    419e:	8a e3       	ldi	r24, 0x3A	; 58
    41a0:	91 e0       	ldi	r25, 0x01	; 1
    41a2:	0e 94 c1 08 	call	0x1182	; 0x1182 <HLCD_voidSendString>
	u8 L_u8State;
	while(1)
	{
		L_u8State=KEYPAD_u8GetPressedKey();
    41a6:	0e 94 a3 0b 	call	0x1746	; 0x1746 <KEYPAD_u8GetPressedKey>
    41aa:	89 83       	std	Y+1, r24	; 0x01
		if(L_u8State!=255)
    41ac:	89 81       	ldd	r24, Y+1	; 0x01
    41ae:	8f 3f       	cpi	r24, 0xFF	; 255
    41b0:	d1 f3       	breq	.-12     	; 0x41a6 <HOME_voidControlFan+0x28>
		{
			if(1==L_u8State)
    41b2:	89 81       	ldd	r24, Y+1	; 0x01
    41b4:	81 30       	cpi	r24, 0x01	; 1
    41b6:	21 f4       	brne	.+8      	; 0x41c0 <HOME_voidControlFan+0x42>
			{
				MUART_voidSendChar('O');
    41b8:	8f e4       	ldi	r24, 0x4F	; 79
    41ba:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
    41be:	f3 cf       	rjmp	.-26     	; 0x41a6 <HOME_voidControlFan+0x28>
			}
			else if(2==L_u8State)
    41c0:	89 81       	ldd	r24, Y+1	; 0x01
    41c2:	82 30       	cpi	r24, 0x02	; 2
    41c4:	21 f4       	brne	.+8      	; 0x41ce <HOME_voidControlFan+0x50>
			{
				MUART_voidSendChar('F');
    41c6:	86 e4       	ldi	r24, 0x46	; 70
    41c8:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
    41cc:	ec cf       	rjmp	.-40     	; 0x41a6 <HOME_voidControlFan+0x28>
			}
			else if(3==L_u8State)
    41ce:	89 81       	ldd	r24, Y+1	; 0x01
    41d0:	83 30       	cpi	r24, 0x03	; 3
    41d2:	49 f7       	brne	.-46     	; 0x41a6 <HOME_voidControlFan+0x28>
			{
				MUART_voidSendChar('B');
    41d4:	82 e4       	ldi	r24, 0x42	; 66
    41d6:	0e 94 cc 1c 	call	0x3998	; 0x3998 <MUART_voidSendChar>
			else
			{
				// do nothing
			}
		}
	}
    41da:	0f 90       	pop	r0
    41dc:	cf 91       	pop	r28
    41de:	df 91       	pop	r29
    41e0:	08 95       	ret

000041e2 <OPEN_FAN>:
}

void OPEN_FAN(void)
{
    41e2:	df 93       	push	r29
    41e4:	cf 93       	push	r28
    41e6:	cd b7       	in	r28, 0x3d	; 61
    41e8:	de b7       	in	r29, 0x3e	; 62
	MDIO_StderrSetPinValue(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_HIGH);
    41ea:	84 e0       	ldi	r24, 0x04	; 4
    41ec:	67 e0       	ldi	r22, 0x07	; 7
    41ee:	41 e0       	ldi	r20, 0x01	; 1
    41f0:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
}
    41f4:	cf 91       	pop	r28
    41f6:	df 91       	pop	r29
    41f8:	08 95       	ret

000041fa <CLOSE_FAN>:
void CLOSE_FAN(void)
{
    41fa:	df 93       	push	r29
    41fc:	cf 93       	push	r28
    41fe:	cd b7       	in	r28, 0x3d	; 61
    4200:	de b7       	in	r29, 0x3e	; 62
	MDIO_StderrSetPinValue(MOTOR_PORT,MOTOR_PIN,MDIO_PIN_LOW);
    4202:	84 e0       	ldi	r24, 0x04	; 4
    4204:	67 e0       	ldi	r22, 0x07	; 7
    4206:	40 e0       	ldi	r20, 0x00	; 0
    4208:	0e 94 3b 11 	call	0x2276	; 0x2276 <MDIO_StderrSetPinValue>
}
    420c:	cf 91       	pop	r28
    420e:	df 91       	pop	r29
    4210:	08 95       	ret

00004212 <OPEN_DOOR>:
void OPEN_DOOR(void)
{
    4212:	df 93       	push	r29
    4214:	cf 93       	push	r28
    4216:	00 d0       	rcall	.+0      	; 0x4218 <OPEN_DOOR+0x6>
    4218:	cd b7       	in	r28, 0x3d	; 61
    421a:	de b7       	in	r29, 0x3e	; 62
	u16 L_u8Counter;
	MTIM_stderrStartTimer(MTIM_TIMER1);
    421c:	81 e0       	ldi	r24, 0x01	; 1
    421e:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <MTIM_stderrStartTimer>
	for(L_u8Counter=1500;L_u8Counter<=2000;L_u8Counter++)
    4222:	8c ed       	ldi	r24, 0xDC	; 220
    4224:	95 e0       	ldi	r25, 0x05	; 5
    4226:	9a 83       	std	Y+2, r25	; 0x02
    4228:	89 83       	std	Y+1, r24	; 0x01
    422a:	0f c0       	rjmp	.+30     	; 0x424a <OPEN_DOOR+0x38>
	{
		MTIM_stderrSetOCR(MTIM_TIMER1,L_u8Counter);
    422c:	29 81       	ldd	r18, Y+1	; 0x01
    422e:	3a 81       	ldd	r19, Y+2	; 0x02
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	b9 01       	movw	r22, r18
    4234:	0e 94 5d 16 	call	0x2cba	; 0x2cba <MTIM_stderrSetOCR>
		MTIM_voidBusyWaitDlay(5);
    4238:	85 e0       	ldi	r24, 0x05	; 5
    423a:	90 e0       	ldi	r25, 0x00	; 0
    423c:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
}
void OPEN_DOOR(void)
{
	u16 L_u8Counter;
	MTIM_stderrStartTimer(MTIM_TIMER1);
	for(L_u8Counter=1500;L_u8Counter<=2000;L_u8Counter++)
    4240:	89 81       	ldd	r24, Y+1	; 0x01
    4242:	9a 81       	ldd	r25, Y+2	; 0x02
    4244:	01 96       	adiw	r24, 0x01	; 1
    4246:	9a 83       	std	Y+2, r25	; 0x02
    4248:	89 83       	std	Y+1, r24	; 0x01
    424a:	89 81       	ldd	r24, Y+1	; 0x01
    424c:	9a 81       	ldd	r25, Y+2	; 0x02
    424e:	27 e0       	ldi	r18, 0x07	; 7
    4250:	81 3d       	cpi	r24, 0xD1	; 209
    4252:	92 07       	cpc	r25, r18
    4254:	58 f3       	brcs	.-42     	; 0x422c <OPEN_DOOR+0x1a>
	{
		MTIM_stderrSetOCR(MTIM_TIMER1,L_u8Counter);
		MTIM_voidBusyWaitDlay(5);
	}
	MTIM_stderrStopTimer(MTIM_TIMER1);
    4256:	81 e0       	ldi	r24, 0x01	; 1
    4258:	0e 94 28 16 	call	0x2c50	; 0x2c50 <MTIM_stderrStopTimer>

}
    425c:	0f 90       	pop	r0
    425e:	0f 90       	pop	r0
    4260:	cf 91       	pop	r28
    4262:	df 91       	pop	r29
    4264:	08 95       	ret

00004266 <CLOSE_DOOR>:
void CLOSE_DOOR(void)
{
    4266:	df 93       	push	r29
    4268:	cf 93       	push	r28
    426a:	00 d0       	rcall	.+0      	; 0x426c <CLOSE_DOOR+0x6>
    426c:	cd b7       	in	r28, 0x3d	; 61
    426e:	de b7       	in	r29, 0x3e	; 62
	u16 L_u8Counter;
	MTIM_stderrStartTimer(MTIM_TIMER1);
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	0e 94 eb 15 	call	0x2bd6	; 0x2bd6 <MTIM_stderrStartTimer>
	for(L_u8Counter=1500;L_u8Counter>=1000;L_u8Counter--)
    4276:	8c ed       	ldi	r24, 0xDC	; 220
    4278:	95 e0       	ldi	r25, 0x05	; 5
    427a:	9a 83       	std	Y+2, r25	; 0x02
    427c:	89 83       	std	Y+1, r24	; 0x01
    427e:	0f c0       	rjmp	.+30     	; 0x429e <CLOSE_DOOR+0x38>
	{
		MTIM_stderrSetOCR(MTIM_TIMER1,L_u8Counter);
    4280:	29 81       	ldd	r18, Y+1	; 0x01
    4282:	3a 81       	ldd	r19, Y+2	; 0x02
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	b9 01       	movw	r22, r18
    4288:	0e 94 5d 16 	call	0x2cba	; 0x2cba <MTIM_stderrSetOCR>
		MTIM_voidBusyWaitDlay(5);
    428c:	85 e0       	ldi	r24, 0x05	; 5
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	0e 94 9c 18 	call	0x3138	; 0x3138 <MTIM_voidBusyWaitDlay>
}
void CLOSE_DOOR(void)
{
	u16 L_u8Counter;
	MTIM_stderrStartTimer(MTIM_TIMER1);
	for(L_u8Counter=1500;L_u8Counter>=1000;L_u8Counter--)
    4294:	89 81       	ldd	r24, Y+1	; 0x01
    4296:	9a 81       	ldd	r25, Y+2	; 0x02
    4298:	01 97       	sbiw	r24, 0x01	; 1
    429a:	9a 83       	std	Y+2, r25	; 0x02
    429c:	89 83       	std	Y+1, r24	; 0x01
    429e:	89 81       	ldd	r24, Y+1	; 0x01
    42a0:	9a 81       	ldd	r25, Y+2	; 0x02
    42a2:	23 e0       	ldi	r18, 0x03	; 3
    42a4:	88 3e       	cpi	r24, 0xE8	; 232
    42a6:	92 07       	cpc	r25, r18
    42a8:	58 f7       	brcc	.-42     	; 0x4280 <CLOSE_DOOR+0x1a>
	{
		MTIM_stderrSetOCR(MTIM_TIMER1,L_u8Counter);
		MTIM_voidBusyWaitDlay(5);
	}
	MTIM_stderrStopTimer(MTIM_TIMER1);
    42aa:	81 e0       	ldi	r24, 0x01	; 1
    42ac:	0e 94 28 16 	call	0x2c50	; 0x2c50 <MTIM_stderrStopTimer>
}
    42b0:	0f 90       	pop	r0
    42b2:	0f 90       	pop	r0
    42b4:	cf 91       	pop	r28
    42b6:	df 91       	pop	r29
    42b8:	08 95       	ret

000042ba <__udivmodsi4>:
    42ba:	a1 e2       	ldi	r26, 0x21	; 33
    42bc:	1a 2e       	mov	r1, r26
    42be:	aa 1b       	sub	r26, r26
    42c0:	bb 1b       	sub	r27, r27
    42c2:	fd 01       	movw	r30, r26
    42c4:	0d c0       	rjmp	.+26     	; 0x42e0 <__udivmodsi4_ep>

000042c6 <__udivmodsi4_loop>:
    42c6:	aa 1f       	adc	r26, r26
    42c8:	bb 1f       	adc	r27, r27
    42ca:	ee 1f       	adc	r30, r30
    42cc:	ff 1f       	adc	r31, r31
    42ce:	a2 17       	cp	r26, r18
    42d0:	b3 07       	cpc	r27, r19
    42d2:	e4 07       	cpc	r30, r20
    42d4:	f5 07       	cpc	r31, r21
    42d6:	20 f0       	brcs	.+8      	; 0x42e0 <__udivmodsi4_ep>
    42d8:	a2 1b       	sub	r26, r18
    42da:	b3 0b       	sbc	r27, r19
    42dc:	e4 0b       	sbc	r30, r20
    42de:	f5 0b       	sbc	r31, r21

000042e0 <__udivmodsi4_ep>:
    42e0:	66 1f       	adc	r22, r22
    42e2:	77 1f       	adc	r23, r23
    42e4:	88 1f       	adc	r24, r24
    42e6:	99 1f       	adc	r25, r25
    42e8:	1a 94       	dec	r1
    42ea:	69 f7       	brne	.-38     	; 0x42c6 <__udivmodsi4_loop>
    42ec:	60 95       	com	r22
    42ee:	70 95       	com	r23
    42f0:	80 95       	com	r24
    42f2:	90 95       	com	r25
    42f4:	9b 01       	movw	r18, r22
    42f6:	ac 01       	movw	r20, r24
    42f8:	bd 01       	movw	r22, r26
    42fa:	cf 01       	movw	r24, r30
    42fc:	08 95       	ret

000042fe <__divmodsi4>:
    42fe:	97 fb       	bst	r25, 7
    4300:	09 2e       	mov	r0, r25
    4302:	05 26       	eor	r0, r21
    4304:	0e d0       	rcall	.+28     	; 0x4322 <__divmodsi4_neg1>
    4306:	57 fd       	sbrc	r21, 7
    4308:	04 d0       	rcall	.+8      	; 0x4312 <__divmodsi4_neg2>
    430a:	d7 df       	rcall	.-82     	; 0x42ba <__udivmodsi4>
    430c:	0a d0       	rcall	.+20     	; 0x4322 <__divmodsi4_neg1>
    430e:	00 1c       	adc	r0, r0
    4310:	38 f4       	brcc	.+14     	; 0x4320 <__divmodsi4_exit>

00004312 <__divmodsi4_neg2>:
    4312:	50 95       	com	r21
    4314:	40 95       	com	r20
    4316:	30 95       	com	r19
    4318:	21 95       	neg	r18
    431a:	3f 4f       	sbci	r19, 0xFF	; 255
    431c:	4f 4f       	sbci	r20, 0xFF	; 255
    431e:	5f 4f       	sbci	r21, 0xFF	; 255

00004320 <__divmodsi4_exit>:
    4320:	08 95       	ret

00004322 <__divmodsi4_neg1>:
    4322:	f6 f7       	brtc	.-4      	; 0x4320 <__divmodsi4_exit>
    4324:	90 95       	com	r25
    4326:	80 95       	com	r24
    4328:	70 95       	com	r23
    432a:	61 95       	neg	r22
    432c:	7f 4f       	sbci	r23, 0xFF	; 255
    432e:	8f 4f       	sbci	r24, 0xFF	; 255
    4330:	9f 4f       	sbci	r25, 0xFF	; 255
    4332:	08 95       	ret

00004334 <__prologue_saves__>:
    4334:	2f 92       	push	r2
    4336:	3f 92       	push	r3
    4338:	4f 92       	push	r4
    433a:	5f 92       	push	r5
    433c:	6f 92       	push	r6
    433e:	7f 92       	push	r7
    4340:	8f 92       	push	r8
    4342:	9f 92       	push	r9
    4344:	af 92       	push	r10
    4346:	bf 92       	push	r11
    4348:	cf 92       	push	r12
    434a:	df 92       	push	r13
    434c:	ef 92       	push	r14
    434e:	ff 92       	push	r15
    4350:	0f 93       	push	r16
    4352:	1f 93       	push	r17
    4354:	cf 93       	push	r28
    4356:	df 93       	push	r29
    4358:	cd b7       	in	r28, 0x3d	; 61
    435a:	de b7       	in	r29, 0x3e	; 62
    435c:	ca 1b       	sub	r28, r26
    435e:	db 0b       	sbc	r29, r27
    4360:	0f b6       	in	r0, 0x3f	; 63
    4362:	f8 94       	cli
    4364:	de bf       	out	0x3e, r29	; 62
    4366:	0f be       	out	0x3f, r0	; 63
    4368:	cd bf       	out	0x3d, r28	; 61
    436a:	09 94       	ijmp

0000436c <__epilogue_restores__>:
    436c:	2a 88       	ldd	r2, Y+18	; 0x12
    436e:	39 88       	ldd	r3, Y+17	; 0x11
    4370:	48 88       	ldd	r4, Y+16	; 0x10
    4372:	5f 84       	ldd	r5, Y+15	; 0x0f
    4374:	6e 84       	ldd	r6, Y+14	; 0x0e
    4376:	7d 84       	ldd	r7, Y+13	; 0x0d
    4378:	8c 84       	ldd	r8, Y+12	; 0x0c
    437a:	9b 84       	ldd	r9, Y+11	; 0x0b
    437c:	aa 84       	ldd	r10, Y+10	; 0x0a
    437e:	b9 84       	ldd	r11, Y+9	; 0x09
    4380:	c8 84       	ldd	r12, Y+8	; 0x08
    4382:	df 80       	ldd	r13, Y+7	; 0x07
    4384:	ee 80       	ldd	r14, Y+6	; 0x06
    4386:	fd 80       	ldd	r15, Y+5	; 0x05
    4388:	0c 81       	ldd	r16, Y+4	; 0x04
    438a:	1b 81       	ldd	r17, Y+3	; 0x03
    438c:	aa 81       	ldd	r26, Y+2	; 0x02
    438e:	b9 81       	ldd	r27, Y+1	; 0x01
    4390:	ce 0f       	add	r28, r30
    4392:	d1 1d       	adc	r29, r1
    4394:	0f b6       	in	r0, 0x3f	; 63
    4396:	f8 94       	cli
    4398:	de bf       	out	0x3e, r29	; 62
    439a:	0f be       	out	0x3f, r0	; 63
    439c:	cd bf       	out	0x3d, r28	; 61
    439e:	ed 01       	movw	r28, r26
    43a0:	08 95       	ret

000043a2 <_exit>:
    43a2:	f8 94       	cli

000043a4 <__stop_program>:
    43a4:	ff cf       	rjmp	.-2      	; 0x43a4 <__stop_program>
